{"/hardware/en/maixII/M2S/reources.html": {"title": "M2S介绍", "content": "# M2S介绍\n\nMaixII S是基于 V833 芯片设计的一款【板卡】+【底板】的开发板产品。\n\n## 板卡\n![](./assets/M2s_Dock.jpg)\n\n> 资料[下载](https://dl.sipeed.com/shareURL/MaixII/MaixII-A)\n\n### 参数\n| 项目 | 参数 | \n| --- | --- |\n| CPU | 全志 V833 Arm-Cortex-A7 1.2Ghz 主频 |\n| NPU | 0.4TOPS 算力|\n|内存 |标配单片 16bit 128MB DDR3（可选最大 16bit 512MB DDR3）|\n|存储|核心板板载 128MB SD NAND（可选 512MB 和 4GB）底板板载 TF 卡座子，可扩展存储|\n|摄像头接口|MIPI：标配 200W 像素可见光摄像头(可选配宽动态摄像头)，76 度视场角<br>DVP：标配 30W 像素红外摄像头|\n| 补光灯接口 | 板载 2 个 DC-DC 恒流降压驱动电路+2 个 2P 1.25mm 卧贴母座 <br>（每路最大驱动能力达到 5V 0.5A）|\n| 显示屏幕接口 |  MIPI：默认引出 4-lane MIPI 接口，已适配 5 寸和 7 寸屏 |\n| 触摸屏接口 | 6P 0.5mm FPC 座子：可以连接电容触摸屏或者电阻触摸屏，目前已适配 GT911 |\n| 音频接口 | 板载 3W 单声道音频功放，有 2P 1.25mm 卧贴母座可以连接喇叭 <br>板载驻极体麦克风电路，有 2P 1.25mm 卧贴母座可以连接麦克风 |\n| 以太网 | 板载百兆 PHY 和百兆网口变压器，有 6P 1.25mm 卧贴母座可以连接以太网口 |\n| 继电器 | 板载继电器，触电切换能力 2A 30VDC |\n| RTC 实时时钟 | 板载专用 RTC 芯片+1220 纽扣电池座子 |\n| 按键 |• 复位按键<br>• FEL 按键（进入下载模式）<br>• 2 个用户可编程按键（可以用作防拆报警键等自定义功能）|\n| 扩展接口 | <br>• 4P 座子：1 组 UART、1 组 485、1 组 USB、1 组 IIC<br>• 9P 座子：2 个供电引脚+2 个继电器引脚+1 个按键的 2 引脚+2 个信号引脚<br>• 9P 座子：7 个信号引脚（可以复用为 1 组 SPI 总线+多个 CS 脚）+2 个电源引脚<br>• 9P 座子：6 个信号引脚+3 个电源引脚 |\n\n\n## 产品技术支持\nM2S开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maixII/M2S/V833.html": {"title": "M2S核心介绍", "content": "# M2S核心介绍\n\n## V833 Chip\n\nV833智能视觉AI专用处理器是基于存算紧耦AI引擎的视频识别处理器，采用业界优秀的半导体工艺，创新突破了存算紧耦架构、神经网络权重量化技术、人脸检测技术和人脸图像质量评估技术、图像畸变矫正技术、图像防抖技术和可变帧率的编码技术等关键技术，有效地解决了神经网络计算复杂度高、网络性能差、人脸检测效率低和准确度不高、广角和鱼眼镜头的图像畸变、智能识别/安防产品功耗高等问题，综合技术水平达国内优秀水平，是一款能耗低、运算效率高、检测效率高、图像效果佳的人工智能视频识别处理器。\n\n> 取至<http://www.elecfans.com/d/1557234.html>\n\n![](./assets/V833.png)\n\n## 参数\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 单核Cortex A7@1.2GHz |\n| Video encoder | H.264, up to 5M@20fps<br>H.265, up to 5M@30fps <br>JPEG, up to 1080p@60fps |\n| NPU | 0.4T |\n| EISE | Up to 1080p@60fps |\n| SDRAM | DDR2/DDR3/DDR3L |\n| SMHC | SMHC x3 (SDcO, SDC1, SDC2) |\n| SPI | SPI x3 (SPIO with 2 CS, SPIO supportsquad-output/quad-input SPl mode) |\n| LCD | Parallel RGB, Serial RGB, i8080 |\n| DSPO | BT1120,BT656 |\n| l2S | l2S x2 (12S0,I2S1) |\n| Parallel CSI | Support |\n| Ethernet | 10/100/1000 Mbit/s Ethernet port with RGMll and RMll interfaces|\n| TWI | TWI x5 (TWIO,TWI1,TWI2,TWI3,s_TwWIO) |\n| RSB | support |\n| GPADC | 2-ch |\n| Audio codec | Output : LINEOUTP/N<br>Input: MICIN1P/N, LINEINL |\n| MIPI CSI | 4-lane, up to 8M@30fps |\n| MIPI DSI | Support |\n| Package | LFBGA273 |"}, "/hardware/en/maixII/index.html": {"title": "MaixII", "content": "# MaixII\n继经典的K210 MAIX-I系列AIOT板卡之后，Sipeed继续推出多款可运行完整Linux环境的边缘计算板卡，将以MAIX-ll，MAIX-I依次命名。\n\n\n## MaixII Dock\n<div align=\"center\">\n\n<a href=\"./M2/resources.html\"><img src=\"./M2/asserts/m2dock.jpg\"></a>\n</div>\n\n## MaixII S\n<div align=\"center\">\n\n<a href=\"./M2S/V833.html\"><img src=\"./M2S/assets/M2s_Dock.jpg\"></a>\n</div>\n\n\n## Maix Sense\n<div align=\"center\">\n\n<a href=\"./M2A/R329.html\"><img src=\"./M2A/assets/M2A-1.gif\"></a>\n</div>"}, "/hardware/en/maixII/M2/usage.html": {"title": "进阶使用", "content": "---\ntitle: 进阶使用\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: MaixII M2dock 上手使用\n---\n\n> 没有 Linux 系统使用基础的同学，不推荐以下的使用方式\n\n## 认识 openwrt 系统\n\n> 全志 V831 使用 Tina Linux 系统，移植自 openwrt 。\n\nOpenWrt 可以被描述为一个嵌入式的 Linux 发行版，可见 [官方网址](https://openwrt.org) & [官方开源仓库](https://github.com/openwrt/openwrt)。\n\nOpenWRT 是一个高度模块化、高度自动化的嵌入式 Linux 系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及 VOIP 设备中。 同时，它还提供了 100 多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序。\n\n### opkg 包管理器\n\nOpkg 是一个轻量快速的套件管理系统，目前已成为 Opensource 界嵌入式系统标准。常用于 路由、 交换机等 嵌入式设备中，用来管理软件包的安装升级与下载。\n\n```bash\nroot@sipeed:/# opkg list\nMaixPy3 - 0.2.5-1\nalsa-lib - 1.1.4.1-1\nbusybox - 1.27.2-3\nbusybox-init-base-files - 167-1612350358\nca-certificates - 20160104\ncurl - 7.54.1-1\ndropbear - 2015.71-2\ne2fsprogs - 1.42.12-1\neyesee-mpp-external - 1.0-1\neyesee-mpp-middleware - 1.0-1\neyesee-mpp-system - 1.0-1\n```\n\n#### 常用命令\n\n- opkg update 更新可以获取的软件包列表\n- opkg upgrade 对已经安装的软件包升级\n- opkg list 获取软件列表\n- opkg install 安装指定的软件包\n- opkg remove 卸载已经安装的指定的软件包\n\n### pip 包管理器\n\n[pip](https://pypi.org/project/pip/) 是 Python 包管理工具，该工具提供了对 Python 包的查找、下载、安装、卸载的功能。\n\n> 以下讯息由[YanxingLiu](https://github.com/YanxingLiu)提供与测试。\n\n#### pip换源\n\n在安装系统后可以更换镜像源，加速 pip 安装。\n\n#### 临时使用\n\n```\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\nsome-package 请自行更换成你想要安装的包\n\n#### 设为默认\n\n升级 pip 到最新的版本 (>=10.0.0) 后进行配置：\n\n```\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U\n```\n\n设置清华镜像源为默认：\n\n```\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n### 常用 Linux 命令\n\n- ls 查看目录下文件\n- cd pwd mv cp rm 一套文件管理命令\n- vi 编辑文件内容\n- top 查看系统内存\n- df 查看磁盘信息\n- time 查看时间\n- ifconfig 查看网络信息\n- free 查看剩余内存\n- ps 查看运行的进程\n- kill killall 杀死指定进程\n- chmod 给某个文件权限\n- passwd 设置用户的密码\n- more cat 查看文件内容\n- ping 检测某网址是否连通\n- wget 下载某链接文件\n- grep 搜索文件内容\n- ln 建立文件链接\n\n## 测试屏幕方法\n\n> 请测试前观察系统上电后屏幕是否会闪烁一次，这表示屏幕已经通电、驱动起来，并对其复位（RST）后产生的。\n\n在 Linux Shell 运行 `cat /dev/urandom > /dev/fb0` 就会输入随机数据到 fb0 产生雪花屏了，这表示屏幕显示是正常的。\n\n<center><img src=\"./asserts/lcd_test.jpg\" width=\"400\"></center>\n\n> 帧缓冲（framebuffer）是 Linux 为显示设备提供的一个接口，把显存抽象后的一种设备，他允许上层应用程序在图形模式下直接对显示缓冲区进行 读写操作。framebuffer 是 LCD 对应的一种 HAL（硬件抽象层），提供抽象的，统一的接口操作，用户不必关心硬件层是怎么实施的。这些都是由 Framebuffer 设备驱动来完成的。帧缓冲设备对应的设备文件为 /dev/fb*，如果系统有多个显示卡，Linux下还可支持多个帧缓冲设备，最多可达 32 个，分别为 /dev/fb0 到 /dev/fb31，而 /dev/fb 则为当前缺省的帧缓冲设备，通常指向 /dev/fb0，在嵌入式系统中支持一个显示设备就够了。帧缓冲设备为标准字 符设备，主设备号为 29 ，次设备号则从 0 到 31 。分别对应 /dev/fb0-/dev/fb31 。\n\n## 运行 Python3 解释器\n\n在 Linux 上使用 Python 编程只需要在 shell 命令行交互的接口输入 python3 即可启动，可直接复制代码粘贴后按回车键运行。\n\n```python\nimport platform\nprint(platform.uname())\n```\n\n2021年02月23日 实际操作结果：\n\n```bash\n   __  ___     _        __   _               \n  /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n/_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\ \n ----------------------------------------------\nLinux sipeed 4.9.118 #77 PREEMPT Wed Feb 3 11:06:36 UTC 2021 armv7l GNU/Linux\nPlease press Enter, then input maixpy3_config.py complete your configuration.\n\nroot@sipeed:/# python3\nPython 3.8.5 (default, Jan 17 2021, 06:07:56) \n[GCC 6.4.1] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import platform\n>>> print(platform.uname())\nuname_result(system='Linux', node='sipeed', release='4.9.118', version='#77 PREEMPT Wed Feb 3 11:06:36 UTC 2021', machine='armv7l', processor='')\n>>> \n```\n\n## 测试拍照功能\n\n```python\nfrom maix import display, camera\ndisplay.show(camera.capture())\n```\n\n<center><img src=\"./asserts/hello_world.jpg\" width=\"500\"></center>\n\n> 如果发现屏幕没有亮起显示摄像头内容，确保系统是最新的，排查硬件接线与通电方面的问题，通常产品出厂前都会做外设硬件测试的。\n\n## 入门教程\n\n本设备是支持使用 [MaixPy3](/soft/maixpy3/zh/index.html) 进行开发使用，请好好阅读 MaixPy3 的使用文档\n\n### **使用 Jupyter IDE 开发**\n\n> 注意！！！！ MaixPy M2dock 不支持在本机安装 Jupyter ！！！\n\n关于 jupyter 的使用和安装请到 MaixPy3 中的[开发环境配置](/soft/maixpy3/zh/install/install.html#jupyter-安装)中查看"}, "/hardware/en/maixII/M2/no_sd_flash.html": {"title": "无 SD 卡系统烧录方式", "content": "# 无 SD 卡系统烧录方式\n\n> 目前没有在V831上进行过flash系统烧录，V833可以使用一下方式进行烧录，镜像需要发送邮件获取\n\n- 从网上获取 PhoenixSuit(Windows) 烧录工具。\n  - [baidu-PhoenixSuit](https://www.baidu.com/s?wd=PhoenixSuit)\n  - [bing-PhoenixSuit](https://www.bing.com/search?q=PhoenixSuit&FORM=BESBTB&mkt=zh-CN) \n  - [github-PhoenixSuit](https://github.com/colorfulshark/PhoenixSuit)\n  - [lo4d-PhoenixSuit](https://phoenixsuit.en.lo4d.com/windows)\n\n## Windows 上使用 PhoenixSuit 烧录\n\n获取系统镜像（.img） 和烧录工具（.exe） 解压到你知道的地方。\n\n![](./../img/no_sd_flash.png)\n\n解压后打开 PhoenixSuit_V1.10 烧录工具 PhoenixSuit.exe 选择烧录的 .img 镜像。\n\n![](./../img/no_sd_flash_1.png)\n\n这时候开始插入硬件， 同时按下硬件的两个按键， 其中一个是 fel 烧录模式的触发， 要注意接线头是否联通。 （若是裸板如右图所示先按 FEL 后按 RST 复位）\n\n![](./../img/no_sd_flash_2.png)\n\n按住后， 此时插入电脑的 USB 口， 相当于上电（RST 复位） 进入烧录模式， 务必注意先按键再通电， 之后需要安装相应的 USB 驱动。\n\n> 如果该电脑插入后设备管理器显示驱动未安装， 请手动指向 PhoenixSuit_V1.10 / Drivers 的驱动文件夹完成安装， 安装完成如下显示 Android ADB Interface ， 如果实在搞不定就使用市面上常见的驱动安装软件（如驱动精灵） 帮助安装。\n\n![](./../img/no_sd_flash_3.png)\n\n这时候 PhoenixSuit 软件会提示是否格式化更新， 一直选是即可， 不成功可以重试或检测接线是否牢固。\n\n![](./../img/no_sd_flash_4.png)\n\n进度状态如下， 直到成功。\n\n![](./../img/no_sd_flash_5.png)\n\n\n<a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>"}, "/hardware/en/maixII/M2/flash.html": {"title": "MaixII-Dock 烧录系统", "content": "---\ntitle: MaixII-Dock 烧录系统\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: MaixII M2dock 烧录系统\n---\n\n| 文档更新时间 | 负责人 | 更新内容 |\n| :---: | :---: | :---: |\n| 2021.03.20 | 大老鼠 | 新建文档，开始编写内容 |\n| 2021.12.8 | Ray & 点灯鼠 | 整理并更新烧录方式 |\n\n> 不同的内存卡存在差异，不是官方店铺购买的内存卡不能保准可以烧录系统，每个人的烧录环境存在差异，推荐小白直接购买官方的镜像卡。\n\n## 获取镜像文件\n\n从下载站获取最新的 V831 系统镜像 [SDK_MaixII/release](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/release) ,得到一个压缩包，解压之后就得到一个 .img 文件，这个就是系统镜像文件\n\n> 如果下载站下载的很慢，建议使用百度网盘进行下载，下载站的下载带宽有限。链接：<https://pan.baidu.com/s/10qU9BUL8NE07ILexc5EZhw> 提取码：2333 \n\n### 镜像文件命名方式\n\n对于V831的镜像文件名字是有对应的规则，以后大家可以根据自己的需求来进行下载\n\n就拿`maixpy3-0.3.4_MaixII-Dock_20211119.7z`这镜像文件来说\n\n| 名称 | 含义 |\n| --- | --- |\n| maixpy3-0.3.4 | 此镜像是给 MaixPy3 专用，并内置了`0.3.4`的版本 |\n| MaixII-Dock | 可使用 MaixII-Dock 开发板平台 |\n| 20211119 | 镜像更新日期 |\n\n## Windows 上使用 PhoenixCard烧录镜像\n\nPhoenixSuit和PhoenixCard是全志芯片常用的两种烧录工具，一个是USB烧录，另一个是sd卡烧录。对于需要烧录到flash中的，常用PhoenixSuit，而使用sd卡的在用PhoenixSuit需要安装USB驱动等一系列的麻烦操作，就可以使用PhoenixCard进行烧录。\n\n### 准备工作\n\n1. 烧录工具 [PhoenixCard](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/tools)\n\n2. 系统 [镜像](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/release)\n\n3. 内存卡格式化工具 [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)\n\n### 系统烧录\n\n1. 将内存卡通过读卡器接到电脑的 USB 口，打开 SD Card Formatter 软件，对内存卡进行格式化。Refresh后点击Format后格式化，注意选中对应的sd卡。\n\n     ![image-20210802102810041](./../../../assets/maixII/V831/image-20210802102810041.png)\n\n2. 打开PhoenixCard,固件处选择对应镜像包（下载镜像后需要先解压），然后刷新盘符，如果未找到可以尝试重新插拔下SD卡，勾选启动卡，点击烧卡。\n\n     ![image-20210802104155132](./../../../assets/maixII/V831/image-20210802104155132.png)\n\n     大概30s后，烧录完成。\n     ![image-20210802104608721](./../../../assets/maixII/V831/image-20210802104608721.png)\n\n## Linux(Ubuntu) 使用 Livesuit 烧录\n\n### 安装烧录工具 Livesuit \n\n> **每次更新系统 linux kernel 之后需要重新安装软件**\n\n1. 安装依赖 dkms\n\n     ```shell\n     sudo apt install dkms\n     ```\n\n1. 安装 libpng1.2（一定要使用这个版本）\n\n     ```shell\n     wget http://archive.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng_1.2.54.orig.tar.xz\n     tar xvf  libpng_1.2.54.orig.tar.xz\n     ```\n\n     ```shell\n     cd libpng-1.2.54\n     ./autogen.sh\n     ./configure\n     make -j8\n     sudo make install\n     ```\n\n     更新链接库:\n\n     ```shell\n     sudo ldconfig\n     ```\n\n1. 安装 **livesuit**\n\n     ```shell\n     git clone --recursive https://github.com/QinYUN575/allwinner-livesuit.git\n     cd allwinner-livesuit\n     chmod +x livesuit_installer.run\n     sudo ./livesuit_installer.run\n     ```\n\n\n\n### 使用 Livesuit 烧录\n\n`sudo livesuit` 打开烧录工具，并点击“固件”选择镜像文件\n\n![](./asserts/flash_15.png)\n\n不插入 SD 卡，将 V831 USB OTG 接口连接到 PC, 提示是否格式化分区，这时候插入 SD 卡，之后点击 `YES`\n\n![](./asserts/flash_17.png)\n\n等待烧录完成，提示“固件升级成功”，即可断开 USB ，至此固件烧录完毕\n\n![](./asserts/flash_19.png)\n\n![](./asserts/flash_21.png)\n\n\n## 附录\n### 无 SD/TF 卡烧录方式\n\n[烧录方式](./no_sd_flash.html)\n\n### 无读卡器烧录方式\n\n[烧录方式](./PhoenixSuit.html)\n\n### 使用 dd 烧录\n\n官方没有做 MaixII-Dock 的 dd 镜像相关支持，有需要的可以自行去学习如何制作 dd 镜像的[制作](https://www.cnblogs.com/USTHzhanglu/p/15431249.html)。"}, "/hardware/en/maixII/M2/resources.html": {"title": "板级资源介绍", "content": "---\ntitle: 板级资源介绍\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: 板级资源介绍\n---\n\nMaixII M2dock 是基于 V831 芯片设计的一款【板卡】+【底板】的开发板产品。\n\n> 与 Maix-Dock 开发方式有所不同，内置了 Tina-Linux 系统，可以使用 [MaixPy3](/maixpy3) 进行开发\n\n## M2板卡\n\n细节请看[淘宝商品介绍](https://item.taobao.com/item.htm?id=635874427363)，可同步最新讯息。\n\n![](./asserts/maix_v831.jpg)\n\n> 板卡参考资料下载 [MaixII_V831_v3100](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_V831/MaixII_V831_v3100)\n\n### V831 芯片介绍\n\n从 2019 年至今的时间，可以开始看到几个相机 SoC 与一个内置的转专业或 SIMD 指令加快人脸检测、物体检测等等，从低分辨率 Kendryte K210 处理器 2.5 k Ingenic T31 MIPS 视频处理器，甚至 4k 能力 iCatch V37 相机 SoC 。 Allwinner 过去推出了几个摄像头处理器(V3， V316， S3…)，但没有一个包含 NPU (又名 AI 加速器)。现在这已经改变了，Allwinner V831 Cortex-A7 全高清摄像头 SoC 还包括一个小的 200 GOPS NPU 。\n\n> 取自 [allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board](https://www.cnx-software.com/2020/04/28/allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board/)\n\n![V831_struct.png](./asserts/V831_struct.png)\n\n[V833／V831 Datasheet V1.0.pdf](https://linux-sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf)\n\n### M2板卡参数\n\n| 项目 | MAIX-I (K210) | MAIX-II (V831) |\n| --- | --- | --- |\n| 主控芯片<br> CPU | 400~600Mhz  | 800~1000Mhz |\n| 视频编码器 <br>Video encoder | None | H.264, up to 1080p@30fps<br>H265, up to 1080p@30fps<br>JPEG, up to 1080p@30fps |\n| AI加速器<br>NPU | 0.23TOPS<br>support Conv+BN+ACT+POOL | 0.2TOPS<br>support Conv,Inner_Product,Pool,Eltwise,ACT,BN,Split,Concat |\n| 内存<br>Memory | 8MB SRAM | SIP 64MB DDR2 |\n| 存储<br>Storage | 16MB SPI Nor Flash | 可选的16M flash(默认空贴)  |\n| 摄像头<br>Camera | DVP, 最高输入30W像素 | 2lane MIPI, 最高支持1080P@60fps |\n| 显示<br>Display | 8bit MCU LCD | 8bit MCU LCD, 配转接板可接最大10寸RGB LCD |\n| SDIO | None |SMHC x2 (SDC0, SDC1) |\n| SPI | SPIx3 |SPI x2 (SPI0, SPI1) |\n| I2C | I2C x3 | I2C x4 (TWI0, TWI1, TWI2, TWI3) |\n| I2S | 8bit I2S| I2S x1 (I2S0) |\n| Ethernet | None | 10/100 Mbit/s Ethernet port with RMII interface |\n| ADC | None | 1-ch 6bit LRADC for key |\n| Audio | None | LINEOUTP + MICIN1P/N |\n| 开发软件 | MaixPy/C | MaixPy3/linux |\n\n## 底板\n\n一般情况下可以认为底板屏幕为正面，带摄像头为背面。\n\n![](./asserts/m2dock.jpg)\n\n> 感谢热心网友分享的 [ M2 模块底板母座 PCB 封装](https://bbs.elecfans.com/jishu_2036119_1_1.html)\n> 底板参考资料下载 [MaixII_V831_v3100](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_V831/MaixII_V831_v3100)\n\n### 硬件参数\n\n![Pin](./asserts/M2Dock_pin.jpg)\n\n| 标号 | Maix II 部件 | 功能 | 备注 |\n| ---|--- | --- | --- |\n| 1|M.2 B-KEY 母座*1 | 用于连接 V831 核心版 | 出厂已连接 |\n| 2|核心板M2 铜柱螺母*1 | 用于配合 M2 螺丝固定 V831 核心板 | 出厂已固定 |\n| 3|电源指示 LED 灯*1 | 用于指示底板是否正常通电 | --- |\n| 4|状态指示 LED灯*1 | 用户可编程LED灯，一般用于状态指示 | --- |\n| 5|CPU 复位键*1 | 按下可重启 V831 芯片 | --- |\n| 6|用户按键*2 | 可以控制两路 IO 电平，自定义功能 | --- |\n| 7|Wi-Fi 模块*1 | 型号 RTL8189FTV，用于给模组提供 Wi-Fi 功能 | SDIO 接口 |\n| 8|BTB 摄像头接口*1 | 用于连接 BTB 摄像头模块 | 出厂已连接 |\n| 9|摄像头 M2 铜柱螺母*2 | 用于固定 BTB 摄像头 | 出厂已固定 |\n| 10|FHD 摄像头*1 | 默认SP2305 Sensor BTB形式，1080P | 默认含6mm焦距M12镜头，用户可选配其他焦距镜头 |\n| 11|USB 转 UART 芯片*1 |型号 GD32F150G8 供串口调试使用 | 出厂已烧录固件 |\n| 12|Type-C 接口(USB OTG) *1 | 用于 V831 的 USB OTG功能 | 可用于模组供电 |\n| 13|Type-C 接口(UART) *1 | 用于对V831通常的串口调试 | 可用于模组供电 |\n| 14|三轴加速度传感器*1 | I2C接口，可提供3轴的加速度数据 | --- |\n| 15|microSD 卡槽*1 | 用于外接 microSD卡 | 模组的系统默认从SD卡引导 |\n| 16|LCD 接口*1 | FPC0.5mm 24Pin，MCU 接口 | --- |\n| 17|IPS 高清屏幕\\*1 | 1.3寸IPS屏幕，分辨率240\\*240 | 出厂已连接 |\n| 18|IPEX Wi-Fi天线座| IPEX(一代) Wi-Fi天线 | --- |\n| 19|外拓排母 | 引出 V831 的 通用IO口，可用于连接外设 | --- |\n| 20|扬声器接口*1 | MX1.25 2P接口（间距1.25mm） | --- |\n| 21|扬声器*1 | 8Ω1W 1609复合铝膜扬声器  | 出厂已连接 |\n| 22|麦克风*1| 模拟驻极体麦克风 | --- |\n\n\n\n## 屏幕转接板\n\n已上架，请到淘宝上[购买](https://item.taobao.com/item.htm?spm=a1z10.5-c-s.w4002-21410578033.11.53793c62PXvb9N&id=635874427363)\n\n![](./asserts/lcd_rgb.jpg)\n\n### 资源\n\n[MaixII_V831_v3100 硬件资料库](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_V831/MaixII_V831_v3100)\n\n[MaixPy3 软件文档](/maixpy3)"}, "/hardware/en/maixII/M2/PhoenixSuit.html": {"title": "MaixII M2dock 烧录系统", "content": "---\ntitle: MaixII M2dock 烧录系统\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: MaixII M2dock 烧录系统\n---\n\n> ！！！一定要严格按照步骤操作！！！请使用大于 1G 的 TF/SD 卡进行烧录，开源版本要求使用 TF/SD 卡来启动系统。\n\nV831 为全志的 SOC， 所以 Windwos 使用 **PhoenixSuit**, Linux 上使用 **Livesuit** 烧录镜像文件。\n\n- 从下载站获取最新的 V831 系统镜像 [SDK_MaixII/release](http://dl.sipeed.com/shareURL/MAIX/SDK_MaixII/release) ，找不到就搜索 V831 获取最新的镜像。\n\n- 解压 V831 镜像压缩包，得到一个 xxxx.img 文件。\n\n- 从网上获取 PhoenixSuit(Windows) 烧录工具。\n  - [baidu-PhoenixSuit](https://www.baidu.com/s?wd=PhoenixSuit)\n  - [bing-PhoenixSuit](https://www.bing.com/search?q=PhoenixSuit&FORM=BESBTB&mkt=zh-CN) \n  - [github-PhoenixSuit](https://github.com/colorfulshark/PhoenixSuit)\n  - [lo4d-PhoenixSuit](https://phoenixsuit.en.lo4d.com/windows)\n\n## Windows 上使用 PhoenixSuit 烧录\n\n解压 PhoenixSuit(Windows) 工具压缩包，不插入 SD 卡，将 V831 USB OTG 接口连接到 PC， 打开设备管理器， 安装驱动文件\n\n![](./asserts/flash_01.png)\n\n![](./asserts/flash_03.png)\n\n打开烧录软件,  并浏览打开镜像文件\n\n![](./asserts/flash_05.png)\n\n重新插拔板子（上电不插入 SD 卡），软件提示是否要清空烧录，提示是否需要升级，点击 `YES` \n\n![](./asserts/flash_07.png)\n\n插入 sd 卡，提示是否强制格式化，再次点击 `YES`开始烧录（大约 40S）\n\n![](./asserts/flash_09.png)\n\n可能需要等待几秒才会更新状态，然后等待提示“固件升级成功”，即可断开 USB ，至此固件烧录完毕\n\n![](./asserts/flash_11.png)\n\n![](./asserts/flash_13.png)"}, "/hardware/en/maixII/M2/tools/vscode.html": {"title": "如何使用 vscode ", "content": "---\ntitle: 如何使用 vscode \nkeywords: vscode, MaixPy3, Python, Python3\ndesc: maixpy doc: 如何使用 vscode \n---\n\n## 前言\n\n它是微软出品的一款可扩展的轻量级开源编辑器，并且支持全平台系统。这些特性使得 VSCode 颇受欢迎，这也使其成为了一个很棒的 Python 开发平台。\n\n关于如何安装和使用它的教程已经数不胜数，这里只推荐[【用 VSCode 愉快地写 Python 代码】](https://zhuanlan.zhihu.com/p/66157046)。\n\n## 为什么要使用它？\n\n除了专业 Python 代码开发环境，它还支持打开 jupyter notebook 文档运行代码。\n\n与浏览器运行的 jupyter notebook 一样，执行 Python 代码的时候要选择对应的执行核心，如 [ipython/ipykernel](https://github.com/ipython/ipykernel) 或者 [rpyc_ikernel](https://github.com/sipeed/rpyc_ikernel) 的核心。\n\n下面就来说说如何使用它。\n\n### 创建 notebook 文档\n\n![](https://tukuimg.bdstatic.com/scrop/abb1e4146fb8679109fa99aa0b03f59f.gif)\n\n### 运行 Python 代码\n\n![](https://tukuimg.bdstatic.com/scrop/a1e2381bfac1a332a323774ee1b49c9f.gif)\n\n### 运行后预览图表\n\n![](https://tukuimg.bdstatic.com/scrop/9c5bf21507c776f98d55bcfc0e51c5ff.gif)\n\n## 你可以学到什么？\n\n在 VS Code 中使用 Jupyter 笔记本时需要进行的基本操作。如果您使用 VS Code 来满足其他开发需求，那么在 VS Code 中尝试使用 Jupyter Notebook 是非常方便的，这样您就可以只使用一个 IDE。特别是其代码自动补齐的功能可以让你的开发更快捷。\n\n> 需要注意的是，截止 2021年3月3日 在 VSCODE 里的 jupyter notebook 文档进行中断存在一些问题，并不是很流畅，如果出现了运行无响应的问题可以重新打开文档解决问题。"}, "/hardware/en/maixII/M2/tools/pyqt_rtsp.html": {"title": "如何使用 pyqt_rtsp ", "content": "---\ntitle: 如何使用 pyqt_rtsp \nkeywords: pyqt_rtsp, MaixPy3, Python, Python3\ndesc: maixpy doc: 如何使用 pyqt_rtsp \n---\n\n> 这是一个图传客户端工具，脱离 jupyter 的编程环境，使用的时候只需要在电脑上安装好就可以链接到硬件中获取图传信息。\n\n![](./asserts/pyqt_rtsp.png)\n\n这个工具是通过 Python 实现的 rtsp + rtp 流媒体服务，支持文件、图像、显示器、摄像头的图像传输，适用于支持 Python3 的系统。\n\n## 安装方法\n\n首先知道它是一个 C/S 结构图传客户端，你需要在某个硬件上安装 maixpy3 和启动服务，与之对应的客户端访问该硬件获取它的流媒体，这个硬件可以是你的嵌入式 linux 设备，也可以是你的 linux 计算机。\n\n### 服务端配置过程\n\n在 linux 设备上安装 maixpy3 执行 maixpy3_rpycs 即可启动作为服务端。\n\n```bash\n(venv) $ pip3 install maixpy3\n(venv) $ maixpy3_rpycs\n```\n\n### 客户端配置过程\n\n接着要在其他电脑上通过 Python 安装 [rtsp_pyqt](https://github.com/sipeed/MaixPy3/tree/main/examples/rtsp_pyqt) 客户端工具。\n\n```bash\n(venv) $ pip3 install -r requirements.txt\n(venv) $ python3 mainLogic.py\n```\n\n### 使用方法\n\n运行后可见下图，然后输入 IP （如：192.168.0.127）进行链接：\n\n![](./asserts/pyqt_rtsp_login.png)\n\n按下【setup】链接到目标设备自动获取摄像头流，支持播放、暂停等操作，拍照和录像自动保存到目录下的文件夹。\n\n## 多余的讯息\n\n> 如 IP 可以这样获取，我只是想炫耀一下我的拼装技术，逃~\n\n![](./asserts/rtsp_get_ip.jpg)"}, "/hardware/en/maixII/M2/tools/mobaxterm.html": {"title": "如何使用 mobaxterm ", "content": "---\ntitle: 如何使用 mobaxterm \nkeywords: Jupyter, MaixPy3, Python, Python3\ndesc: maixpy doc: 如何使用 mobaxterm \n---\n\n## mobaxterm 是什么？\n\n这是在 Windows 下使用的全能终端管理软件，对开发与运维人员必备，可以在 [mobaxterm.mobatek.net/download](https://mobaxterm.mobatek.net/download.html) 获取免费版本使用，在国内网站上有中文版。\n\n![](https://mobaxterm.mobatek.net/img/moba/features/feature-terminal.png)\n\n主要通过它提供的下列功能：\n\n- serial 通过串口连接 Linux 系统的终端\n- ssh 远程登录 Linux 系统的终端\n- ftp 远程访问文件服务上的资源\n\n## 连接 Serial\n\n开源硬件产品大多都会预留串口（Serial）用作 Linux 系统的终端交互接口，下面介绍串口【session】的创建。\n\n![](./asserts/mobaxterm-serial-4.png)\n\n在「session setting」 对话框里选择【serial】，再选好串口号及波特率，点击【OK】就完成连接了。\n\n![](./asserts/mobaxterm-serial-5.png)\n\n同样【session】会保存在左侧的【session】标签页里，方便下次连接。\n\n## 连接 SSH\n\n除了有线串口的方式，还可以通过无线访问 SSH 登录 Linux 系统，如一般的家用路由器。\n\n在 Linux 系统输入 ifconfig 查看自己 ip 地址（192.168.1.185），然后输入自己名称和密码，常见有 root / root 。\n\n> 如果没有设置密码，root 的连接密码是 root 。输入密码的时候是看不到的，在输入结束之后，按回车即可\n\n![](./asserts/mobaxterm_ssh.jpg)\n\n就可以看到 Linux 的登录会话终端了。\n\n![](./asserts/mobaxterm_ssh_view.jpg)\n\n> 以下连接方式只是合适在 MaixII-Dock 上使用的，需要使用 MaixPy3 IDE 版本 0.4.2以上的版本\n\nMaixII-Dock 可以通过 OTG 接口转发到 127.0.0.1 的 22 端口，但是每次使用之前，都需要通过运行 IDE 来进行配置，进行 ssh 端口转发服务的开启。\n\n具体的连接方式和上面的 ssh 方式一样，只需要将 ip 地址修改成 127.0.0.1 即可，默认用户名和密码都是 root。\n\n## 连接 FTP\n\n与 SSH 同理。\n\n![](./asserts/mobaxterm_ftp.png)\n\n进入后就可以看到文件夹了。\n\n![](./asserts/mobaxterm_ftp.jpg)\n\n可以拖拽文件上传和下载。\n\n![](./asserts/mobaxterm_ftp_ud.png)\n\n## 如何进行编程\n\n除了使用串口进行 Python 代码的复制粘贴运行，还可以通过在 FTP 文件管理获取下图的代码编辑器，编辑后保存就会自动同步上传（下图为 C 代码参考，其他代码同理）。\n\n![](https://mobaxterm.mobatek.net/img/moba/features/feature-mobatexteditor.png)\n\n这时候再拿到终端里运行 Python 脚本即可。\n\n```bash\npython xxxx.py\n```"}, "/hardware/en/maixII/M2/tools/adb.html": {"title": "adb 操作介绍", "content": "# adb 操作介绍\n\n\n\nADB.exe 在 MaixPy3 IDE 中的 maixpy3_examples 和 PhoenixSuit 文件夹下\n\n## 链接开发板\n将开发板上的 OTG 接口接上电脑， 然后再命令行中输入 adb shell，会自动进入到开发板的 linux 系统中\n\n```shell\nBusyBox v1.27.2 () built-in shell (ash)\n\n------run profile file-----\n   __  ___     _        __   _\n  /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n/_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\\n ----------------------------------------------\nroot@sipeed:/#\n```\n\n这时可以开始使用 MaixPy3 进行开发了"}, "/hardware/en/maixII/M2/introduce.html": {"title": "芯片平台介绍", "content": "---\ntitle: 芯片平台介绍\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: 芯片平台介绍\n---\n\nV831 芯片介绍\n\n从 2019 年至今的时间，可以开始看到几个相机 SoC 与一个内置的转专业或 SIMD 指令加快人脸检测、物体检测等等，从低分辨率 Kendryte K210 处理器 2.5 k Ingenic T31 MIPS 视频处理器，甚至 4k 能力 iCatch V37 相机 SoC 。 Allwinner 过去推出了几个摄像头处理器(V3， V316， S3…)，但没有一个包含 NPU (又名 AI 加速器)。现在这已经改变了，Allwinner V831 Cortex-A7 全高清摄像头 SoC 还包括一个小的 200 GOPS NPU 。\n\n> 取自 [allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board](https://www.cnx-software.com/2020/04/28/allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board/)\n\n## v831 Chip\n\n![V831_struct.png](./asserts/V831_struct.png)\n\n## 参数表\n\n| 项目            | 参数                                                                               | 备注                                  |\n| ------------- | -------------------------------------------------------------------------------- | ----------------------------------- |\n| CPU           | 最高 800Mhz                                                                        |                                     |\n| Video encoder | H.264, up to 1080p@30fps</br>H265, up to 1080p@30fps</br>JPEG, up to 1080p@30fps | ---                                 |\n| NPU           | 0.2T                                                                             | ---                                 |\n| EISE          | Up to 1080p@30fps                                                                | ---                                 |\n| SDRAM         | SIP 64MB DDR2                                                                    | SIP封装（System In a Package系统级封装）     |\n| SMHC          | SMHC x2 (SDC0, SDC1)                                                             | 主机控制器（SMHC）接口；物理层规范V2.0，SDIO卡规范V2.0 |\n| SPI           | SPI x2 (SPI0, SPI1)                                                              | ---                                 |\n| LCD           | Serial RGB, i8080                                                                | ---                                 |\n| DSPO          | BT656                                                                            | ---                                 |\n| I2S           | I2S x1 (I2S0)                                                                    | ---                                 |\n| Parallel CSI  | No support                                                                       | ---                                 |\n| Ethernet      | 10/100 Mbit/s Ethernet port with RMII                                            |                                     |\n| interface     | ---                                                                              |                                     |\n| TWI           | TWI x4 (TWI0, TWI1, TWI2, TWI3)                                                  | ---                                 |\n| RSB           | No support                                                                       | ---                                 |\n| GPADC         | 1-ch                                                                             | ---                                 |\n| Audio codec   | Output: LINEOUTP</br>Input: MICIN1P/N                                            | ---                                 |\n| MIPI CSI      | 2-lane, up to 1080p@60fps                                                        | ---                                 |\n| MIPI DSI      | No support                                                                       | ---                                 |\n| Package       | QFN88                                                                            | ---                                 |\n| ---           | ---                                                                              | ---                                 |\n\n[V833／V831 Datasheet V1.0.pdf](https://linux-sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf)\n\n## 产品技术支持\nM2dock开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务。"}, "/hardware/en/maixII/M2/other.html": {"title": "其他事项", "content": "---\ntitle: 其他事项\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: 其他事项\n---\n\n这个关于 V831 开发板的一些额外使用事项介绍，和使用方法\n\n## 切换屏幕\n\n目前开发板支持的屏幕有 1.3寸、2.4寸、2.8寸的 spi 屏和5寸的 RBG 屏幕，而且只是支持在我们淘宝上购买的显示屏，对于别的屏幕有需求的，可以走商务通道进行定制。\n\n### 准备\n\n- 需要切换的屏幕\n- 开发板\n- 编译好的设备树文件，可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)中进行下载\n\n### 切换设备树\n\n> update_dtb 程序是给 allwiner tina linux 专门写的小工具。\n\n将设备树文件放到开发板中的任意位置，在设备树文件所在的位置运行\n\n    update_dtb /dev/mmcblk0 sipeed_320240_sp2305.dtb\n\n即可切换设备树，该设备树文件是通过内核编译出来的，不推荐个人用户自行编译\n\n| 文件名字 | 可用屏幕 | 可用摄像头 |\n| :----: | :----: | :---: |\n| sipeed_320240_sp2305.dtb | 2.4寸和2.8寸 | sp2305 |\n| sipeed_240240_sp2305.dtb | 1.3寸 |sp2305 |\n| sipeed_240240_vs3205.dtb | 1.3寸 |vs3205 |\n| sipeed_320240_vs3205.dtb | 2.4寸和2.8寸 |vs3205 |\n\n### 屏幕连接\n\n开发板连接1.3寸屏幕是可以直接连接，但是如果想要连接2.4寸和2.8寸屏幕，是需要使用转接板的\n\n转接板上的接口一个 1 的标识符，这个标识符是用来辨别屏幕的接线的正反，屏幕排线上的 1 要和转接板、开发板的上 1 ，位置对应，都要在同一边\n\n![](./asserts/other/1.3.png)\n\n![](./asserts/other/2.4.jpg)\n\n![](./asserts/other/change.jpg)\n\n![](./asserts/other/V831.jpg)\n\n## 更换摄像头\n\n目前 MaixII-Dock 开发板目前支持的摄像头有 sp2305 和 vs3205 （只支持官方店上再售卖的这两款摄像头，有别的摄像头需求可以进行商务定制），摄像头之间的切换同样时需要更换设备树文件，更换方式上面的更换屏幕一样的。\n\n> 注意的是要摄像头的接法，不要把摄像头给接反了，摄像头的底板上有一个白点，开发板卡上也有一个白点，这两个白点要在同一边。如果接反了，摄像头烧毁了请自行再买一个吧\n\n### 准备\n\n- 需要切换的摄像头模块\n- 开发板\n- 编译好的设备树文件，可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)中进行下载\n\n### 切换设备树\n\n> update_dtb 程序是给 allwiner tina linux 专门写的小工具。\n\n将设备树文件放到开发板中的任意位置，在设备树文件所在的位置运行\n\n    update_dtb /dev/mmcblk0 sipeed_320240_sp2305.dtb\n\n即可切换设备树，该设备树文件是通过内核编译出来的，不推荐个人用户自行编译\n\n| 文件名字 | 可用屏幕 | 可用摄像头 |\n| :----: | :----: | :---: |\n| sipeed_320240_sp2305.dtb | 2.4寸和2.8寸 | sp2305 |\n| sipeed_240240_sp2305.dtb | 1.3寸 |sp2305 |\n| sipeed_240240_vs3205.dtb | 1.3寸 |vs3205 |\n| sipeed_320240_vs3205.dtb | 2.4寸和2.8寸 |vs3205 |"}, "/hardware/en/maixII/M2A/buildsystem.html": {"title": "配置系统", "content": "# 配置系统\n\n## Tina系统配置\n\nLichee MaixSense 的 Tina 系统配置和 M2dock 基本相同，这里不另作赘述。\n\n## armbian系统配置\n\nR329 可以通过 otg 外接 HID 设备直接在屏幕上启动控制台进行操作，也可以通过常用的串口启动控制台。为了方便演示，这里以控制台为例；\n\n通过 typec 数据线连接 Lichee MaixSense 和电脑，使用 Xshell 新建会话框，选中新弹出 COM，波特率设置115200，连接。\n\n\n初始化结束后，需要输入登录密码，密码复杂度要求较高，请多次尝试\n\n> 目前公开带有 MaixPy3 名称 armbian 镜像输入 root 即可登录，不需要进行密码设置！\n\n```bash\nNew to Armbian? Documentation: https://docs.armbian.com Support: https://forum.armbian.com\n\nNew root password: **********\nRepeat password: **********\n```\n\n然后设置默认 shell,一般选择 bash\n\n```bash\nChoose default system command shell:\n\n1) bash\n2) zsh\n\nShell: BASH\n```\n\n然后可以设置一个非 root 用户日常操作用\n\n```bash\nCreating a new user account. Press <Ctrl-C> to abort\n\nPlease provide a username (eg. your forename): ll\nCreate password: *********\nRepeat password: *********\n```\n\n![2021080511-46-52](./assets/2021080511-46-52.gif)"}, "/hardware/en/maixII/M2A/maixsense.html": {"title": "MaixSense 简介", "content": "# MaixSense 简介\n\n这个系列和之前的 Maix-i 系列不同，它不仅仅是一个带 AI 加速的 MCU ，还是可以运行 Linux 系统的开发板。\n\n\n## M2A 板卡\n\nM2A 板卡以全志 R329 为核心，集成电源芯片、FEL烧录按键、\n\n![M2A](./assets/M2A.jpg)\n\n### R329 芯片\n全志 R329 双核 Cortex-A53 处理器的 64 位，配备双 HIFI4 DSP 用于音频后处理和预处理，以及 Arm 中国的 AIPU（人工智能处理单元）以极低的功耗提供高达 0.256 TOPS。可以对神经网络进行硬件加速，驱动 720p 的摄像头。\n\n![R329框架](./assets/R329_1.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | Dual-core ARM Cortex™-A53@1.5GHz<br>32KB L1 I-cache + 32KB L1 D-cache per core<br>256KB L2 cache |\n| DSP | Dual-core HiFi4@400MHz<br> 32KB L1 I-cache + 32KB L1 D-cache per core<br> 2MB SRAM |\n| NPU | 搭载周易™Z1 AIPU，最大支持0.25TOPS@600MHz |\n| 内存<br>Memory |内置 DDR3 256MB<br> 支持 SPI Nand/Nor/eMMC |\n| Audio | Supports 5 audio ADC and 2 audio DAC<br>Supports 5 analog audio inputs and 2 analog audio output<br>Up to 3 I2S/PCM controllers for Bluetooth and external audio codec<br>Integrated digital microphone, supports maximum 8 digital microphones |\n| Enthernet | 10/100/1000 Mbps |\n| USB | OTG \\* 1<br>Host \\* 1|\n| SDIO | SDIO 3.0 * 2 |\n| I2S | I2S*3(I2S0, I2S1, S-I2S0) |\n| SPI | SPI*2(SPI0, SPI1) |\n| TWI | TWI*3(TWI0, TWI1, S-TWI0) |\n| GPADC | 4-ch |\n| SCR | SCR*1 |\n| PWM | PWM*15(PWM[8:0], S-PWM[5:0]) |\n\n\n\n\n## MaixSense开发板介绍\n\nMaixSense 开发板可能是市面上最小的 Linux 卡片电脑, 本套件包含一个搭载全志 R329 的高度集成 SOM 核心板，以及一个多功能 IO 扩展底板，可以运行 Linux 系统, 并具备出色的扩展功能。您可以将它用于搭建个人服务器、开发智能语音助手、设计机器人等场景。它通过内置的周易 AIPU 处理器同时支持智能语音和视频图像处理，开发者可以直接在开发板上跑通相关 CV , NLP 等 AI 模型。\n\n**Tina Linux**：全志科技基于 Linux 内核开发的针对智能硬件类产品的嵌入式软件系统。Tina Linux基于 openwrt-14.07 版本的软件开发包,包含了Linux系统开发用到的内核源码、驱动、工具、系统中间件与应用程序包。\n\n但是 MaixSense 不只是可以运行 Tina ，还可以运行**armbian**，这是一个真正**完整**的 linux 系统，armbian 是基于 debian/ubuntu 进行开发的。\n\n|   名称   |               armbian               |               Tina               |\n| ------ | --------------------------------- | ------------------------------ |\n|   简介   | 专门用于`ARM`开发板的`Debian` |    全志深度修改OpenWRT1404的系统     |\n|   特点   |        主线化Linux，功能丰富        |        厂商深度修改，软硬件契合度高        |\n| 适用人群 |       极客，嵌入式入门玩家等        | 深度开发，需要自行定制等开发人员 |\n\n<div align=\"center\">\n<img src=\"./assets/M2S_1.png\" width=\"270\">\n</div>\n\n\n\n## MaixSense外观预览\n<div align=\"center\">\n<br><img src=\"./assets/M2A-1.gif\">\n</div>\n\n\n## MaixSense基本参数\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">MaixSense基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>处理器<br>CPU</td>\n        <td>双核 ARM CortexTM-A53, ARM v8 架构,z</td>\n    </tr>\n    <tr>\n        <td>AIPU(NPU)</td>\n        <td>搭载周易TZ1AIPU，最大支持0.25TOPS@600MHz</td>\n    </tr>\n    <tr>\n        <td>DRAM</td>\n        <td>SIP 256MB DDR3</td>\n    </tr>\n    <tr>\n        <td>存储</td>\n        <td>可使用核心板搭载的 SPINAND (默认空贴)存储<br>可使用底板搭载的SD卡座</td>\n    </tr>\n    <tr>\n        <td>video Encoder<br>视频编码器</td>\n        <td>H264/5 &JPEG,最大720p@30fps</td>\n    </tr>\n    <tr>\n        <td>摄像头</td>\n        <td>出厂默认OV9732，最高支持720P@30fps HD<br>采用USB-C连接器,支持正反插(可分别用作前后摄)</td>\n    </tr>\n    <tr>\n        <td>麦克风</td>\n        <td>两个模拟MEMS麦克风，平均灵敏度91dB SPL@1kHz</td>\n    </tr>\n    <tr>\n        <td>屏幕</td>\n        <td>1.5寸SPI总线屏幕,屏幕接口采用0.5mm 12P FPC，分辨率240*240</td>\n    </tr>\n    <tr>\n        <td>按键</td>\n        <td>1个复位按键和4个用户按键(ADC按键)，1个下载按键(FEL)</td>\n    </tr>\n    <tr>\n        <td>IO引出</td>\n        <td>3*10P 2.54mm 引出4个电源引脚(5V/GND)11个GPIO引脚<br>1个4PMX1.25插座(引出2*GPIO和5V/GND)s</td>\n    </tr>\n    <tr>\n        <td>以太网接口</td>\n        <td>在核心板以24P 0.5mm间距FPC的形式引出，用于连接相应PHY</td>\n    </tr>\n    </tbody>\n</table>\n\n![R329-pin](./assets/R329-pin.png)\n\n## 资料\n[MaixSense 资料库](https://dl.sipeed.com/shareURL/MaixII/MaixII-A)\n\n## 产品技术支持\nM2A 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务。"}, "/hardware/en/maixII/M2A/R329.html": {"title": "芯片介绍", "content": "# 芯片介绍\n\n## R329\n全志 R329 双核 Cortex-A53 处理器的 64 位，配备双 HIFI4 DSP 用于音频后处理和预处理，以及 Arm 中国的 AIPU（人工智能处理单元）以极低的功耗提供高达 0.256 TOPS。可以对神经网络进行硬件加速，驱动 720p 的摄像头。\n\n![R329框架](./assets/R329_1.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | Dual-core ARM Cortex™-A53@1.5GHz<br>32KB L1 I-cache + 32KB L1 D-cache per core<br>256KB L2 cache |\n| DSP | Dual-core HiFi4@400MHz<br> 32KB L1 I-cache + 32KB L1 D-cache per core<br> 2MB SRAM |\n| NPU | 搭载周易™Z1 AIPU，最大支持0.25TOPS@600MHz |\n| 内存<br>Memory |内置 DDR3 128MB<br> 支持 SPI Nand/Nor/eMMC |\n| Audio | Supports 5 audio ADC and 2 audio DAC<br>Supports 5 analog audio inputs and 2 analog audio output<br>Up to 3 I2S/PCM controllers for Bluetooth and external audio codec<br>Integrated digital microphone, supports maximum 8 digital microphones |\n| Enthernet | 10/100/1000 Mbps |\n| USB | OTG \\* 1<br>Host \\* 1|\n| SDIO | SDIO 3.0 * 2 |\n| I2S | I2S*3(I2S0, I2S1, S-I2S0) |\n| SPI | SPI*2(SPI0, SPI1) |\n| TWI | TWI*3(TWI0, TWI1, S-TWI0) |\n| GPADC | 4-ch |\n| SCR | SCR*1 |\n| PWM | PWM*15(PWM[8:0], S-PWM[5:0])"}, "/hardware/en/maixII/M2A/start.html": {"title": "系统烧录", "content": "# 系统烧录\n\n\n## 系统简介\n\nLichee MaixSense（以下简称R329）提供了以下两种系统镜像\n\n|   名称   |               armbian               |               Tina               |\n| :------: | :---------------------------------: | :------------------------------: |\n|   简介   | 专门用于`ARM`开发板的轻量级`Debian` |    全志魔改OpenWRT1404的系统     |\n|   特点   |        主线化Linux，功能丰富        |        厂商魔改，比较精简        |\n| 适用人群 |       极客，嵌入式入门玩家等        | 深度开发，需要自行定制等开发人员 |\n\n> ！！！一定要严格按照步骤操作！！！armbian系统请使用大于 4G 的 TF/SD 卡进行烧录，tina系统请使用大于 1G 的 TF/SD 卡进行烧录\n\nR329 为全志的 SOC，所以 Windows 使用 PhoenixCard，Linux 上使用 Livesuit 烧录镜像文件。\n\n## Tina 系统烧录\n\nTina 系统需要自己进行编译，具体编译方式参考<https://github.com/sipeed/R329-Tina-jishu>\n\nTina 系统的烧录方式和 MaixII dock通用，可参考[MaixII M2dock 烧录系统 - Sipeed Wiki](https://wiki.sipeed.com/soft/maixpy3/zh/install/maixii_m2dock/flash.html#windows-phoenixcard)，这里不多做介绍\n\n## armbian 系统烧录\n\narmbian 镜像获取：\n\n> 链接：<https://pan.baidu.com/s/1CcjZdjPb3RtVjdQkQ0CfAg> 提取码：2333 \n\n\narmbian 使用的烧录方式为 dd，windows下推荐使用 Etcher，linux 下推荐使用 Terminal。\n\n### windows 下系统烧录\n\n资源获取：\n\n下载[Etcher](https://www.balena.io/etcher/ \"Etcher\")\n\n下载[SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip \"SDCardFormatter\")\n\n首先解压镜像，得到 .img 镜像文件，然后使用 SD Card Formatter 格式化sd卡，打开Etcher，点击 `Flash from file` ,选中dd镜像包，然后点击 `Select target` 选中sd卡，最后点击 `Flash` 烧录。 \n\n![95133](./assets/95133.gif)\n\n### linux下系统烧录\n\n首先解压镜像，得到 .img 镜像文件，然后格式化 sd 卡，打开 Terminal ，输入  `sudo dd if = xxx.img of=/dev/sdx bs=1M status=progress oflag=direct`烧录。注意xxx.img为文件名，  `/dev/sdx`为sd卡实挂载位置。\n\n![2021-08-05-11-44-49](./assets/2021-08-05-11-44-49.gif)\n\n同时也可以直接使用 Disks 进行更便捷的烧录（需要Ubuntu桌面版)：\n\n![2021080511-46-53](./assets/2021080511-46-53.gif)\n\n烧录完毕后，即可放入Lichee MaixSense中运行。\n\n\n\n# 访问串口\n\n> 请将 USB口插入到 USB UART 口(下面的口）从而获得串口。\n\n## Linux & macOS\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n`Lichee MaixSense` 使用了 `CH340` 作为驱动芯片。`Windows` 用户需要安装 `CH340` 的驱动。\n\nWindows 下载 [ch340 ch341 driver](https://api.dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver) 安装即可，然后可以在 `设备管理器` 中看到串口设备"}, "/hardware/en/maixII/M2A/first.html": {"title": "上手使用", "content": "# 上手使用\n\n## 测试屏幕\n\n硬件正常的话，开机屏幕会自动输出内核信息，也可以使用`echo \"hello sipeed\">/dev/tty0`重定向信息到屏幕上。\n\n<img src=\"./assets/image-20210805150728052.png\" alt=\"image-20210805150728052\" style=\"zoom:50%;\" />\n\n## 测试摄像头\n\narmbian 内置了 ffmpeg ，可以快速捕捉 sensor 数据并输出到屏幕上\n\n使用如下命令快速捕捉 sensor 并输出到屏幕上\n\n    ffmpeg -i /dev/video0 -vframes 1  -s 240*240 -pix_fmt rgb565le  -vf transpose=2,transpose=2 -f fbdev /dev/fb0\n\n\n![image-20210805165654537](./assets/image-20210805165654537.png)\n\n## 测试网络\n\n使用 nmtui 指令可以进入可视化的配网界面，\n选择 Activate a connection ， 选择对应的 SSID ，输入连接密码，确认即可。\n\n![202108051626](./assets/202108051626.gif)\n\n\n\n设置完毕后使用 ifconfig 查看本机操作，然后就可以使用 ssh 等操作了。\n\n![image-20210805162936212](./assets/image-20210805162936212.png)\n\n也可以使用apt下载各种应用\n\n```bash\nsudo apt install neofetch\n```\n\n![image-20210805165620823](./assets/image-20210805165620823.png)\n\n如果遇到终端显示错位，还需要`sudo apt-get install xterm`安装下xterm，然后`resize`即可。\n\n![202108061015](./assets/202108061015.gif)\n\n## 测试AIPU\n\n获取1000类物体分类模型\n\n下载站链接[zhouyi_test.tar.xz](https://dl.sipeed.com/shareURL/MaixII/MaixII-A/example),使用任意方式上传到板子中\n\n```bash\n##解压压缩包\ntar -xvf zhouyi_test.tar.xz\n##授予执行权限\ncd zhouyi_test\nchmod 777 run.sh\n##执行1000类物体分类\n./run.sh\n##后台执行1000类物体分类\n./run.sh < /dev/null > /dev/null 2> 1 \n```"}, "/hardware/en/maixII/M2A/user.html": {"title": "Armbian 配置及使用", "content": "# Armbian 配置及使用\n\n## 配置网络\n\n`nmtui`\n\n![202108051626](./assets/202108051626.gif)\n\n\n\n## 配置SSH连接\n\n系统已默认开启了ssh和ftp，需要在串口使用 `passwd root` 进行账号密码设置，才能使用 root 账号进行 SSH 连接。\n\n## MaixPy3 IDE 连接\nMaixPy3 IDE 连接 MaixSense 只能使用远程连接，不能使用有线连接，而且每个人的网络环境都存在差异，可能存在连接不上的情况出现。\n\n### 准备\n\n- 烧录好带有 MaixPy3 的 Armbian 系统\n- 连接网络进行 MaixPy3更新，确保 MaixPy3 的版本大于 0.3.4。\n- 运行 `ifconfig` 获取开发板的 IP 地址\n\n### 连接\n\n在板子上运行 `python -c \"import maix.mjpg;maix.mjpg.start()\"` 启动板子上的远程 RPyc 服务\n\n在 IDE 中新建代码区，运行下面的连接代码\n\n```python \n$connect(\"192.168.43.44\") # 此处填入开发板的 IP 地址\nimport platform\nprint(platform.uname())\n```\n\n运行输出结果如下：\n![MaixPy3 IDE](./assets/MaixPy3-IDE.jpg)\n\n\n## 配置APT源\n\n打开`armbian-config`，选中Personal，选择Mirrors，找到合适的apt源，按住TAB键切换到ok，保存即可。\t\t\n\n![202108061955](./assets/202108061955.gif)\n\n## 设置时区\n\n打开`armbian-config`，选中Personal，选择Timezone > Asia >Shanghai设置上海时间（不用找，Debian没有北京时间），按住TAB键切换到ok，保存即可。\t\t\n\n![202108062005](./assets/202108062005.gif)\n\n## 设置中文显示\n\n打开`armbian-config`，选中Personal >Locales>下滑到最下面，空格选中zh.GBK和zh.UTF-8,，然后勾选zh_CN.UTF8设置为系统默认语言，按住TAB键切换到ok，保存，exit退出，下载中文字体，`apt-get install fonts-wqy-zenhei`，重启后系统环境就变成中文的了。\n\n![202108062054](./assets/202108062054.gif)\n\n## 配置蓝牙\n\n打开`armbian-config`，选中Network，选择BTinstall安装蓝牙支持包。\n\n![202108071034](./assets/202108071034.gif)\n\n可以使用Xftp传输，安装完毕后断电重启即可。\n\n然后就可以使用Bluetoothctl配置蓝牙。\n\n常用命令：\n\n```bash\ndevices             \t\t列出活动的蓝牙设备\npaired-devices      \t\t列出已配对蓝牙设备\npairable <on/off>   \t\t是否允许配对\ndiscoverable <on/off>       是否允许被发现\ndiscoverable-timeout [value]设置暴露时间\npair [dev]                  配对设备\ntrust [dev]                 信任设备\nuntrust [dev]               取消设备信任\nremove <dev>                移除设备\nconnect <dev>               连接设备\ndisconnect [dev]            断开设备连接                      \nquit                        退出\nhelp          \t\t\t\t查看帮助\n```\n\n### 连接蓝牙设备\n\n使用`bluetoothctl`连接蓝牙设备。\n\n```bash\nscan on #扫描设备\nscan off #停止扫描\ntrust XX:XX:XX:XX # 信任设备\npair XX:XX:XX:XX #配对设备\nconnect XX:XX:XX:XX #连接设备\n```\n\n\n\n![202108071610](./assets/202108071610.gif)\n\n### 设置蓝牙音频输入/输出\n\n启用蓝牙音频前，需要先安装`pulseaudio`即及蓝牙组件\n\n```bash\napt install pulseaudio\napt install pulseaudio-module-bluetooth\n```\n\n然后使用pactl查看是否有蓝牙输出设备\n\n```bash\npactl list short sinks\n```\n\n切换音频输出到蓝牙\n\n```bash\npactl set-default-sink <dev>\n```\n\nlog如下：\n\n```bash\nmaixsense:~:# apt install pulseaudio\nmaixsense:~:# apt install pulseaudio-module-bluetooth\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tSUSPENDED\nmaixsense:~:# pactl set-default-sink 2 \n```\n\n![202108071726](./assets/202108071726.gif)\n\n然后就可以播放音频到蓝牙设备，或者通过蓝牙连接手机当作蓝牙音箱使用。\n\n## 配置音量\n\n`alsamixer`\n\n![202108071440](./assets/202108071440.gif)\n\n常用命令\n\n```\n------------------- Help-----------------------\nxxEsc     离开                                ▒x\nxxF1 ? H  帮助                                ▒x\nxxF2 /    系统信息                            ▒x\nxxF3      回放控制                            ▒x\nxxF4      捕获控制                            ▒x\nxxF5      所有控制                            ▒x\nxxTab     切换显示模式                        ▒x\nxxF6 S    选择声卡                            ▒x\nxxL       刷新屏幕                            ▒x\nxxLeft    移动到上一个的控制                    ▒x\nxxRight   移动到下一个的控制                    ▒x\nxxUp/Down    改变音量                         ▒x\nxx+ -        改变音量                         ▒x\nxxPage Up/Dn 大幅改变音量                      ▒x\nxxEnd        设置音量为0                       ▒x\nxx0-9        从0到9依次设置音量                 ▒x\nxxQ W E      增加 左/全部/右声道音量            ▒x\nxxZ X C      减少 左/全部/右声道音量            ▒x\nxxB          左右声道平衡                      ▒x\nxxM          切换静音                         ▒x\nx< >         切换左/右静音                     ▒x\nxxSpace      切换捕获                         ▒x\nxx; '        切换左/右捕获                     ▒x\n-----------------------------------------------\n```\n\n如果需要控制蓝牙设备音量，需要使用`pactl` ，并且`pcatl`也支持控制声卡，所以推荐使用此app控制音量。\n\n```bash\n##查看输入/输出设备索引\npactl list short sources/sinks\n##设置输入/输出音量\npactl set-source/sink-volume index volume\npactl set-default-source/sink\n##设置默认输入/输出\n```\n\n示例，设置蓝牙耳机为输出设备，音量为10%,然后增加20%，最后减少30%\n\n```bash\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tRUNNING\n##蓝牙设备一般为bluez_sink\nmaixsense:~:# pactl set-default-sink 2\nmaixsense:~:# pactl set-sink-volume 2 10%  \nmaixsense:~:# pactl set-sink-volume 2 +8192  \nmaixsense:~:# pactl set-sink-volume 2 -0x3000\n##可选 百分比，十进制数，十六进制数控制，效果相同，并且可以超过100%\n```\n\n## 媒体播放\n\n媒体播放常用mplayer\n\napt下载mplayer`apt install mplayer`\n\n然后执行`mplayer badapple_240p.mp4 -vo fbdev2`播放视频\n\n或者`mplayer G.E.M.邓紫棋\\ -\\ 光年之外.flac`播放音频\n\n在后面加上`< /dev/null > /dev/null 2>1 &`以便在后台播放\n\n![202108091128](./assets/202108091128.gif)\n\n\n\n## 编写c代码\n\n```c\nvim helloworld.c\ni\n#include <stdio.h>\nint main()\n{\n            printf(\"Hello, world\\n\");\n            return 0;\n}\nesc\n:wq\ngcc hello.c -o hello.o\n./hello.o\n```\n\n![202108091201](./assets/202108091201.gif)\n\n## 编写python代码\n\n```bash\nvim helloworld.py\ni\nprint(\"hello world!\\n\")\nesc\n:wq\npython3 helloworld.py\n```\n\n![202108091339](./assets/202108091339.gif)\n\n## 运行神经网络实例\n\n获取1000类物体分类模型\n\n下载站链接[zhouyi_test.tar.xz](https://dl.sipeed.com/shareURL/MaixII/MaixII-A/example),使用任意方式上传到板子中\n\n```bash\n##解压压缩包\ntar -xvf zhouyi_test.tar.xz\n##授予执行权限\ncd zhouyi_test\nchmod 777 run.sh\n##执行1000类物体分类\n./run.sh\n##后台执行1000类物体分类\n./run.sh < /dev/null > /dev/null 2> 1 \n```\n\n## 使用python点亮第一个灯\n\n安装GPIO的python支持库\n\n```bash\npip install gpiod\n```\n\n把led正极插入PH5,负极插入GND\n\n编写代码\n\n``` bash\nvim led.py\n```\n\n复制代码进去\n\n```python\nimport time\nimport gpiod as gpio\nPH_BASE = (8-1)*32 # \"PH\"\ngpiochip1 = gpio.chip(\"gpiochip1\")\nled = gpiochip1.get_line((PH_BASE + 5)) # \"PH5\"\nconfig = gpio.line_request()\nconfig.request_type = gpio.line_request.DIRECTION_OUTPUT\nled.request(config)\n\nwhile led:\n    led.set_value(0)\n    time.sleep(1)\n    print(\"led on\")\n    led.set_value(1)\n    time.sleep(1)\n    print(\"led off\")\n```\n\n执行代码\n\n ```bash\n python3 led.py\n ```\n\n效果如下：\n\n![202108091956](./assets/202108091956.gif)\n\n## 设置开机启动\n\n启用开机自启动脚本\n\n```bash\nvim /lib/systemd/system/rc-local.service\n```\n\n在最后面添加\n\n```bash\n[Install]\nWantedBy=multi-user.target\nAlias=rc.local.service\n```\n\n编辑自启动脚本\n\n ```bash\n vim /etc/rc.local\n ```\n\n在`exit 0`前面添加需要启动的服务\n\n```bash\nmplayer /root/badapple_240p.mp4 -vo fbdev2  < /dev/null > /dev/null 2>1 &\npython3 /root/helloworld.py\n```\n\n然后重启即可\n\n注意，此脚本会在用户登录前执行，执行日志如下\n\n```bash\n[  OK  ] Finished Permit User Sessions.\n[   38.569457] rc.local[1322]: hello world!\n```\n\n## 更多的使用方法\n请到[MaixPy3](/soft/maixpy3/zh/index.html)和[极术社区](https://aijishu.com/a/1060000000221780)中自行查看"}, "/hardware/en/tang/Tang-primer/Tang-primer.html": {"title": "Tang Primer", "content": "# Tang Primer\n\n## 介绍\nLichee Tang Primer是基于安路科技的EG4S20BG256 FPGA芯片设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Micro-USB、USB-JTAG、TF卡槽、DVP摄像头接口、RGB(可接LCD屏、VGA等外设)等，并把部分IO资源引出，非常方便开发者拓展使用，开放RISC-V IP内核。\n\n![Tang_permier](./../../../assets/Tang/permier/Tang_permier.jpg)\n\n![Tang_permier_1](./../../../assets/Tang/permier/Tang_permier_1.png)\n\n## 管脚定义\n\n![Tang_permier_2](./../../../assets/Tang/permier/Tang_permier_2.png)\n\n![Tang_permier_3](./../../../assets/Tang/permier/Tang_permier_3.png)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | ---- |\n| FPGA芯片 | EG4S20BG256 | \n| 逻辑单元数量 | 23520 |\n| 寄存器数量(FF) | 19600 |\n| Total Configuration SRAM (bits) | 4,988,928 |\n| EM SDR SDRAM | 2M X 32bits |\n| 锁相环PLL | 1 |\n| I/O Bank总数 | 1 |\n| 最多用户I/O数 | 193 |\n| 核电压 | 1.2V |\n| 板载FPC40P座 | 可接RGB LCD、VGA转接口、高速DAC等模块 |\n| 板载FPC20P座 | 可接DVP摄像头、高速ADC模块 |\n| 引出IO | 标准2.54mm和半邮票孔接口，引出芯片大部分IO资源 |\n| 板载IIC电阻触摸芯片屏控制器 | --- |\n\n## 产品技术支持\n\nTang Permier开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务support@sipeed.com。\n\n## 资料\n[烧录相关使用](/soft/Tang/zh/index_bak.html)\n[资料下载](https://dl.sipeed.com/shareURL/TANG/Primer)"}, "/hardware/en/tang/Tang-Nano-9K/Tang-nano-9k.html": {"title": "Tang Nano 9k examples", "content": "---\ntitle: Tang Nano 9k examples\n---\n\nBefore reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE\n\n- [Blink](./examples/led/led.html)\n- [LCD screen](./examples/rgb_screen/rgb_screen.html)\n- [Run examples of PicoRV](./examples/picorv/picorv.html)\n- litex running on 9K(Preparing, please wait)\n- FPGA drives SPI screen(Preparing, please wait)\n- PicoRV running on 9K(Preparing, please wait)\n- HDMI display(Preparing, please wait)\n- Drive screen by mipi interface(Preparing, please wait)\n- others(Any ideas could be come up, and will be accepted if feasible)"}, "/hardware/en/tang/Tang-Nano-9K/examples/rgb_screen/rgb_screen.html": {"title": "Drive RGB screen", "content": "---\ntitle: Drive RGB screen\n---\n\n> Edit on 2022.04.12\n\n## Introduce timing \n\nRGB LCD display protocol is similar to VGA protocol, both have horizon  synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal.\n\nHere we introduce VGA timing.\n\n![](./../../../../../zh/tang/assets/examples/lcd_pjt_1.png)\n\nThere shows horizon synchronization timing and vertical synchronization timing in the picture above.\n\nFrom the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. \n\nEach horizon of data contains back porch, visible data **(this is normally  thought as active data)** and front porch.\n\nThe visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga-timing\n\nThe timing of screen which we provided is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet_RGB.pdf)\n\nThe following picture shows the screenshot about this LCD timing.\n\n![](./../../../../../zh/tang/assets/examples/lcd_pjt_2.png)\n\n![](./../../../../../zh/tang/assets/examples/lcd_pjt_3.png)\n\nThe first picture form shows parameters of the screen and the the following picture is its timing. \n\nFrom its timing picture, we can know we don't need to set front porch time and back proch time, we just need to set blanking time. \n\n## Create project \n\nPlease refer to this [article](./../led/led.html) to see how to create project.\n\n## Generate screen clock\n\n- Here we use gowin official IP\n\nThe crystal oscillator onboard is 27MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. \n\nHere we use  `IP Core Generate` which can be find in Tools -> IP Core Generate\n\n![](./../../../../../zh/tang/Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\nDouble click `rPLL` and select Verilog in the pop-up window language, set CLKIN 27MHz, CLKOUT is 33.00MHz. Also config the tolerance.\n\n![](./../../../../../zh/tang/Tang-Nano-1K/assets/lcd_rpll.png)\n\nAfter click OK it asks whether add it to current project, here we choose yes.\n\n![](./../../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/led/assets/add_ip_file_in_project.png)\n\nThen a tmp file will appear, we can use it to generate the ip, like what is shown below. \n\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/ip_examples.png)\n\n## Screen driver\n\n- **To start this we should create a verilog file first**\n\n### Port definition\n\nFirst define ports which are needed to drive screen\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\nWe use RGB565 driver mode.\n\n### Timing constants\n\nThen we define the constants according to the timing form picture\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\nFirst we define front porch, back porch and valid pixel data.\n\nAs for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok.\n\n### Define variables\n\n- Define some variables helps us to meet timing requirment\n  \n```verilog \n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### Synchronization signals\n\nThis code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity \n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//Here note the negative polarity of HSYNC and VSYNC\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### Enable signal\n\n- This code decides whether display image. \n\nThis driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display.\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //It will shake if there not minus one\n```\n\n### Test color bars\n\n- This code generate color bars to test LCD\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n**Do not forget to add endmodule in the end of the driver file**\n\nUp to now we have finished the driver module.\n\n## Instantiated in the top\n\n- **New a verilog file**\n- Just copy the content below and save it is ok\n\n```verilog\nmodule TOP //Name TOP module\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // list ports\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //instantiate pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS),  //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //instantiate vga driver\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## Synthesize, constrain, Place&Route\n\n### Synthesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Here we only constraint pins\n\nThe corresponding pins and ports are as follows form shows\n\nThe way to constain pins can refer to the [Light led](./../led/led.html), it contains a way to constain pins.\n\nIf you feel troublesome about the method above,  you can copy the content in this [page](./../../../../../zh/tang/Tang-Nano-9K/Nano_9K_examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). \n\n| PORT        | I/O    | PIN | PORT         | I/O    | PIN |\n| ----------- | ------ | --- | ------------ | ------ | --- |\n| LCD_B[4]    | output | 41  | LCD_B[3]     | output | 42  |\n| LCD_B[2]    | output | 51  | LCD_B[1]     | output | 53  |\n| LCD_B[0]    | output | 54  | LCD_G[5]     | output | 55  |\n| LCD_G[4]    | output | 56  | LCD_G[3]     | output | 57  |\n| LCD_G[2]    | output | 68  | LCD_G[1]     | output | 69  |\n| LCD_G[0]    | output | 70  | LCD_R[4]     | output | 71  |\n| LCD_R[3]    | output | 72  | LCD_R[2]     | output | 73  |\n| LCD_R[1]    | output | 74  | LCD_R[0]     | output | 75  |\n| LCD_DEN     | output | 33  | LCD_SYNC     | output | 34  |\n| LCD_HYNC    | output | 40  | LCD_CLK      | output | 35  |\n| XTAL_IN     | input  | 52  | nRST         | input  | 4   |\n\n### Place&Route\n\nAfter constraining, we need to open IO mux to complete Place&Route.\n\nTick Project -> Configuration -> Place&Route -> Dual-Purpose Pin which is in the Menu Bar.\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/enable_io_mux.png)\n\nThen we can run Place&Route.\n\n## Program\n\nFinishing Place&Route, we can download the generated .fs file to the development board to see color bar.\n\n## End\n\nNow the tutorial ends, if you have any suggestions, just leave a message.\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Back to the previous page</a>\n</p>"}, "/hardware/en/tang/Tang-Nano-9K/examples/led/led.html": {"title": "Light LED", "content": "---\ntitle: Light LED\n---\n\n> Edit on 2022.04.11\n\nFrom this essay we can learn the basic usage of Gowin IDE\n\n## Create Project\n\nCreate Project：File-->NEW-->FPGA Dsign Project-->OK\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-1.png)\n\nSet project name and project path (File name and project path shoule be English)\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-2.png)\n\nChoose correct device: \n![Tang_nano_9k_device_choose](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/Tang_nano_9k_Device_choose.png)\n\n## Prepare codes\n\nAfter creating project, we can start editing codes. \nTo creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N.\nThen choose Verilog File in the pop-up window.\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-5.png)\n\nName for file (Suggested using English)\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-6.png)\n\nDouble click the created file, then edit in right window\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-7.png)\n\n- We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself.  \n\n~~~v\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [5:0] led    // 6 LEDS pin\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 6'b111110;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led[5:0] <= {led[4:0],led[5]};\n    else\n        led <= led;\nend\n\nendmodule\n~~~\n\nAfter finishing edit the file, it's necessary to tick the `Use DONE as regular IO` in Project->Configuration->Place&Route->Dual-Purpose Pin to avoid error.\n![img_configuration](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/LED_Configuration.png)\n\n## Systhesize, constrain, place&route\n\n### Systhesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Clock constraint is not involved here\n\nTo realize function of the code on FPGA, we must bind the ports we define with the chip pins.\n\nDouble click the FloorPlanner in the Process interface to set pin constrain(This can be continued if failing systhesize). \n\n![](./../../../../../zh/tang/assets/examples/led_pjt_2.png)\n\nFirst time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. \n![](./../../../../../zh/tang/Tang-Nano/assets/LED-9.png)\n\nThe leds schematic of nano 9k is as shown below:\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/LED_Pins.png \"nano 9k led pins\")\n\nIn this GUI interface we have two ways to constrain pins:\n- Drag the corresponding port to the pin of chip\n- Type the pin number corresponding to the port in IO constraint(This is shown as below)\n\nSo we can do the ordered operations in the opened window as what the following picture shows:\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/LED_FloorPlanner.png)\n\n\n### Place&Route\n\n> If it shows error 2017, the solve way can be found ahead(Tips: Enable Dual-Purpose Pin) \n\nAfter finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/LED_Place&Route.png)\n\n## Program\n\nThen connect the board with computer, download firmware.\nYou can select the device according to the following picture.\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_device_scan.png)\n\nWe use download to SRAM as an example.\n- Configure download mode\n\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_sram_program.png \"configure sram download mode\")\n\nDownload\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_sram_download.png \"start sram download\")\n\nThen the board runs as shown：\n\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/blink.gif)\n\nIf you need to store firmware with no power, just choose download to flash mode.\n\n## End\n\nNow the tutorial ends, if you have any suggestions, just leave a message."}, "/hardware/en/tang/Tang-Nano-9K/examples/picorv/picorv.html": {"title": "Simple example about PicoRV on nano 9K", "content": "# Simple example about PicoRV on nano 9K\n\n> Edit on 2022.04.14\n\n## Preface\n\nThere ia an example about picoRV in [Tang Nano 9K github repository](https://github.com/sipeed/TangNano-9K-example/tree/main/picotiny).\nIn this turtial we just describe how to run the example .\n\n## Environment\n\n- Python\n- Gowin IDE\n\n## Steps\n\n### Program FPGA\n\n- Open picotiny.gprj file which is in TangNano-9K-example\\picotiny\\project dictionary to open picotiny project.\n- Tick Use MSPI as regular IO in Project->Configuration->Place&Route->Dual-Purpose Pin which can be found in the top menu bar\n- Right-click Place&Route which is in Process interface and choose Clean&Rerun All \n- Download the generated .fs file to the Embedded Flash of Nano 9K\n\nThen we can use the FPGA like a mcu.\n\n### Download firmware\n\n- Execute the following command in TangNano-9K-example\\picotiny directory\n\n```python\npython .\\sw\\pico-programmer.py .\\example-fw-flash.v COM13\n```\n\nThe COM13 at the end of command line refers to the serial port number of the development board in the system.\nFor example, if it is allocated COM14 in your system, you need change it into COM14.\n\nThere is a countdown shows `- Waiting for reset -` when you succeed excute the command, in which time it's required to press the S1 button of the development board to complete the programming. \nThe succeed done log is as below:\n\n```powershell\n\\TangNano-9K-example\\picotiny> python .\\sw\\pico-programmer.py .\\example-fw-flash.v COM13\nRead program with 11760 bytes\n  - Waiting for reset -\n    ...\nTotal sectors 3\nTotal pages 46\nFlashing 1 / 3\nFlashing 2 / 3\nFlashing 3 / 3\n\nFlashing completed\n```\n\nThen we can use serial port tools to execute command and use HDMI to display the code interface.\n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/picorv.jpg)\n\n## End\n\nOther knowledge like cross-compile is not mentioned here, so you should learn to use it by yourself."}, "/hardware/en/tang/Tang-Nano-9K/Nano-9K.html": {"title": "Tang Nano 9K", "content": "# Tang Nano 9K\n\n>  First edit on 2022.04.06, changed on 2022.04.11\n\n## Introduction\n\nTang nano 9K is an exquisite development board based on [Gowin](https://www.gowinsemi.com/en/) GW1NR-9 FPGA chip.It equips with HDMI connector, RGB screen interface connector, SPI screen connector, 32Mbit SPI flash and 6 LEDs, so users can use it for FPGA verification, risc-v soft core verification and basic function verification easily and quickly. Its 8640 LUT4 logic units can not only be used for various complex logic circuits designing, but also used for running a complete PicoRV soft core. It meets various needs of users, such as learning FPGA, verifying soft core and further design.\n\n![](./assets/9K.png)\n\n## Comparison\n\nTang Nano 9K is the 5th product of Sipeed Tang series. Before purchasing, you can compare and choose from the following table according to your demands:\n\n| Model               | Tang Nano 1K                             | Tang Nano 4K                             | Tang Nano 1K                                            |\n| :------------------ | :--------------------------------------- | :--------------------------------------- | :------------------------------------------------------ |\n| Appearance          | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image002.gif\" width=\"180\" > | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image004.gif\" width=\"180\" > | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image006.gif\" width=\"180\" >                |\n| Logic Units (LUT4)  | 1152                                     | 4608                                     | 8640                                                    |\n| Hard core processor | /                                        | Cortex m3                                | /                                                       |\n| Crystal oscillator  | 27MHZ                                    | 27MHZ                                    | 27MHZ                                                   |\n| Display interface   | RGB screen interface                     | HDMI                                     | HDMI, <br>RGB screen interface,<br>SPI screen interface |\n| Camera              | /                                        | Support OV2640                           | /                                                       |\n| External SPI FLASH  | Reserved pads only                       | 32Mbits SPI flash                        | 32Mbits SPI flash                                       |\n| TF card slot        | /                                        | /                                        | Yes                                                     |\n| Debugger            | Onboard USB-JTAG                         | Onboard USB-JTAG                         | Onboard USB-JTAG & USB-UART                             |\n\n\n## Characteristic\n\nThis form shows detail parameters of Tang Nano 9K\n\n| Item                                                                                                       | value                                                                   |\n| ---------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------- |\n| Logic units(LUT4)                                                                                          | 8640                                                                    |\n| Registers(FF)                                                                                              | 6480                                                                    |\n| ShadowSRAM SSRAM(bits)                                                                                     | 17280                                                                   |\n| Block SRAM BSRAM(bits)                                                                                     | 468K                                                                    |\n| Number of B-SRAM                                                                                           | 26                                                                      |\n| User flash(bits)                                                                                           | 608K                                                                    |\n| SDR SDRAM(bits)                                                                                            | 64M                                                                     |\n| 18 x 18 Multiplier                                                                                         | 20                                                                      |\n| SPI FLASH                                                                                                  | 32M-bit                                                                 |\n| Number of PLL                                                                                              | 2                                                                       |\n| Display interface                                                                                          | HDMI interface, SPI screen interface and RGB screen interface           |\n| Debugger                                                                                                   | Onboard BL702 chip provides USB-JTAG and USB-UART functions for GW1NR-9 |\n| IO                                                                                                         | • support 4mA、8mA、16mA、24mA other driving capabilities <br>• Provides independent Bus Keeper, pull-up/pull-down resistors, and Open Drain output options for each I/O |\n| Connector                                                                                                  | TF card slot, 2x24P 2.54mm Header pads                                  |\n| Button                                                                                                     | 2 programmable buttons for users                                        |\n| LED                                                                                                        | Onboard 6 programmable LEDs                                             |\n\n\n![Generated](./../../../zh/tang/Tang-Nano-9K/assets/clip_image008.jpg)\n\n![Generated](./../../../zh/tang/Tang-Nano-9K/assets/clip_image010.gif)\n\n| Usage           | FPGA                     | MCU                                                                               | FPGA+MCU                                                              |\n| :-------------- | :----------------------- | :-------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n| Language        | Verilog HDL/Verilog      | C/C++                                                                             | Verilog HDL/Verilog ，  C/C++                                         |\n| summary         | verify HDL design        | After flashing the softcore bitstream, <br>this board can bu used as a normal mcu | After flashing the softcore bitstream,<br>it can be used as two chips |\n| suitable people | beginner，FPGA developer | RISC-V developers，Cortex-M developers                                            | Senior engineer                                 |\n\n## User guide\n\n1. Download our packaged user guide document : [Click here](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual) (All PDFs mentioned below are here)\n   \n2. Install IDE and configure license : [Click here](./../Tang-Nano-Doc/install-the-ide.html)\n   \n3. Read this file (in the file downloaded in step 1) : [SUG100-2.6E_Gowin Software User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG100-2.6E_Gowin%20Software%20User%20Guide.pdf)\n\n4. Read this [tutorial](./examples/led/led.html) (LEDs lighting experiment).\n   We recommended you read the following documents during this process:\n   Verilog code specifications (please search by yourself. It is very necessary to cultivate good code specifications from the beginning)\n   SUG949-1.1E_Gowin HDL Coding User Guide.pdf\n   UG286-1.9.1E_Gowin Clock User Guide.pdf\n   FPGA related learning books\n\n   Online tutorial:  We suggest two excellent third-party learning sites about verilog : [HDLBITs](https://hdlbits.01xz.net/wiki/Main_Page) and [Verilog Page](https://www.asic-world.com/verilog/index.html)\n\n5. Read this [tutorial](./examples/rgb_screen/rgb_screen.html) (RGB screen Display experiment). If you can't complete this experiment, you can download our [9K examples](https://github.com/sipeed/TangNano-9K-example.git) (adapted to 9K + 5-inch screen) to see which step goes wrong.\n   Note: for screen wiring, pay attention to the 1-pin silk screen next to the connector corresponding to 1-pin of the cable\n   Documents to read:\n   [SUG284-2.1E_Gowin IP Core Generator User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG284-2.1E_Gowin%20IP%20Core%20Generator%20User%20Guide.pdf) (Page 28)\n   [Datasheet of 5inch screen](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf)\n\n6. Explanation of HDMI display (to be updated)\n\n7. PicoRV soft core test ([Source code](https://github.com/sipeed/TangNano-9K-example))\n\n## Reference code summary\n\n- LED drive / RGB LCD display : https://github.com/sipeed/TangNano-9K-example  \n- GameBOY HDMI : https://github.com/Martoni/GbHdmi \n- PicoRV : https://github.com/YosysHQ/picorv32 \n- PicoRV project running on Tang Nano 9K : https://github.com/sipeed/TangNano-9K-example\n- HDMI Display : coming soon\n\n## Summary of hardware files\n\n- [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN)\n- [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic)\n- [Size](https://dl.sipeed.com/shareURL/TANG/Nano%209K/4_Dimensional_drawing)\n- [3D file](https://dl.sipeed.com/shareURL/TANG/Nano%209K/5_3D_file)\n\n## Matters need attention\n\n1. It is recommended to use Gowin V1.9.8.03 Education Edition : [Click here](https://www.gowinsemi.com/en/support/download_eda/)\nBut if you want to use more IP cores, you need to download other version of IDE, and apply for license : [Click here](https://wiki.sipeed.com/hardware/en/tang/Tang-Nano-Doc/install-the-ide.html)\n2. This version of programmer is recommended : [Click here](https://dl.sipeed.com/shareURL/TANG/programmer)\n3. Avoid using JTAG, MODE0/1 and DONE pins. If you really need to use these pins, please refer to the [UG284-1.8E : schematic manual.pdf](file:///E:/Download/download/UG284-1.8E_GW1NR%20Series%20of%20FPGA%20Products%20Schematic%20Manual.pdf) to see how to enable IO mux.\n4. Please avoid static electricity hitting PCBA; Please release the static electricity from the hand before contacting PCBA\n5. The working voltage of each GPIO has been marked in the schematic . Please do not let the actual working voltage of GPIO exceed the rated value, because it will cause permanent damage to PCBA\n6. When connecting FPC flexible cable, make sure that the cable is completely inserted into the cable without offset\n7. Avoid any liquid or metal touching the pads of components on PCBA during working, because this will cause short circuit and demage PCBA\n\n## Others\n\n- [Download center](https://dl.sipeed.com/shareURL/TANG/Nano%209K)\n- [Examples](./../Tang-Nano-Doc/examples.html)\n\n## Support\n\nEmail to support@sipeed.com for technical support and Business cooperation."}, "/hardware/en/tang/index.html": {"title": "Tang Serial Development Board", "content": "# Tang Serial Development Board\n\n- Overview\n\n## Tang Nano 1K\n\n[![Tang Nano 1K](./../../assets/Tang/Nano-1K/1K.png)](./Tang-Nano-1K/Nano-1K.html)\n\n## Tang Nano 4K\n\n[![Tang Nano 4K](./../../assets/Tang/Nano_4K/Nano_4K.png)](./Tang-Nano-4K/Nano-4K.html)\n\n## Tang Nano 9K\n\n[![Tang Nano 9K](./../../assets/Tang/Nano-9K/9K.png)](./Tang-Nano-9K/Nano-9K.html)\n\n## Tang Nano \n\n[![Tang Nano](./../../assets/Tang/Nano/Tang_Nano.jpg)](./Tang-Nano/Nano.html)\n\n## Tang Primer \n\n[![Tang Primer](./../../assets/Tang/permier/Tang_permier.jpg)](./Tang-primer/Tang-primer.html)"}, "/hardware/en/tang/Tang-Nano-Doc/examples.html": {"title": "Examples of Tang Nano series", "content": "# Examples of Tang Nano series\n\n> Edit on 2022.04.18\n\nHere are Tang Nano series examples and continuously updated\n\n## Preface\n\nBefore reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE\n\nIn addition, we are glad you submit or provide a example, and if you have any feasible ideas, you can come up and we'll try it if possible.\n\n## Examples\n\n---\n\n### Tang Nano\n\n- The onboard downloader is ch552\n\nGithub Repository:\nhttps://github.com/sipeed/Tang-Nano-examples\n\n- [Blink](./../Tang-Nano/examples/led/led.html)\n- [LCD screen](./../Tang-Nano/examples/lcd.html)\n\n---\n\n### Tang Nano 1K\n\nGithub Repository:\nhttps://github.com/sipeed/TangNano-1K-examples\n\n- [Blink](./../Tang-Nano-1K/examples/led/led.html)\n- [LCD screen](./../Tang-Nano-1K/examples/lcd.html)\n\n---\n### Tang Nano 4K\n\nGithub Repository:\nhttps://github.com/sipeed/TangNano-4K-example\n\n- [Blink](./../Tang-Nano-4K/examples/led.html)\n- HDMI display(Preparing, please wait)\n- Display camera content by HDMI project Repository:\nhttps://github.com/sipeed/TangNano-4K-example\n- Cortex-m3 blink(Preparing, please wait)\n\n---\n\n### Tang Nano 9K\n\nGithub Repository:\nhttps://github.com/sipeed/TangNano-9K-example\n\n- [Blink](./../Tang-Nano-9K/examples/led/led.html)\n- [LCD screen](./../Tang-Nano-9K/examples/rgb_screen/rgb_screen.html)\n- [Run examples of PicoRV](./../Tang-Nano-9K/examples/picorv/picorv.html)\n- litex running on 9K(Preparing, please wait)\n- ~~FPGA drives 1.14-inch SPI screen(Preparing, please wait)~~\n- PicoRV running on 9K(Preparing, please wait)\n- HDMI display(Preparing, please wait)\n- Drive screen by mipi interface(Preparing, please wait)"}, "/hardware/en/tang/Tang-Nano-Doc/summary.html": {"title": "Summary", "content": "---\ntitle: Summary\n---\n\n> Edit on 2022.04.06\n\nTang Nano series development boards are designed based on [Gowin](https://www.gowinsemi.com/en/) FPGA chip. Mutiple models of development board meets various requirements. \n- Tang nano 1K with a extremely low price can lead user into FPGA fields\n- Tang nano 4K with a Cortex m3 hardcore, almost the cheapest heterogeneous core board\n- Tang nano 9K with rich logic units can be used to verify Riscv core \n\n## Comparation\n\n| Model     | Tang Nano 1K         | Tang Nano 4K   | Tang Nano 9K        |\n| --- | -------- | ----------------- | -------- |\n| Appreance             | ![Generated](/hardware/zh/tang/Tang-Nano/assets/clip_image002.gif) | ![Generated](/hardware/zh/tang/Tang-Nano/assets/clip_image004.gif) | ![Generated](/hardware/zh/tang/Tang-Nano/assets/clip_image006.gif) |\n| Logic units（LUT4） | 1152                                                         | 4608                                                         | 8640                                                         |\n| Hard core       |                                                            | Cortex-M3                                                    |                                                            |\n| Crystal oscillator frequency         | 27Mhz                                                        | 27Mhz                                                        | 27Mhz                                                        |\n| Display interface         | RGB screen interface                                              | HDMI                                                         | HDMI,<br>  RGB screen interface,<br>  SPI screen interface                      |\n| Camera           |                                                            | OV2640                                                   |                                                            |\n| External SPI FLASH    | Pads are reserved                                                   | Default welding<br>32Mbit SPI FLASH                                     | Default welding<br>32Mbit SPI FLASH                                     |\n| TF card slot           |                                                            |                                                            | yes                                                           |\n| Programmer           | Onboard USB-JTAG downloader                                            | Onboard USB-JTAG downloader                                            | Onboard USB-JTAG downloader &<br> USB-UART port                                     |\n\n- The blank in the form means none\n\n## Preparation\n\n- [Install IDE](./install-the-ide.html)\n\n## Questions\n\n- [Questions&Answers](./programmer.html)"}, "/hardware/en/tang/Tang-Nano-Doc/questions.html": {"title": "Note", "content": "# Note\n\n> Edit on 2022.05.12\n\n- This is for Windows users only\n\n## Troubles with programmer\n\n**Make sure there are 2 converters in Device Manager before reading.**\n\n![](./../../../zh/tang/assets/questions/converter.png)\n\nIf there are two converters, this means computer and board succeed connectting. And if there is no converter, try another USB port or reinstall driver.\n\n### Trouble downloading\n\n**If you have any problems programming or flashing FPGA development board, it's suggested to use the programmer which can be downloaded at this page https://dl.sipeed.com/shareURL/TANG/programmer instead of what is installed with the IDE.**\n\n### ID code mismatch\n\nThis error means wrong device choice. All that refers chip model(like he project device, pin constrain, IP modules and programmer device choose) need to be changed. \n\n### Download slowly\n\nDon't choose Operation containing Verify\n\n![](./../../../zh/tang/assets/questions/never_choose_verify.png)\n\n### Can't find download file\n\nNormally the download file whose extension name is fs is in the impl/pnr folder under the project path.\n\n<details>\n  <summary><font color=\"#4F84FF\">Click to see steps by picture</font></summary>\n  <img src=\"./../../../zh/tang/assets/questions/fs_path.png\">\n  <p>From the picture above we can know the path of this download file is fpga_project1/impl/pnr/fpga_project1.fs </p>\n  <p></p>\n  <p> The fpga_project1 is the project dictionary, the impl is generated by IDE, and the download is in the folder named pnr</p>\n  <p></p>\n  <p> The file whose extension name is fs is what we will burn into fpga</p>\n</details>\n\n### No Gowin devices found\n\nThis can be solved by replacing Programmer as mentioned in **[Trouble downloading](#trouble-downloading)**\n\n### Cabel open failed\n\nAfter finishing replacing **programmer** as mentioned previously,Do following steps in programmer application.\n\nClick Edit->Cable Setting->Cable->Query in the top menu bar,then save.\n\n<details>\n  <summary><font color=\"#4F84FF\">Click to see steps by pictures</font></summary>\n  <img src=\"./../../../zh/tang/assets/questions/cable.png\">\n  <p>Click Query in the following picture</p>\n  <img src=\"./../../../zh/tang/assets/questions/click_query.png\" >\n  <p>Click Save</p>\n</details>\n\n## Using GAO\n\nIt's tested IDE version before V1.9.8.1 and V1.9.8.1 is ok, the newer version is not ok."}, "/hardware/en/tang/Tang-Nano-Doc/flash-in-linux.html": {"title": "Flash in linux", "content": "---\ntitle: Flash in linux\nkeyeords: Linux, FPGA, Gowin\n---\n\nIt's suggested to use **openFPGALoader** to flash te development board in Ubuntu.\nOther linux distributions have not been verified.\n\nThe steps are as shown:\n\n### Install openFPGALoader\n\nReference：https://trabucayre.github.io/openFPGALoader/guide/install.html\n\nUsing the following commands in terminal:\n\n```bash\n# preprocess\nsudo apt-get install libftdi1-2 libftdi1-dev libhidapi-hidraw0 libhidapi-dev libudev-dev zlib1g-dev cmake pkg-config make g++\n# compile\ngit clone https://github.com/trabucayre/openFPGALoader.git\ncd openFPGALoader\nmkdir build\ncd build\ncmake ../ # add -DBUILD_STATIC=ON to build a static version\n          # add -DENABLE_UDEV=OFF to disable udev support and -d /dev/xxx\n          # add -DENABLE_CMSISDAP=OFF to disable CMSIS DAP support\ncmake --build .\n# or\n# make -j$(nproc)\n# install\nsudo make install\n```\n\n### Flash\n\nDetect board\n\n```bash\n$ sudo ./openFPGALoader --detect # This command should be executed in the directory where you previously executed make install  \n# The log of succeed running is shown below\nJtag frequency : requested 6.00MHz   -> real 6.00MHz\nindex 0:\n        idcode 0x100481b\n        manufacturer Gowin\n        family GW1N\n        model  GW1N(R)-9C\n        irlength 8\n\n\n```\n\nDownload bitstream\n\n```bash\n$ sudo ./openFPGALoader -b tangnano9k -f ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs\n# -b means target model，this can be found in the form below\n# -f means download to flash，with it means download to sram\n# The last is what need to be downloaded, it should be the related .fs file\n# The log of succeed running is shown below\nwrite to flash\nJtag frequency : requested 6.00MHz   -> real 6.00MHz  \nParse file Parse ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs: \nDone\nDONE\nJtag frequency : requested 2.50MHz   -> real 2.00MHz  \nerase SRAM Done\nerase Flash Done\nwrite Flash: [==================================================] 100.00%\nDone\nCRC check: Success\n\n```\n\n-b means target development board, should be decided from the form below：\n\n| Board name | FPGA            | Memory | Flash                         |\n| ---------- | --------------- | ------ | ----------------------------- |\n| tangnano   | GW1N-1 QFN48    | OK     | Internal Flash                |\n| tangnano1k | GW1NZ-1 QFN48   | OK     | Internal Flash                |\n| tangnano4k | GW1NSR-4C QFN48 | OK     | Internal Flash/External Flash |\n| tangnano9k | GW1NR-9C QFN88  | OK     | Internal Flash/External Flash |"}, "/hardware/en/tang/Tang-Nano-Doc/install-the-ide.html": {"title": "Install the ide", "content": "# Install the ide\n\n> Edit on 2022.04.06\n\n- Educational edition is not recommend because it supports few chips\n- It's tested that we can use [GAO](Online debug tool Gowin Analysis Oscilloscope) on V1.9.8.1\n- **Float license only suits IDE version before 1.9.8**\n\n## Install the application\n\n- The IDE can be downloaded on this page http://www.gowinsemi.com.cn/faq.aspx\n\n![](./assets/install-ide.png)\n\n> Due to the IDE updating, the screenshot is created on 2022.04.06\n\n- When finish installing, 2 drivers need to be installed.\n\n![](./assets/ide-install-driver.png)\n\nAfter installing all, we can start run the IDE.\nThe IDE icon is like what is shown below.\n\n![](./assets/ide-icon.png)\n\n## Activate the IDE\n\n- Here are two ways to activate the IDE \n\n### Using local license\n\n- Here are two ways to apply for local license\n\n#### Get license from gowin official website\n\nVisit this page and fill those blanks, then just wait.\nhttps://www.gowinsemi.com/en/support/license/\n\n#### Get license from sipeed \n\n- Normally the license email will be replied on Tuseday or Friday (GMT+8)\n\nThe license from sipeed can not be used for V1.9.8 and version before V1.9.8\n\nSend an apply license email to support@sipeed.com to get a local license.\nThe title of the email is [Apply Tang Lic]MAC: xxxxxx , the content should be like below:\n\n```\nCompany name:\nCompany website:\nDepartment:\nContact person:\nPhone number:\nEmail :\nPC MAC address:\nlicense type: local or shared (choose one)\nOperating system: Windows or Linux (choose one)\nCountry or Region:\n```\n\n- After receiving the license files, using the Browser of the license manager application to add the correct license file.\n\n![](./assets/lic-manager.png)\n\n### Using Float license\n\n**Float license is only support IDE version before 1.9.8**\n\n- Using the Float license requires the network\n\nThe server ip and port are shown below\n\n![](./assets/using-float-lic.png)\n\n## Others\n\n### Programmer application\n\nThe programmer application installed with the IDE may not work very well with our board.\nSo it's suggested to use the programmer which can be downloaded here \nhttps://dl.sipeed.com/shareURL/TANG/programmer\n\n### Flash in linux\n\nHere is a way to Flash the development board in linux [click me](./flash-in-linux.html)"}, "/hardware/en/tang/Tang-Nano-4K/examples/led.html": {"title": "Blink LED", "content": "---\ntitle: Blink LED\n---\n\n> Edit on 2022.04.15\n\nFrom this essay we can learn the basic usage of Gowin IDE\n\n## Create Project\n\n\nCreate Project：File-->NEW-->FPGA Dsign Project-->OK\n![](./../../../../zh/tang/Tang-Nano/assets/LED-1.png)\n\nSet project name and project path (File name and project path shoule be English)\n![](./../../../../zh/tang/Tang-Nano/assets/LED-2.png)\n\nChoose correct device: \n![Tang_nano_4k_device_choose](./../../../../zh/tang/Tang-Nano-4K/assets/Nano_4K_device_choose.png)\n\n- The main chip model on some boards is C7/I6, please pay attention to this and choose correct model.\n\n## Prepare codes\n\nAfter creating project, we can start editing codes. \nTo creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N.\nThen choose Verilog File in the pop-up window.\n![](./../../../../zh/tang/Tang-Nano/assets/LED-5.png)\n\nName for file (Suggested using English)\n![](./../../../../zh/tang/Tang-Nano/assets/LED-6.png)\n\nDouble click the created file, then edit in right window\n![](./../../../../zh/tang/Tang-Nano/assets/LED-7.png)\n\n- We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself.  \n\n```verilog\nmodule led (\n    input   sys_clk,\n    input   sys_rst_n,     // reset input\n    output  reg led        // LED\n);\n\nreg [23:0] counter;        //定义一个变量来计数\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin // Counter block\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin // Toggle LED\n    if (!sys_rst_n)\n        led <= 1'b1;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led <= ~led;                         // ToggleLED\nend\n\nendmodule\n\n```\n\nAfter finishing edit the file, it's necessary to tick the `Use DONE as regular IO` in Project->Configuration->Place&Route->Dual-Purpose Pin to avoid error.\n![img_configuration](./../../../../zh/tang/Tang-Nano-9K/nano_9k/LED_Configuration.png)\n\n## Systhesize, constrain, place&route\n\n### Systhesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Clock constraint is not involved here\n\nTo realize function of the code on FPGA, we must bind the ports we define with the chip pins.\n\nDouble click the FloorPlanner in the Process interface to set pin constrain(This can be continued if failing systhesize). \n\n![](./../../../../zh/tang/assets/examples/led_pjt_2.png)\n\nFirst time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. \n![](./../../../../zh/tang/Tang-Nano/assets/LED-9.png)\n\nThe leds schematic of nano 9k is as shown below:\n![](./../../../../zh/tang/Tang-Nano-4K/assets/LED_Pin.png \"nano 4k led pin\")\n\n| port      | I/O    | pin | desc       |\n| --------- | ------ | --- | ---------- |\n| sys_clk   | input  | 45  | Clock input|\n| sys_rst_n | input  | 15  | System_reset |\n| led       | output | 10  | LED       |\n\nIn this GUI interface we have two ways to constrain pins:\n- Drag the corresponding port to the pin of chip\n- Type the pin number corresponding to the port in IO constraint\n\nSo we can choose one way in the opened window as what the following picture shows to finish constrain:\n![Led floorplanner](./../../../../zh/tang/Tang-Nano-4K/assets/LED_FloorPlanner.png)\n\n### Place&Route\n\n> If it shows error 2017, the solve way can be found ahead(Tips: Enable Dual-Purpose Pin) \n\nAfter finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below\n![](./../../../../zh/tang/Tang-Nano-4K/assets/Place&Route.png)\n\n## Program\n\nThen connect the board with computer, download firmware.\n\nYou can scan the device according to the following picture.\n![](./../../../../zh/tang/Tang-Nano-4K/assets/nano-4k-device-scan.png)\n\nWe use download to SRAM as an example.\n- Configure download mode\n\n![](./../../../../zh/tang/Tang-Nano-4K/assets/nano-4k-sram-choose.png)\n\nThen we just click download to start program device.\n\nThe led on the board will blink\n\nIf you need to store firmware with no power, just choose download to flash mode.\n\n## End\n\nNow the tutorial ends, if you have any suggestions, just leave a message."}, "/hardware/en/tang/Tang-Nano-4K/examples/hdmi.html": {"title": "", "content": ""}, "/hardware/en/tang/Tang-Nano-4K/start.html": {"title": "摄像头和HDIM屏幕显示", "content": "# 摄像头和HDIM屏幕显示\n\n具体工程[文件](https://github.com/sipeed/TangNano-4K-example)\n\n接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上即可使用了。"}, "/hardware/en/tang/Tang-Nano-4K/Nano-4K.html": {"title": "Tang Nano 4K ", "content": "# Tang Nano 4K \n\n> Edit on 2022.04.06\n\n## Introduction\n\nTang Nano 4K is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) little GW1NSR-LV4C FPGA chip. The board is equipped with camera interface and HDMI interface. There is also an onboard USG-JTAG debugger, which make it convinent for users to use. Its Cortex-M3 hardcore can help users study mcu.\n\n![Tang Nano 4K](./assets/4k-1.jpg)\n![Tang Nano 4K](./assets/4k-2.jpg)\n\n## Parameters\n\n- The sheet below shows difference with previous product\n\n| model               | Tang Nano             | Tang Nano 4K   |\n| ------------------- | --------------------- | -------------- |\n| FPGA chip           | GW1N-1-LV             | GW1NSR-LV4C    |\n| logic units         | 1152                  | 4608           |\n| Register            | 864                   | 3456           |\n| Hard core           | none                  | Coetex m3      |\n| Block SRAM(bits)    | 72K                   | 180K           |\n| User flash(bits)    | 96K                   | 256K           |\n| Number of PLL       | 1                     | 2              |\n| Number of I/O Bank  | 4                     | 4              |\n| Number of users I/O | 41                    | 44             |\n| Screen interface    | 40P RGB LCD interface | HDMI interface |\n| camera interface    | None                  | DVP interface  |\n| Size                | 58.4mm\\*21.3mm        | 60mm\\*22.86mm  |\n\n![](./../../../zh/tang/Tang-Nano/assets/Tang_nano_4K_0813.png)\n\n## Others\n\n- [Examples](./../Tang-Nano-Doc/examples.html)\n- [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/02_Schematic)\n- [Download center](https://dl.sipeed.com/shareURL/TANG/Nano%204K/)\n\n## Support\n\nEmail to support@sipeed.com for technical support and Business cooperation."}, "/hardware/en/tang/Tang-Nano-4K/Tang-nano-4k.html": {"title": "Tang Nano 4k examples", "content": "---\ntitle: Tang Nano 4k examples\n---\n\nBefore reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE\n\nDetail [Files](https://github.com/sipeed/TangNano-4K-example)\nAfter connecting the camera and HDMI display, flash the project to the development board to see the corresponding results.\n\n- [Blink](./examples/led.html)\n- HDMI display(Preparing, please wait)\n- Display camera content by HDMI(Preparing, please wait)\n- Cortex-m3 blink(Preparing, please wait)\n- others(Any ideas could be come up, and will be accepted if feasible)"}, "/hardware/en/tang/Tang-Nano/examples/lcd.html": {"title": "Drive RGB screen", "content": "---\ntitle: Drive RGB screen\n---\n\n> Edit on 2022.04.18\n\n## Introduce timing \n\nRGB LCD display protocol is similar to VGA protocol, both have horizon  synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal.\n\nHere we introduce VGA timing.\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png)\n\nThere shows horizon synchronization timing and vertical synchronization timing in the picture above.\n\nFrom the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. \n\nEach horizon of data contains back porch, visible data **(this is normally  thought as active data)** and front porch.\n\nThe visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga-timing\n\nThe timing of screen which we provided is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet_RGB.pdf)\n\nThe following picture shows the screenshot about this LCD timing.\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png)\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png)\n\nThe first picture form shows parameters of the screen and the the following picture is its timing. \n\nFrom its timing picture, we can know we don't need to set front porch time and back proch time, we just need to set blanking time. \n\n## Create project \n\nPlease refer to this [article](./led/led.html) to see how to create project.\n\n## Generate screen clock\n\n- Here we use gowin official IP\n\nThe crystal oscillator onboard is 24MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. \n\nHere we use  `IP Core Generate` which can be find in Tools -> IP Core Generate\n\n![](./../../../../zh/tang/Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\nDouble click `rPLL` and select Verilog in the pop-up window language, set CLKIN 24MHz, CLKOUTD is 33.00MHz. Also config the tolerance.\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_5.png)\n\nAfter click OK it asks whether add it to current project, here we choose yes.\n\n![](./../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/led/assets/add_ip_file_in_project.png)\n\nThen a tmp file will appear, we can use it to generate the ip, like what is shown below. \n\n![](./../../../../zh/tang/Tang-Nano/examples/led/assets/ip_examples.png)\n\n## Screen driver\n\n- **To start this we should create a verilog file first**\n\n### Port definition\n\nFirst define ports which are needed to drive screen\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\nWe use RGB565 driver mode.\n\n### Timing constants\n\nThen we define the constants according to the timing form picture\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\nFirst we define front porch, back porch and valid pixel data.\n\nAs for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok.\n\n### Define variables\n\n- Define some variables helps us to meet timing requirment\n  \n```verilog \n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### Synchronization signals\n\nThis code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity \n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//Here note the negative polarity of HSYNC and VSYNC\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### Enable signal\n\n- This code decides whether display image. \n\nThis driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display.\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //It will shake if there not minus one\n```\n\n### Test color bars\n\n- This code generates color bars to test LCD\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n**Do not forget to add endmodule in the end of the driver file**\n\nUp to now we have finished the driver module.\n\n## Instantiated in the top\n\n- **New a verilog file**\n- Just copy the content below and save it is ok\n\n```verilog\nmodule TOP //Name TOP module\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // list ports\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //instantiate pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS),  //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //instantiate vga driver\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## Synthesize, constrain, Place&Route\n\n### Synthesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Here we only constraint pins\n\nThe corresponding pins and ports are as follows form shows\n\nThe way to constain pins can refer to the [Light led](./led/create_led.html), it contains two ways to constain pins.\n\nIf you feel troublesome about the method above,  you can copy the content in this [page](./../../../../zh/tang/Tang-Nano/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). \n\n| PORT        | I/O    | PIN | PORT         | I/O    | PIN |\n| ----------- | ------ | --- | ------------ | ------ | --- |\n| LCD_B[4]    | output | 41  | LCD_B[3]     | output | 42  |\n| LCD_B[2]    | output | 51  | LCD_B[1]     | output | 53  |\n| LCD_B[0]    | output | 54  | LCD_G[5]     | output | 55  |\n| LCD_G[4]    | output | 56  | LCD_G[3]     | output | 57  |\n| LCD_G[2]    | output | 68  | LCD_G[1]     | output | 69  |\n| LCD_G[0]    | output | 70  | LCD_R[4]     | output | 71  |\n| LCD_R[3]    | output | 72  | LCD_R[2]     | output | 73  |\n| LCD_R[1]    | output | 74  | LCD_R[0]     | output | 75  |\n| LCD_DEN     | output | 33  | LCD_SYNC     | output | 34  |\n| LCD_HYNC    | output | 40  | LCD_CLK      | output | 35  |\n| XTAL_IN     | input  | 52  | nRST         | input  | 4   |\n\n### Place&Route\n\nAfter constraining, we need to open IO mux to complete Place&Route.\n\nTick Project -> Configuration -> Place&Route -> Dual-Purpose Pin which is in the Menu Bar.\n![](./../../../../zh/tang/Tang-Nano/examples/led/assets/enable_io_mux.png)\n\nThen we can run Place&Route.\n\n## Program\n\nFinishing Place&Route, we can download the generated .fs file to the development board to see color bar.\n\n## End\n\nNow the tutorial ends, if you have any suggestions, just leave a message.\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Back to the previous page(Back)</a>\n</p>"}, "/hardware/en/tang/Tang-Nano/examples/led/github_led.html": {"title": "Blink by github project", "content": "# Blink by github project\n\n- First get sourcecode from github https://github.com/sipeed/Tang-Nano-examples\n  \n- Open led_prj.gprj file in Tang-Nano-examples\\example_led\\led_prj path\n- Right click clean&Rerun all in process interface\n  ![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/github_place&route.png)\n\n- Then there is an error(This is a historical question,  you can search it by yourself if you wonder it)\n  Change configuration which can be found in  Project -> Configuration -> Syntheize of top menu bar and choose GowinSyntheize.\n  Then right click Place&Route and  clean&Rerun all \n   ![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/Change_Synthesis.png)\n\n- Connet the board and download firmware.\n  Double click `Program Device` in Process interface to open programmer tool.\n  ![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/Open_Programmer.png)\n\n- Choose download to SRAM to verify codes quickly\n  ![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/Success_led.png)\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/en/tang/Tang-Nano/examples/led/led.html": {"title": "blink", "content": "# blink\n\n- Edit on 2022.04.18\n\n## Preface\n\nHere we provide two ways to blink led\n\n- [Blink by yourself](./create_led.html)\n- [Using github project](./github_led.html)\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Previous page(Back)</a>\n</p>"}, "/hardware/en/tang/Tang-Nano/examples/led/create_led.html": {"title": "Blink led", "content": "# Blink led\n\n> Edit on 2022.04.18\n\nFrom this essay we can learn the basic usage of Gowin IDE\n\n## Create project\n\nCreate Project：File-->NEW-->FPGA Dsign Project-->OK\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-1.png)\n\nSet project name and project path (File name and project path shoule be English)\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-2.png)\n\nChoose correct device: \n![Tang_nano_device_choose](./../../../../../zh/tang/Tang-Nano/examples/led/assets/Nano_device_choose.png)\n\n## Prepare codes\n\nAfter creating project, we can start editing codes. \nTo creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N.\nThen choose Verilog File in the pop-up window.\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-5.png)\n\nName for file (Suggested using English)\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-6.png)\n\nDouble click the created file, then edit in right window\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-7.png)\n\n- We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself.  \n\n~~~v\nmodule led (\n    input sys_clk,\n    input sys_rst_n,\n    output reg [2:0] led // 110 B, 101 R, 011 G\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1199_9999)       // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1199_9999)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n~~~\n\n## Systhesize, constrain, place&route\n\n### Systhesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Clock constraint is not involved here\n\nTo realize function of the code on FPGA, we must bind the ports we define with the chip pins.\n\nDouble click the FloorPlanner in the Process interface to set pin constrain(This can be continued if failing systhesize). \n\n![](./../../../../../zh/tang/assets/examples/led_pjt_2.png)\n\nFirst time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. \n![](./../../../../../zh/tang/Tang-Nano/assets/LED-9.png)\n\nThe led schematic of nano is as shown below:\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/nano_led_pins.png)\n\nIn this GUI interface we have two ways to constrain pins:\n- Drag the corresponding port to the pin of chip\n- Type the pin number corresponding to the port in IO constraint(This is shown as below)\n\nSo we can do the ordered operations in the opened window as what the following picture shows:(Just choose one way)\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/pin_constrain_1.png)\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/pin_constrain_2.png)\n\n### Place&Route\n\nAfter finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/RGB_LED_Place&Route.png)\n\n## Program\n\nThen connect the board with computer, download firmware.\n\nDouble click `Program Device` in Process interface to open programmer application\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets//Open_Programmer.png)\n\nYou can config download mode according to the following picture.\nWe use download to SRAM as an example.\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/tang-nano-programmer-config.png)\n\nIf you need to store firmware with no power, just choose download to flash mode.\n\n## End\n\nNow the tutorial ends, if you have any suggestions, just leave a message."}, "/hardware/en/tang/Tang-Nano/Nano.html": {"title": "Tang Nano", "content": "# Tang Nano\n\n> Edit on 2022.03.23\n\n## Introduction\n\nTang Nano is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) GW1N-1 FPGA chip.The board is equipped with PSRAM, RGB LCD interface and onboard USG-JTAG debugger, which make it convinent for users to use.\n\n![](./../../../assets/Tang/Nano/Tang_Nano.jpg)\n\n## Parameters\n\n![Nano](./../../../assets/Tang/Nano/Tang-Nano-4.png)\n**Note** :\n- The Numeric number matches PIN number\n- Numeric number with dot matches gclk pins\n\n\n| Items             | Parameters  |\n| ----------------- | ----------- |\n| Core              | GW1N-1 FPGA |\n| Logic units(LUT4) | 1152        |\n| Registers(FF)     | 864         |\n| Block SRAM(bits)  | 72K         |\n| B-SRAM block      | 4           |\n| User flash(bits)  | 96K         |\n| PLL               | 1           |\n| I/O Bank          | 4           |\n| I/O numbers       | 41          |\n| Core quantity     | 1.2V        |\n| Usb-Jtag          | ch552       |\n| Onboard PSRAM     | 64Mbits     |\n\n\n![Nano-Pin](./../../../assets/Tang/Nano/Tang-Nano-Pin.png)\n\n## Support\n\nEmail to support@sipeed.com for technical support and Business cooperation.\n\n## Resources\n\n- [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano/HDK)\n- [Download center](https://dl.sipeed.com/shareURL/TANG/Nano)\n- [Examples](./../Tang-Nano-Doc/examples.html)"}, "/hardware/en/tang/Tang-Nano/Tang-Nano.html": {"title": "Tang Nano examples", "content": "---\ntitle: Tang Nano examples\n---\n\n## Note\n\nBefore reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/Nano/IDE) named `programmer2.7z` not that installed with IDE\n\n## Examples\n- [Blink](./../Tang-Nano-Doc/examples/1_led.html)(Preparing, please wait)\n- [LCD screen](./../Tang-Nano-Doc/examples/2_lcd.html)(Preparing, please wait)"}, "/hardware/en/tang/Tang-Nano-1K/examples/lcd.html": {"title": "Drive RGB screen", "content": "---\ntitle: Drive RGB screen\n---\n\n> Edit on 2022.04.19\n\n## Introduce timing \n\nRGB LCD display protocol is similar to VGA protocol, both have horizon  synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal.\n\nHere we introduce VGA timing.\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png)\n\nThere shows horizon synchronization timing and vertical synchronization timing in the picture above.\n\nFrom the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. \n\nEach horizon of data contains back porch, visible data **(this is normally  thought as active data)** and front porch.\n\nThe visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga-timing\n\nThe timing of screen which we provided is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet_RGB.pdf)\n\nThe following picture shows the screenshot about this LCD timing.\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png)\n\n![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png)\n\nThe first picture form shows parameters of the screen and the the following picture is its timing. \n\nFrom its timing picture, we can know we don't need to set front porch time and back proch time, we just need to set blanking time. \n\n## Create project \n\nPlease refer to this [article](./led/led.html) to see how to create project.\n\n## Generate screen clock\n\n- Here we use gowin official IP\n\nThe crystal oscillator onboard is 27MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. \n\nHere we use  `IP Core Generate` which can be find in Tools -> IP Core Generate\n\n![](./../../../../zh/tang/Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\nDouble click `rPLL` and select Verilog in the pop-up window language, set CLKIN 24MHz, CLKOUTD is 33.00MHz. Also config the tolerance.\n\n![](./../../../../zh/tang/Tang-Nano-1K/assets/lcd_rpll.png)\n\nAfter click OK it asks whether add it to current project, here we choose yes.\n\n![](./../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/led/assets/add_ip_file_in_project.png)\n\nThen a tmp file will appear, we can use it to generate the ip, like what is shown below. \n\n![](./../../../../zh/tang/Tang-Nano/examples/led/assets/ip_examples.png)\n\n## Screen driver\n\n- **To start this we should create a verilog file first**\n\n### Port definition\n\nFirst define ports which are needed to drive screen\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\nWe use RGB565 driver mode.\n\n### Timing constants\n\nThen we define the constants according to the timing form picture\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\nFirst we define front porch, back porch and valid pixel data.\n\nAs for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok.\n\n### Define variables\n\n- Define some variables helps us to meet timing requirment\n  \n```verilog \n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### Synchronization signals\n\nThis code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity \n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//Here note the negative polarity of HSYNC and VSYNC\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### Enable signal\n\n- This code decides whether display image. \n\nThis driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display.\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //It will shake if there not minus one\n```\n\n### Test color bars\n\n- This code generates color bars to test LCD\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n**Do not forget to add endmodule in the end of the driver file**\n\nUp to now we have finished the driver module.\n\n## Instantiated in the top\n\n- **New a verilog file**\n- Just copy the content below and save it is ok\n\n```verilog\nmodule TOP //Name TOP module\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // list ports\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //instantiate pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS),  //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //instantiate vga driver\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## Synthesize, constrain, Place&Route\n\n### Synthesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Here we only constraint pins\n\nThe corresponding pins and ports are as follows form shows\n\nThe way to constain pins can refer to the [Light led](./led/create_led.html), it contains two ways to constain pins.\n\nIf you feel troublesome about the method above,  you can copy the content in this [page](./../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). \n\n|   PORT   |  PIN  |   PORT   |  PIN  |\n| :------: | :---: | :------: | :---: |\n|  LED_B   |  10   |  LED_G   |  11   |\n|  LED_R   |   9   | LCD_B[4] |  24   |\n| LCD_B[3] |  23   | LCD_B[2] |  22   |\n| LCD_B[1] |  20   | LCD_B[0] |  19   |\n| LCD_G[5] |  18   | LCD_G[4] |  17   |\n| LCD_G[3] |  16   | LCD_G[2] |  15   |\n| LCD_G[1] |  27   | LCD_G[0] |  28   |\n| LCD_R[4] |  29   | LCD_R[3] |  30   |\n| LCD_R[2] |  31   | LCD_R[1] |  34   |\n| LCD_R[0] |  35   | LCD_DEN  |  21   |\n| LCD_SYNC |  32   | LCD_HYNC |  33   |\n| LCD_CLK  |   8   | XTAL_IN  |  47   |\n|   nRST   |  44   |          |       |\n\n\n### Place&Route\n\nAfter constraining, we need to open IO mux to complete Place&Route.\n\nTick Project -> Configuration -> Place&Route -> Dual-Purpose Pin which is in the Menu Bar.\n![](./../../../../zh/tang/Tang-Nano/examples/led/assets/enable_io_mux.png)\n\nThen we can run Place&Route.\n\n## Program\n\nFinishing Place&Route, we can download the generated .fs file to the development board to see color bar.\n\n## End\n\nIf you want the project, it can be found in this page : https://github.com/sipeed/TangNano-1K-examples.git\n\nNow the tutorial ends, if you have any suggestions, just leave a message.\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Back to the previous page(Back)</a>\n</p>"}, "/hardware/en/tang/Tang-Nano-1K/examples/led/github_led.html": {"title": "Blink by github project", "content": "# Blink by github project\n\n- First get sourcecode from github https://github.com/sipeed/TangNano-1K-examples\n  \n- Open led_prj.gprj file in TangNano-1K-examples\\example_led\\led_prj path\n- Right click clean&Rerun all in process interface\n  ![](./../../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/led/assets/github_nano1K_place&route.png)\n\n- Connet the board and download firmware.\n  Double click `Program Device` in Process interface to open programmer tool.\n  ![](./../../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/led/assets/Open_Programmer_nano_1k.png)\n\n- Choose download to SRAM to verify codes quickly\n  ![](./../../../../../zh/tang/Tang-Nano-1K/Nano_1K_examples/led/assets/Success_led_nano_1k.png)\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Previou page</a>\n</p>"}, "/hardware/en/tang/Tang-Nano-1K/examples/led/led.html": {"title": "blink", "content": "# blink\n\n- Edit on 2022.04.18\n\n## Preface\n\nHere we provide two ways to blink led\n\n- [Blink by yourself](./create_led.html)\n- [Using github project](./github_led.html)\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Previous page</a>\n</p>"}, "/hardware/en/tang/Tang-Nano-1K/examples/led/create_led.html": {"title": "Blink led", "content": "# Blink led\n\n> Edit on 2022.04.19\n\nFrom this essay we can learn the basic usage of Gowin IDE\n\n## Create project\n\nCreate Project：File-->NEW-->FPGA Dsign Project-->OK\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-1.png)\n\nSet project name and project path (File name and project path shoule be English)\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-2.png)\n\nChoose correct device: \n![Tang_nano_device_choose](./../../../../../zh/tang/Tang-Nano-1K/assets/Nano_1K_device_choose.png)\n\n## Prepare codes\n\nAfter creating project, we can start editing codes. \nTo creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N.\nThen choose Verilog File in the pop-up window.\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-5.png)\n\nName for file (Suggested using English)\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-6.png)\n\nDouble click the created file, then edit in right window\n![](./../../../../../zh/tang/Tang-Nano/assets/LED-7.png)\n\n- We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself.  \n\n~~~v\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [2:0] led    // 110 B, 101 G,001 R\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n~~~\n\n## Systhesize, constrain, place&route\n\n### Systhesize\n\nAfter finishing steps above, go to the \"Process\" interface, systhesize the edited file, which means running \"Systhesize\". \n![](./../../../../../zh/tang/Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\nIf the result is the same as shown below\n![](./../../../../../zh/tang/Tang-Nano/assets/LED.png) \n\nIt means that there is no bug in our code, we can continue the next steps. \n\nIf there is some thing wrong, please fix by yourself. \n\n### Constrain\n\n- Clock constraint is not involved here\n\nTo realize function of the code on FPGA, we must bind the ports we define with the chip pins.\n\nDouble click the FloorPlanner in the Process interface to set pin constrain(This can be continued if failing systhesize). \n\n![](./../../../../../zh/tang/assets/examples/led_pjt_2.png)\n\nFirst time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. \n![](./../../../../../zh/tang/Tang-Nano/assets/LED-9.png)\n\nThe led schematic of nano is as shown below:\n![](./../../../../../zh/tang/Tang-Nano-1K/assets/Nano_1K_RGB_pins.png)\n\nIn this GUI interface we have two ways to constrain pins:\n- Drag the corresponding port to the pin of chip\n- Type the pin number corresponding to the port in IO constraint\n\nSo we can do the ordered operations in the opened window as what the following picture shows:(Just choose one way)\n    ![](./../../../../../zh/tang/Tang-Nano-1K/assets/RGB_LED_Constrains.png)\n\n### Place&Route\n\nAfter finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below\n![](./../../../../../zh/tang/Tang-Nano-1K/assets/RGB_LED_Place&Route.png)\n\nIf it shows different from the picture below, please fix by yourself.\n\n## Program\n\nThen connect the board with computer, download firmware.\n\nDouble click `Program Device` in Process interface to open programmer application\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets//Open_Programmer.png)\n\nYou can config download mode according to the following picture.\nWe use download to SRAM as an example.\n![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/tang-nano-programmer-config.png)\n\nIf you need to store firmware with no power, just choose download to flash mode.\n\n## End\n\nNow the tutorial ends, if you have any suggestions, just leave a message."}, "/hardware/en/tang/Tang-Nano-1K/Tang-Nano-1k.html": {"title": "Tang Nano 1k examples", "content": "---\ntitle: Tang Nano 1k examples\n---\n\n- [Blink](./Nano_1K_examples/LED.html)(Preparing, please wait)\n- [LCD screen](./Nano_1K_examples/LCD.html)(Preparing, please wait)"}, "/hardware/en/tang/Tang-Nano-1K/user.html": {"title": "一些例程", "content": "# 一些例程\n\n## 点灯LED\n\n1. 新建工程：File-->NEW-->FPGA Dsign Project-->OK\n    ![](./assets/LED-1.png)\n\n2. 弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./assets/LED-2.png)\n\n3. 选择合适的型号：\n    ![](./assets/LED-3.png)![](./assets/LED-4.png)\n\n4. 新建好工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./assets/LED-5.png)\n5. 为文件命名（要求写英文名，不然后续综合很容易报错）\n    ![](./assets/LED-6.png)![](./assets/LED-7.png)\n6. 双击文件，可以在右侧的编辑框中进行代码的编写。以编辑流水灯为例，将下方的“LED例程代码”粘贴到自己的文件中，也可以自己编写自己的代码，例程代码地址：<https://github.com/sipeed/TangNano-1K-examples>\n\n    ```\n    module led (\n        input sys_clk,\n        input sys_rst_n,\n        output reg [2:0] led // 110 R, 101 B, 011 G\n    );\n\n    reg [31:0] counter;\n\n    always @(posedge sys_clk or negedge sys_rst_n) begin\n        if (!sys_rst_n) begin\n            counter <= 31'd0;\n            led <= 3'b110;\n        end\n        else if (counter < 31'd1350_0000)       // 0.5s delay\n            counter <= counter + 1;\n        else begin\n            counter <= 31'd0;\n            led[2:0] <= {led[1:0],led[2]};\n        end\n    end\n\n    Endmodule\n\n    ```\n\n7. 代码编辑结束后转到“Process”界面下，对编辑好的代码进行综合，即运行“Systhesize”\n    ![](./assets/LED-8.png)\n    运行的结果如上图出现 ![](./assets/LED.png) 的形状，且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n8. 接下来通过  打开“FloorPlanner”实现管脚约束（前面的综合如果运行失败，这一步无法进行），第一次打开会弹出缺少.cst文件：\n    ![](./assets/LED-9.png)\n    选择“OK”即可；\n    初始界面如图：![](./assets/LED-10.png)![](./assets/LED-11.png)\n9. 将界面转到“Package View”界面，点击下方“I/O Constraints”编辑引脚数据，如下图所示：\n    ![](./assets/LED-12.png)![](./assets/LED-13.png)\n    引脚情况：\n    ![](./assets/LED-14.png)\n    引脚分布情况：\n\n| PORT | I/O | PIN | DESE |\n| --- | --- | --- | --- |\n| SYS_CLK | INPUT | 47 | 47 |\n| SYS-RST-N | INPUT | 13 | --- |\n| LED[0] | OUTPUT | 9 | --- |\n| LED[1] | OUTPUT | 10 | --- |\n| LED[2] | OUTPUT | 11 | --- |\n\n10.将界面转到“Package View”界面，点击下方“I/O Constraints”编辑引脚数据，如下图所示：\n![](./assets/LED-15.png)\n\n11.到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n![](./assets/LED-16.png)\n\n12.接下来是进行连接板子，烧录固件，可参照下图选择版型：\n![](./assets/LED-17.png)\n\n13.以烧录进SRAM为例进行说明，如下图：\n![](./assets/LED-18.png)![](./assets/LED-19.png)\n\n最后运行：\n![](./assets/LED-20.png)\n\n14、结果显示：\n【此处放置LED闪烁动图】\n\n15、解说烧录到FLASH中的方式：\n![](./assets/LED-21.png)![](./assets/LED-22.png)\n\n点灯步骤到此结束。\n\n\n\n> 说明：\n> 01、只测试过下载站下班的版本以及1.9.8版本测试正常，其他版本需用户自行确认。\n> 02、不要使用中文路径-->错误：![](./assets/LED-23.png)\n\n\n## 驱屏教程\n\n例程代码地址：<https://github.com/sipeed/TangNano-1K-examples>\n\n![](./assets/pin-1.png)![](./assets/pin-2.png)![](./assets/pin-3.png)\n\n引脚分布情况：\n\n| PORT | I/O | PIN | DESE |\n| --- | --- | --- | --- |\n| KEY | INPUT | 13 | 47  |\n| LCD_B[0] | INPUT | 19 | --- |\n| LCD_B[1] | OUTPUT | 20 | --- |\n| LCD_B[2] | OUTPUT | 22 | --- |\n| LCD_B[3] | OUTPUT | 23 | --- |\n| LCD_B[4] | OUTPUT | 24 | --- |\n| LCD_CLK | OUTPUT | 8 | --- |\n| LCD_DEN | OUTPUT | 21 | --- |\n| LCD_G[0] | OUTPUT | 28 | --- |\n| LCD_G[1] | OUTPUT | 27 | --- |\n| LCD_G[2] | OUTPUT | 15 | --- |\n| LCD_G[3] | OUTPUT | 16 | --- |\n| LCD_G[4] | OUTPUT | 17 | --- |\n| LCD_G[5] | OUTPUT | 18 | --- |\n| LCD_HYNC | OUTPUT | 33 | --- |\n| LCD_R[0] | OUTPUT | 15 | --- |\n| LCD_R[2] | OUTPUT | 34 | --- |\n| LCD_R[3] | OUTPUT | 31 | --- |\n| LCD_R[4] | OUTPUT | 30 | --- |\n| LCD_R[4] | OUTPUT | 29 | --- |\n| LCD_SYNC | OUTPUT | 32 | --- |\n| LED_B | OUTPUT | 10 | --- |\n| LED_G | OUTPUT | 11 | --- |\n| LED_R | OUTPUT | 9 | --- |\n| XTAL_IN | INPUT | 47 | --- |\n| nRST | INPUT | 44 | --- |\n\n详细代码和工程建立步骤请参照LED点灯例程。"}, "/hardware/en/tang/Tang-Nano-1K/Nano-1k.html": {"title": "Tang Nano 1K", "content": "# Tang Nano 1K\n\n> Edit on 2022.04.06\n\n## Introduction\n\nTang Nano 1K is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) GW1NZ-LV1 FPGA chip. The board is equipped with RGB LCD interface and onboard USG-JTAG debugger, which make it convinent for users to use.\n\n![](./assets/1k-1.jpg)\n![Nano](./assets/1k-2.jpg)\n\n## Parameters\n\n|        item        |     value      |\n| :----------------: | :------------: |\n|        chip        | GW1NZ-LV1 FPGA |\n| logic units(LUT4)  |      1152      |\n|    Register(FF)    |      864       |\n|  Block SRAM(bits)  |      72K       |\n|  Number of B-SRAM  |       4        |\n|  User flash(bits)  |      64K       |\n|   Number of Pll    |       1        |\n| Number of I/O Bank |       2        |\n\n\n![](./assets/1k-pin.png)\n\n## Others\n\n- [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%201K/2_Schematic)\n- [Download center](https://dl.sipeed.com/shareURL/TANG/Nano%201K)\n- [Examples](./../Tang-Nano-Doc/examples.html)\n\n## Support\n\nEmail to support@sipeed.com for technical support and Business cooperation."}, "/hardware/en/modules_spmod/spmod_psram.html": {"title": "SPMOD - PSRAM", "content": "# SPMOD - PSRAM\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_psram/sp_psram.png\" width=\"\" height=\"300\" />\n\nSPMOD_PSRAM(PSRAM模块)采用 IPS6404L-SQ 芯片。\n\n## SPMOD - PSRAM 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI/QPI接口连接\n- Pseudo−SRAM芯片：IPS6404L-SQ是一个容量为64Mbit，SPI/QPI接口，具有出色的可靠性的和响应时间的伪随机动态存储器芯片。\n- 工作频率：104MHz\n- SPI读取响应时间：30.3ns\n- 模块尺寸：15.0\\*10.0\\*13.3mm\n\n###  IPS6404L-SQ 迫真静态随机存储器介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.7V~3.6V |\n| 工作电流 | 10mA |\n| 工作温度 | -30℃~85℃ |\n| 休眠电流 | <250μA |\n| 工作频率 | 104Mhz |\n| SPI读取响应时间 | 30.3ns |\n| 其他操作响应时间 | 9.3ns |\n| 对外接口 | PI/QPI可选，默认SPI |\n\n\n###  SPMOD_PSRAM 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND  | G | 模块电源地 |\n| 2 | CS | I  | SPI片选引脚 |\n| 3 | D1 | I/0 | MISO数据引脚，模块数据输出 |\n| 4 | D3 | I/O | 无功能 (QSPI模式下为IO3) |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | D0 | I/0 | MOSI数据引脚，模块数据输入 (QSPI模式下为IO0) |\n| 8 | D2 | I/O | 无功能 (QSPI模式下为IO2) |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_PSRAM 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_template.html": {"title": "SPMOD - XXX", "content": "# SPMOD - XXX\n\n\n## 概述\n\n<img src=\"../../assets/spmod/sipeed_spmod_xxx.jpg\" alt=\"XXX\" style=\"zoom:60%;\" />\n\nSPMOD_XX(XX 模块)采用XXX。\n\n## SPMOD - XXX 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- XXX\n- 模块尺寸：X.XX\\*XX.X\\*XX.Xmm\n\n### XXXX 介绍\n\nXXXXX\n\n- XXXX\n\n| XXXX  功能特点：|\n| --- |\n| --- |\n| --- |\n| --- |\n\n\n\n\n###  SPMOD_XXX 模块引脚定义：\n\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1        | GND      | G    | XX         |\n| 2        | XXX      | I    | XX         |\n| 3        | MISO     | O    | XX         |\n| 4        | XXX      | I    | XX         |\n| 5        | XXX      | O    | XX         |\n| 6        | SCK      | I    | XX         |\n| 7        | MOSI     | I    | XX         |\n| 8        | VCC      | G    | XX         |\n\n\n## 使用例程\n\n- MaixPy 例程：\n\n> NOTE: 待更新\n\n- STM32 例程：\n\n## 参考设计\n\n\n- SPMOD_XXX 原理图：\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_rfid.html": {"title": "SPMOD - RFID", "content": "# SPMOD - RFID\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_rfid/sp_rfid.png\" style=\"padding-right:100px;\" width=\"\" height=\"300\" />\n\nSPMOD_RFID (NFC 模块)采用复旦微电子 FM17510 高度集成的非接触式（13Mhz）的读写芯片。\n\n## SPMOD - RFID 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD SPI和RFID模块通讯\n- 64Byte收发缓冲FIFO\n- RIFC IC 为 FM17510。\n- 模块尺寸：25.0\\*20.1\\*6.2mm\n\n### FM17510 介绍\n\nFM17510 是一款高度集成的工作在 13.56MHz 下的非接触读写器芯片，支持符合 ISO/IEC 14443 TypeA 协议的非接触读写器模式。\n\n同时提供了低功耗的外部卡片侦测功能，方便电池供电、需要低功耗工作、并且需要实时处理任意 时刻会进入射频场的外部卡片的读写器设备。\n\nFM17510 具有低电压、低功耗、 单端驱动等特点。适用于低功耗、低电压、低成本要求的非接触读。\n\n- FM1750XX 在软硬件层面上兼容 MFRC552，支持工作模式：\n\n\n| FM17510  功能特点：|\n| --- |\n| 支持 ISO/IEC 14443 TypeA 读写器模式 |\n| 读写器模式支持 M1 加密算法 |\n| ISO14443 TYPEA 支持通讯速率 106kbps， 212kbps， 424kbps |\n| 支持 SPI 串行接口，最高 10Mbps |\n| Host 接口独立电源供电，电压范围 2.2~3.6V |\n| 工作温度范围 -40℃ ~ 85℃ |\n| 64Byte 收发缓冲 FIFO |\n| 中断输出模式灵活可配 |\n| 多种低功耗模式 : Soft powerdown模式 , Hard powerdown 模式, Deep powerdown 模式（典型值 1uA） |\n| 支持低功耗外部卡片侦测功能 |\n| 可编程定时器 |\n| 内置振荡电路外接 27.12MHz 晶振 |\n| 宽电压工作范围 2.2V~3.6V |\n| 内置 CRC 协处理器 |\n| 可编程 I/O 引脚|\n\n\n\n###  SPMOD_RFID 模块引脚定义：\n\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 | Note |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，主机输入从机输出 |\n| 4 | NPD | I | 复位/休眠控制引脚 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | IRQ | O | 模块中断输出引脚 |\n\n\n> 当 NPD 引脚为低电平时，模块进入休眠状态；当 NPD 引脚输入一个上升沿时，模块复位。\n\n<img src=\"../../assets/spmod/spmod_rfid/back.png\" height=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_RFID |\n| :-------------: | :-----: |\n|    NC(IO_7)     |   NPD   |\n| SPI:MISO(IO_15) |   SO    |\n| SPI:SS0(IO_20)  |   CS    |\n| SPI:SCK(IO_21)  |   SCK   |\n| SPI:MOSI(IO_8)  |   SI    |\n|  NC(IO_6)    |   IRQ   |\n|  2.2~3.6V    |  3.3V   |\n|  GND       |   GND   |\n\n<img src=\"../../assets/spmod/spmod_rfid/connection.png\" height=\"250\">\n\n\n## 使用例程\n\n* 流程\n  1. 初始化\n  2. 扫描并绑定卡片\n  3. 读写数据\n\n### C 示例：\n\n```c\n\n  fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20;\n  fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21;\n  fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8;\n  fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15;\n\n  gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT);\n\n  // detected card\n  PcdRequest(0x52, type)\n\n  // auth and bind...\n\n  // read or write 16 bytes data from sector 0x11\n  PcdWrite(0x11, w_buf)\n  PcdRead(0x11, &r_buf)\n\n```\n\n### MaixPy 例程：\n\n```python\n\n  # 20: CS_NUM;\n  fm.register(20, fm.fpioa.GPIOHS20, force=True)\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n\n  # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15;\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n          polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso=15)\n\n  # Create an object of the class MFRC522\n  MIFAREReader = MFRC522(spi1, cs)\n\n  # detected and auth, bind...\n\n  # read or write 16 bytes data from sector 0x11\n  MIFAREReader.MFRC522_Write(0x11, data)\n  MIFAREReader.MFRC522_Read(0x11)\n\n```\n### 运行环境\n\n|  语言  | 开发板   | SDK/固件版本                   |\n| :----: | :------- | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_rfid/c_log.png\" height=\"200\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_rfid/maixpy_log.png\" height=\"200\" />\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n  ```c\n    // board_config.h\n    #define RFID_CS_PIN (20)\n    #define RFID_CK_PIN (21)\n    #define RFID_MO_PIN (8)\n    #define RFID_MI_PIN (15)\n\n    #define RFID_CS_HSNUM (20)\n    #define RFID_CK_HSNUM (21)\n    #define RFID_MO_HSNUM (8)\n    #define RFID_MI_HSNUM (15)\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    CS_NUM = const(20)\n    SPI_FREQ_KHZ = const(600)\n    SPI_SCK = const(21)\n    SPI_MOSI = const(8)\n    SPI_MISO = const(15)\n    #############################################\n  ```\n\n\n## 参考设计\n\n\n- SPMOD_RFID 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height=\"250\" />\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_grove.html": {"title": "SPMOD - Grove", "content": "# SPMOD - Grove\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_grove/sp_grove.png\"  width=\"\" height=\"400\" />\n\n\nSPMOD_Grove(GROVE 模块)\n\n## SPMOD - Grove 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 作为拓展版，提供三个标准的Grove接口。方便您将Grove模块与SP-MOD一起使用。\n- 每条数据线均提供外部上拉。\n- 提供高达1000mA的供电能力。\n- 模块尺寸：35.0\\*10.0\\*2.1mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| Grove 连接器 (HY 2.0mm 4P连接器)*3 | 用于连接Grove线缆 |\n| 排针4*2，间距2.54mm *1 | 用于和SP-MOD接口连接 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -30℃ ~ 85℃\n\n## 参考设计\n\n- SPMOD_Grove 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_lora.html": {"title": "SPMOD - LoRa", "content": "# SPMOD - LoRa\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_lora/sp_lora.png\"  width=\"\" height=\"300\" />\n\nSPMOD_LoRa(LoRa 模块)采用 M-XL8 模块。\n\n## SPMOD - LoRa 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用 SP-MOD SPI 和 LoRa 模块通讯\n- LoRa 模块：M-XL8 SX1276 模块是一个 SPI 接口，内置 LoRaTM 调制解调器和可调功率放大器的 LoRa 模块，它具有高性能和可靠性\n- 370MHz-1200MHz, 最大20dBm (100mW)持续发射功率\n- 模块尺寸：25.0\\*10.0\\*4.3mm\n\n### M-XL8 SX1276 LoRa 模块 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作频段 | 370MHz-1200Mhz |\n| 发射功率 | 20dBm（最大） |\n| 通信接口 | SPI |\n| 工作电压 | 1.8V~6.3V |\n| 工作温度 | -40℃ - 80℃ |\n| 天线 | 外置天线，IPEX或焊接 |\n| 接收灵敏度 | -148dbm |\n| RSSI动态范围 | 127dB |\n| 最大链路预算 | 168dB |\n| 收发状态电流 | 9.9mA |\n| 睡眠状态电流 | 50nA |\n| 调制方式 | FSK, GFSK, MSK, GMSK, LoRaTM及OOK |\n> 内置LoRaTM调制解调器，内置CRC，继承+12dBm可调PA+LNA\n\n\n###  SPMOD_lora 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | CS | I/O | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，主机输入从机输出 |\n| 4 | RST | I | 模块复位引脚，低有效 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | IRQ | I | 连接至模块DIO0，可编程决定功能 |\n\n<img src=\"../../assets/spmod/spmod_lora/back.png\" width=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| SPI:MISO(IO_15) |   SO   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|   GPIOH(IO_6)  |  IRQ   |\n|  1.8-6.3V    |  3.3V  |\n|   GND      |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lora//connection.png\" height=\"250\">\n\n## 使用例程\n\n* 流程\n\n  1. 创建 LoRa 对象并初始化\n  2. 发送或者接收数据\n\n### C 示例：\n\n  ```c\n\n  fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0);   // CS: 20\n  fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21\n  fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0);  // MOSI: 8\n  fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1);  // MISO: 15\n\n  fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6\n  fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7\n\n  spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8,\n                 SX1278_LoRa_BW_20_8KHZ, 10);\n\n  if (master == 1)\n  {\n      printf(\"====MASTER====\\r\\n\");\n      ret = sx1278_LoRaEntryTx(&SX1278, 16, 2000);\n  }\n  else\n  {\n      printf(\"====SALAVE====\\r\\n\");\n      ret = sx1278_LoRaEntryRx(&SX1278, 16, 2000);\n  }\n\n  ```\n\n### MaixPy 例程：\n\n  ```python\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # RST\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # CS\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.IN)\n  # The other pins are configured at SPI initialization time\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=100 * 1000,\n               polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso = 15)\n\n  lora = SX127x(spi=spi1, pin_ss=cs)\n  lora.init()\n\n  #######receiver###########\n  receive(lora)\n\n  ########sender###########\n  # send(lora)\n\n\n  ```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n* C\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height=\"250\"/>\n  </center>\n\n* MaixPy\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log.png\" height=\"250\"/>\n  </center>\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX           1\n    #define SPI_SCLK_RATE       600*1000\n    #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0\n\n    #define SPI_LoRa_SX127X_CS_PIN_NUM      20\n    #define SPI_LoRa_SX127X_SCK_PIN_NUM     21\n    #define SPI_LoRa_SX127X_MOSI_PIN_NUM    8\n    #define SPI_LoRa_SX127X_MISO_PIN_NUM    15\n\n    #define SPI_LoRa_SX127X_IRQ_PIN_NUM     6\n    #define SPI_LoRa_SX127X_RST_PIN_NUM     7\n\n    #define SPI_LoRa_SX127X_IQR_GPIO_NUM    6\n    #define SPI_LoRa_SX127X_RST_GPIO_NUM    7\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    LoRa_RST = const(20)\n    LoRa_CS = const(7)\n    LoRa_SPI_SCK = const(21)\n    LoRa_SPI_MOSI = const(8)\n    LoRa_SPI_MISO = const(15)\n    LoRa_SPI_NUM = SPI.SPI1\n    LoRa_SPI_FREQ_KHZ = const(100)\n    ##############################################\n  ```\n\n## 参考设计\n\n- SPMOD_LoRa 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_fpc.html": {"title": "SPMOD - FPC", "content": "# SPMOD - FPC\n\n\n## 概述\n\n![](../../assets/spmod/spmod_fpc/sp_fpc.png)\n\n\nSPMOD_FPC(FPC 转接线模块)\n\n## SPMOD - FPC 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 作为延长套件，轻松的将SP-MOD接口用FPC延长至另一端。您将有更大的自由连接模块构建系统。\n- 提供一对SP-MOD至FPC转换板（一公一母），一条FPC排线, 10P规格。\n- 模块尺寸：15.0\\*10.0\\*3.3mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| SP-MOD至FPC10转换器器(公母一对)\t| 用于将SP-MOD接口和FPC的双向转换 |\n| FPC排线\t| 用于连接两个转换器 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -30℃ ~ 85℃ |\n\n\n## 参考设计\n\n- SPMOD_FPC 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_micarray.html": {"title": "SPMOD - MicArray", "content": "# SPMOD - MicArray\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_micarray/sp_micarray.png\"  width=\"\" height=\"300\" />\n\nSPMOD_MicArray(麦克风阵列模块)采用 RY3708(DC-DC)升压模块\n\n## SPMOD - MicArray 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 将SP-MOD转至FPC，利用FPC与麦克风阵列板相连。\n- 板载3.3V至5V升压DC-DC (RY3708)，轻松驱动麦克风阵列。\n- 利用Grove接口控制麦克风阵列板上的LED。\n- 需要配合SIPEED MICARRAY一起使用。\n- 模块尺寸：35.0\\*10.0\\*11.2mm\n\n\n###  BOOST DC-DC RY3708 模块 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 输出电压 | 5.1V ±0.2V |\n| 外部供电电压 |\t3.3V ±0.2V |\n| 外部供电电流 | 视麦克风阵列板的工作情况而定，通常小于500mA |\n| 工作温度范围 | -40℃ ~ 85℃ |\n> 1.2MHz固定开关频率,内部4A开关电流限制,高温自动切断,集成80mΩ内部功率MOSFET\n\n\n\n###  SPMOD_MicArray 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |模块电源地 |\n| 2 | D2 | I | Mic_D0 |\n| 3 | D3 | I | Mic_D2 |\n| 4 | D0 | I | Mic_WS |\n| 5 | 3V3 | V |模块电源输入正 |\n| 6 | D4 | I | Mic_D1 |\n| 7 | D5 | I | Mic_D3 |\n| 8 | D1 | I | Mic_BCK |\n| 9 | CK | I | LED控制串行时钟引脚 (相当于I2C SCL) |\n| 10 | DA | I |  LED控制串行数据引脚 (相当于I2C SDA) |\n\n<img src=\"\" width=\"300\" />\n\n## 使用例程\n\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()\n#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)\n\nwhile True:\n    imga = mic.get_map()\n    b = mic.get_dir(imga)\n    a = mic.set_led(b,(0,0,255))\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1)\n    a = lcd.display(imgc)\nmic.deinit()\n```\n\n> 需要根据自己接板子上的管脚号来进行修改mic.init()中参数\n\n## 参考设计\n\n- SPMOD_MicArray 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_ethernet.html": {"title": "SPMOD - Ethernet", "content": "# SPMOD - Ethernet\n\n\n## 概述\n\n![](../../assets/spmod/spmod_ethernet/sp_ethernet.png)\n\nSPMOD_Ethernet(网络扩展模块)采用 W5500 以太网主控芯片。\n\n## SPMOD - Ethernet 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口连接\n- 主控芯片：W5500 是一款集成全硬件 TCP/IP 协议栈的嵌入式以太网控制器。\n- SPI 速率理论上可达80MHz\n-\t集成以太网数据链路层（MAC）和10BaseT/100BaseTX 以太网物理层（PHY），支持自动协商（10/100-Based全双工/半双工）\n- 模块尺寸：35.76\\*19.74\\*8.7mm\n\n###  W5500 以太网主控芯片介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.97V~3.63V |\n| 工作电流 | <132mA |\n| 工作温度 | -40℃~85℃ |\n| 休眠电流 | <15mA |\n| SPI 时钟 | 最高80MHz |\n| 全硬件TCP/IP协议栈 | 支持TCP、UDP、ICMP、IPv4、ARP、IGMP、PPPoE协议 |\n\n> 支持8路独立硬件 Socket 同时通信\n,通信效率互不影响\n,内部32K字节收发缓存供TCP/IP包处理\n,支持掉电模式、网络唤醒\n,集成 10BaseT / 100Base-T 以太网 PHY\n,支持自动协商（全/半双工，10M/100M)\n,不支持自动极性变换MDIX\n\n\n###  SPMOD_Ethernet 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |  模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/0 | MISO数据引脚，主机输入从机输出 |\n| 4 | NC | NC | 悬空引脚，无功能 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/0 | MOSI数据引脚，主机输出从机输入 |\n| 8 | NC | NC | 悬空引脚，无功能 |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_Ethernet 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_servo.html": {"title": "SPMOD - SERVO", "content": "# SPMOD - SERVO\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo.png\"  width=\"\" height=\"300\" />\n\nSPMOD_SERVO (SERVO模块)。\n\n## SPMOD - SERVO 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD控制多达6个独立的PWM 9g舵机\n- 舵机接口采用3P 2.54间距排针\n- 独立的外部5V供电，通过USB Type-C或者KF螺钉接线柱，不会从SP-MOD取电\n- 板载电源指示灯，通电状态一目了然\n- 模块尺寸：35.0\\*20\\*1.6mm\n\n| 功能特点： | 参数 |\n| --- | -- |\n| PWM 9g舵机接口*6 | 外接4.8-6V电源的情况下，可连接6个PWM 9g舵机并分别控制 |\n| 外部供电电压 | 4.8V-6.0V |\n| 外部供电电流 | 视模块工作情况而定，通常小于1500mA |\n| 工作温度 | -40℃ ~ 85℃ |\n\n\n###  SPMOD_SERVO 模块引脚定义：\n\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width=\"500\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_SERVO 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_weather.html": {"title": "SPMOD - Weather", "content": "# SPMOD - Weather\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_weather/demo.gif\"  width=\"500\" />\n\nSPMOD - Weather (气象站模块), 集成三轴传感器 QMC7983,与温湿度气压传感器 BME280。\n\n\n## SPMOD - Weather 介绍\n\n特性：\n\n- 采用 **Sipeed-SPMOD** 接口(2*4PIN 2.54mm 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD I2C接口连接\n- 磁性传感器：QMC7983是一个内置灵敏度补偿与NTC的三轴磁性传感器，I2C接口输出（最高频率400KHz），具有出色的动态范围和精度以及超低的功耗\n- 磁感应量程：±30 高斯\n- 温湿度气压传感器：BME280是同时集成了温湿度与气压传感器的数字传感器\n- 模块尺寸：25.0\\*10\\*2.9mm\n\n\n## 传感器特性：\n\n| 磁性传感器 | QMC7983 |\n| --- | --- |\n| 工作电压 | 2.6V~3.6V |\n| 工作电流 | 70uA |\n| 休眠电流 | <1uA |\n| 磁感应量程 | ±30 高斯 |\n| 精度 | 每 LSB 1mG|\n| RMS 噪声 | 2 mG |\n| 对外接口 |I2C，默认地址 0x2C,可通过选择电阻调节 |\n\n-----\n\n| 温湿度气压传感器 | BME280 |\n| --- | --- |\n| 工作电压 | 1.71V~3.6V |\n| 工作电流 | <633uA |\n| 休眠电流 | <5uA |\n| 湿度传感器的关键参数： | --- |\n| 响应时间（𝜏63％）| 1s |\n| 精度公差 | ±3％ 相对湿度 |\n| 磁滞 | < 2％ 相对湿度 |\n| 气压力传感器的关键参数： | --- |\n| RMS 噪声 | 0.2 Pa（等效 到海拔 1.7 厘米） |\n| 偏移温度系数 | ±1.5 Pa/K（等效温度变化 1°C 时，达到海拔 ±12.6 cm1s） |\n| 对外接口 | I2C，默认地址 0x76, 可通过选择电阻调节 |\n\n###  SPMOD_Weather 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明      |\n| -------- | -------- | ---- | ------------- |\n| 1  | GND | G  | 模块电源地 |\n| 2  | NC | NC  | 悬空引脚，无功能 |\n| 3  | NC | NC  | 悬空引脚，无功能 |\n| 4  | SDA | I/O  | 模块I2C串行数据引脚 |\n| 5  | 3V3 | V  | 模块电源输入正 |\n| 6  | NC | NC  | 悬空引脚，无功能 |\n| 7  | NC | NC  | 悬空引脚，无功能 |\n| 8  | SCL | I  | 模块I2C串行时钟引脚 |\n\n<img src=\"../../assets/spmod/spmod_weather/back.png\" width=\"300\" />\n\n## 接线方式\n\n<img src=\"../../assets/spmod/spmod_weather/connection.png\" height=\"250\">\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n## 使用例程\n\n* 流程\n  1. 初始化  weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n  2. 校准(可选)\n  3. 读取距离(多种模式可选)\n\n### C 示例：\n\n```c\n\n    fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6;\n    fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7;\n\n    maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0;\n\n    rslt = qmc_init(); // Magnetic sensor QMC7983 init\n    rslt = bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init\n    stream_sensor_data_normal_mode(&dev); // read and print sensor data\n\n```\n\n### MaixPy 例程：\n\n```python\n\n    i2c_bus = I2C(I2C.I2C0, freq=100*1000, scl=6, sda=7) # scl: io_6, sda: io_7\n\n    weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n\n```\n\n## 运行环境\n\n|  语言  |  开发板  | SDK/固件版本 |\n| :----: | :------: | :--- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1 |\n\n## 运行结果\n\n* C\n\n    <img src=\"../../assets/spmod/spmod_weather/log_c.png\" height=\"200\">\n\n* MaixPy\n\n    <img src=\"../../assets/spmod/spmod_weather/log_py.png\" height=\"200\">\n\n## 参考设计\n\n- SPMOD_Weather 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_eink.html": {"title": "SPMOD - Eink", "content": "# SPMOD - Eink\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD_Eink(墨水屏模块)采用 GDEW0154M09 电子墨水屏。\n\n## SPMOD - Eink 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口与屏幕底板相连\n- 电子墨水屏：GDEW0154M09是一款1.54”，SPI接口控制，拥有24P FPC(0.5mm间距)接口的电子墨水屏。拥有超广可视角。\n- 支持 1 bit 黑/白显示\n- 分辨率：200x200\n- 模块尺寸：35*30*3.8mm\n\n### GDEW0154M09 电子墨水屏介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.3V~3.6V |\n| 工作电流 | 1~3mA |\n| 工作温度范围 | -40℃~85℃ |\n| 休眠电流 | <5uA |\n| 屏幕大小 | 1.54英寸 |\n| 有效显示区域 | 27.6mm |\n| 分辨率 | 200*200 |\n| 色彩 | 1 bit 黑/白显示 |\n| 对外接口 | 24P FPC (0.5mm间距) |\n> 内部集成电路包含门缓冲器、源缓冲器，接口，时序控制逻辑，振荡器，DC-DC，SRAM，LUT，VCOM\n\n\n###  SPMOD_Eink 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | D/C | I | 数据/命令输入切换引脚 |\n| 4 | RES | I |  模块复位引脚，低有效 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I |SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | BSY | O | BUSY状态输出引脚 |\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink_back.png\" height=\"300\" />\n\n- 接线方式：\n\n|  MCU:FUN(IO)   | SP_Eink |\n| :------------: | :-----: |\n|  GPIOHS(IO_7)  |   RES   |\n| SPIOHS(IO_15)  |   D/C   |\n| SPIOHS(IO_20)  |   CS   |\n| SPI:SCK(IO_21) |   SCK   |\n| SPI:MOSI(IO_8) |   SI    |\n|  GPIOHS(IO_6) |   BSY   |\n|  2.3-3.6V   |  3.3V   |\n|   GND    |   GND   |\n\n<img src=\"../../assets/spmod/spmod_eink/connection.png\" height=\"250\">\n\n### 基本指令列表\n\n| 指令  |       功能       |\n| :---: | :--------------: |\n| 0x10  | 开始发送黑白图像 |\n| 0x13  | 开始发送红白图像 |\n| 0x12  |  刷新图像到屏幕  |\n\n*更多指令信息参考[GDEW0154M09.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Spmod_CN/sp_eink)*\n\n## 使用例程\n\n* 流程\n\n  1. 初始化配置\n  2. 创建 Image 并填充\n  3. 发送图像并刷新\n\n### C 示例：\n\n```c\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_Eink_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_Eink_MOSI_PIN_NUM: 8;\n\n  fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM);   // SPI_Eink_DC_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7;\n  fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM);   // SPI_Eink_BL_PIN_NUM: 6;\n\n  gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH);\n  gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH);\n\n  gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP);\n  gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH);\n\n    EPD_DisplayInit(); //EPD init\n\n  //Paint initialization\n  Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation\n  Paint_SelectImage(BlackImage);                                 //Set the virtual canvas data storage location\n\n  Paint_Clear(WHITE); //clear paint\n  Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK);   //5*8\n  Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12\n  Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16\n  Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20\n  Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24\n  EPD_FullDisplay(BlackImage, BlackImage, 0);                  //display image\n\n```\n\n### MaixPy 例程：\n\n```python\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8)\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # SPI_Eink_SS_PIN_NUM: 20;\n  fm.register(15, fm.fpioa.GPIOHS15, force=True) # SPI_Eink_DC_PIN_NUM: 15;\n  fm.register(6, fm.fpioa.GPIOHS6, force=True) # SPI_Eink_BUSY_PIN_NUM: 6;\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # SPI_Eink_RST_PIN_NUM: 7;\n\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  epd = SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION)\n  epd.init()\n\n  img = image.Image()\n  img = img.resize(200, 200)\n  img.draw_line(0, 0, 100, 100)\n\n  epd.display(img)\n\n```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_py.png\" height=\"250\" />\n\n### 移植\n\n修改以下参数即可\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX 1\n    #define SPI_SCLK_RATE 600 * 1000\n    #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0\n\n    #define SPI_Eink_CS_PIN_NUM 20\n    #define SPI_Eink_SCK_PIN_NUM 21\n    #define SPI_Eink_MOSI_PIN_NUM 8\n\n    #define SPI_Eink_DC_PIN_NUM 15\n    #define SPI_Eink_BL_PIN_NUM 6\n    #define SPI_Eink_RST_PIN_NUM 7\n\n    #define SPI_Eink_DC_GPIO_NUM 15\n    #define SPI_Eink_BL_GPIO_NUM 6\n    #define SPI_Eink_RST_GPIO_NUM 7\n  ```\n\n* MaixPy\n\n  ```python\n  ################### config ###################\n    SPI_Eink_NUM = SPI.SPI1\n    SPI_Eink_DC_PIN_NUM = const(15)\n    SPI_Eink_BUSY_PIN_NUM = const(6)\n    SPI_Eink_RST_PIN_NUM = const(7)\n    SPI_Eink_CS_PIN_NUM = const(20)\n    SPI_Eink_SCK_PIN_NUM = const(21)\n    SPI_Eink_MOSI_PIN_NUM = const(8)\n    SPI_Eink_FREQ_KHZ = const(600)\n  ##############################################\n  ```\n\n\n## 参考设计\n\n- SPMOD_Eink 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height=\"250\" />\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_bt.html": {"title": "SPMOD - BT", "content": "# SPMOD - BT\n\n\n## 概述\n\n![](./../../assets/spmod/spmod_bt/sipeed_spmod_BT.jpg)\n\nSPMOD-BT(蓝牙 模块)采用 YDJ-23。\n\n## SPMOD - BT 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用 SP-MOD UART 和蓝牙模块通讯\n- JDY-23蓝牙模块：支持BLE 5.0（兼容 BLE4.0、BLE4.2）。具有UART接口。模块支持AT指令控制。具备超低功耗特性和高可靠性\n- 板载两个状态指示LED，模块状态一目了然\n- 模块尺寸：25.6\\*20.2\\*3.2mm\n\n### JDY-23 蓝牙介绍：\n\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作频段：| 2.4G |\n| 发射功率：| 4db（最大） |\n| 通信接口：| UART |\n| 工作电压：| 1.8V~3.6V |\n| 工作温度：| -40℃ - 80℃ |\n| 天线：| 板载PCB天线 |\n| 接收灵敏度：| -97dbm |\n| 主从支持：| 从机 |\n| 蓝牙版本：| BLE 5.0（兼容 BLE4.0、BLE4.2） |\n| 唤醒状态电流：| 800uA（广播模式） |\n| 浅睡状态电流：| <50uA (广播模式) |\n| 深度睡眠电流：| 9uA （无广播） |\n| 默认串口波特率：| 9600 |\n\n### SPMOD_BT 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | AWK | I/O | 模块休眠唤醒引脚，低有效 |\n| 3 | STA | I/O | 蓝牙连接状态连接，连接成功时输出高电平 |\n| 4 | RX | I | 模块UART数据接受引脚，连接上位机TX |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | --- | NC | 悬空引脚，无功能 |\n| 7 | RST | I/O | 模块复位引脚，低电平有效 |\n| 8 | TX  | O | 模块UART数据发送引脚，连接上位机的RX |\n\n<img src=\"../../assets/spmod/spmod_bt/back.jpg\" height=\"250\" />\n\n- 接线方式：\n\n| MCU:FUN(IO) | SP_BT |\n| :---------: | :---: |\n| UART:TX(IO_7) | RX |\n| USRT:RX(IO_6) | TX |\n| 1.8-3.3V | 3.3V |\n| GND | GND |\n\n<img src=\"../../assets/spmod/spmod_bt/connection.png\" height=\"250\">\n\n### 主要 AT 指令列表：\n\n| 指令 | 描述 |\n| --- | --- |\n|AT+POWR | 显示模块发送功率 |\n|AT+RST\t| 软复位 |\n|AT+MAC\t| 显示MAC 地址 |\n|AT+NAME | 显示广播名 |\n|AT+HOSTEN | 从模式或 IBEACON 工作模式 |\n|AT+IBUUID | IBEACON 的 UUID |\n|AT+DISC | 指令断开连接 |\n|AT+SLEEP | 睡眠 |\n|AT+MTU | 设置模块发送的发包数长 |\n\n*更多AT指令请参考[JDY-23-V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt)*\n\n## 使用例程\n\n* 流程\n  1. 发送 AT 指令\n  2. 接收数据\n  3. 判断是否设置成功\n\n### C 示例：\n\n\n```c\n\n  // set uart rx/tx func to io_6/7\n  fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2);\n  fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2);\n  uart_init(UART_DEVICE_1);\n  uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE);\n\n  //change the name of sp_bt module to MAIXCUBE\n  uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"OK\"))\n  {\n     printk(LOG_COLOR_W \"set name success!\\r\\n\");\n  }\n\n  // get the name of sp_bt module\n  uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"NAME\"))\n  {\n     printk(LOG_COLOR_W \"get name success!\\r\\n\");\n  }\n\n```\n\n### MaixPy 例程：\n\n```python\n    # set uart rx/tx func to io_6/7\n  fm.register(6,fm.fpioa.UART1_RX)\n  fm.register(7,fm.fpioa.UART1_TX)\n  uart = UART(UART.UART1,9600,8,1,0,timeout=1000, read_buf_len=4096)\n\n  #change the name of sp_bt module to MAIXCUBE\n  uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"OK\")\n      if count != 0:\n          uart.write(\"set name success\\r\\n\")\n\n  # get the name of sp_bt module\n  uart.write(\"AT+NAME\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"NAME\")\n      if count != 0:\n          uart.write(\"get name success\\r\\n\")\n```\n\n*注意发送AT指令后一定要加上\\r\\n*\n\n### 运行结果:\n\n  使用[BLE Utility](../../tools/bledebugger.apk)连接设备后进行收发测试结果如下:\n\n  <center class=\"third\">\n      <img src=\"../../assets/spmod/spmod_bt/res.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_bt/res1.png\" height=\"250\"/>\n  </center>\n\n### 运行环境:\n\n  |  语言  |  开发板  | SDK/固件版本                   |\n  | :----: | :------: | :----------------------------- |\n  |   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n  | MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## 参考设计\n\n- SPMOD_BLE 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height=\"250\" />\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_lcd1.14.html": {"title": "SPMOD - LCD 1.14", "content": "# SPMOD - LCD 1.14\n\n\n## 概述\n\n![](../../assets/spmod/spmod_lcd1.14//sp_lcd.png)\n\nSPMOD_LCD1.14(1.14寸 LCD 屏幕模块)采用 ST7735S TFT LCD屏。\n\n## SPMOD - LCD1.14 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 采用常见 LCD 驱动 IC ST7735S(4 线 SPI 通讯)\n- 分辨率：240\\*135\n- 模块尺寸：35.0\\*20.0mm\n\n### ST7735S TFT LCD屏 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.5V~4.8V |\n| 工作电流 | <20mA |\n| 工作温度 | -30℃ ~ 85℃ |\n| 休眠电流 | <0.1mA |\n| 屏幕大小 | 1.14英寸 |\n| 有效显示区域 | 1.7mm * 10.8mm |\n| 分辨率 | 160*80 |\n| 色彩 | 132个RGB通道 |\n| 对外接口 | 8P FPC (0.5mm间距) |\n> 内部集成电路包含DC / DC转换器、可调VCOM生成器、非易失性（NV）存储器（用于存储初始寄存器设置）、显示时钟的振荡器以及时序控制器\n\n\n###  SPMOD_LCD1.14 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | CS | I  | SPI片选引脚 |\n| 3 | D/C | I  | 数据/命令输入切换引脚  |\n| 4 | RST | I  | 模块复位引脚，低有效 |\n| 5 | 3V3 | V  | 模块电源输入正 |\n| 6 | SCK | I  | SPI串行时钟引脚 |\n| 7 | SI | I/O  | MOSI数据引脚，主机输出从机输入 |\n| 8 | BL | I  | 背光控制引脚，低电平关闭背光 |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/back.png\" width=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| GPIOHS15(IO_15) |  D/C   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|  GPIOHS6(IO_6)  |   BL   |\n|  2.5~4.8V   |  3.3V  |\n|  GND   |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//connection.png\" height=\"250\">\n\n## 使用例程\n\n* 流程\n\n  1. 初始化配置\n  2. 创建 Image 并填充\n  3. 发送图像并刷新\n\n### C 示例：\n\n```c\n\n  fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_IPS_LCD_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_IPS_LCD_MOSI_PIN_NUM: 8;\n  fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM);   // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15;\n  fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7;\n  fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM);   // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6;\n\n  // set gpiohs work mode to output mode\n  gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  ips_lcd_init(); // init\n  LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display\n```\n\n### MaixPy 例程：\n\n```python\n\n  # 20: SPI_LCD_CS_PIN_NUM;\n  fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force=True)\n  # 15: SPI_LCD_DC_PIN_NUM;\n  fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force=True)\n  # 6: SPI_LCD_BUSY_PIN_NUM;\n  fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force=True)\n  # 7: SPI_LCD_RST_PIN_NUM;\n  fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force=True)\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM;\n  spi1 = SPI(SPI_LCD_NUM, mode=SPI.MODE_MASTER, baudrate=SPI_LCD_FREQ_KHZ * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=SPI_LCD_SCK_PIN_NUM, mosi=SPI_LCD_MOSI_PIN_NUM)\n\n  ips = SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE)\n\n  # create an 'image' and fill it\n  img = image.Image()\n  img.draw_rectangle(80, 80, 30, 30)\n\n  # display\n  ips.display(img)\n\n\n```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt=\"sp_lcd1.14_py\" height=\"250\" />\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n```c\n  // board_config.h\n  #define SPI_INDEX           1\n  #define SPI_SCLK_RATE       600*1000\n  #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0\n\n  #define SPI_IPS_LCD_CS_PIN_NUM      20\n  #define SPI_IPS_LCD_SCK_PIN_NUM     21\n  #define SPI_IPS_LCD_MOSI_PIN_NUM    8\n\n  #define SPI_IPS_LCD_DC_PIN_NUM     15\n  #define SPI_IPS_LCD_BL_PIN_NUM      6\n  #define SPI_IPS_LCD_RST_PIN_NUM     7\n\n  #define SPI_IPS_LCD_DC_GPIO_NUM     15\n  #define SPI_IPS_LCD_BL_GPIO_NUM     6\n  #define SPI_IPS_LCD_RST_GPIO_NUM    7\n\n  #define USE_HORIZONTAL 3    // 0/1 is horizontal, and 2/3 is vertical.\n```\n\n* Maixpy\n\n```python\n  ################### config ###################\n  SPI_LCD_NUM = SPI.SPI1\n  SPI_LCD_DC_PIN_NUM = const(15)\n  SPI_LCD_BUSY_PIN_NUM = const(6)\n  SPI_LCD_RST_PIN_NUM = const(7)\n  SPI_LCD_CS_PIN_NUM = const(20)\n  SPI_LCD_SCK_PIN_NUM = const(21)\n  SPI_LCD_MOSI_PIN_NUM = const(8)\n  SPI_LCD_FREQ_KHZ = const(600)\n  ##############################################\n```\n\n\n## 参考设计\n\n- SPMOD_LCD1.14 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height=\"250\" />\n\n\n-----\n\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_tof.html": {"title": "SPMOD - TOF", "content": "# SPMOD - TOF\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_tof/sp_tof.png\" style=\"padding-right:100px;\" width=\"\" height=\"300\" />\n\nSPMOD_TOF(TOF 模块) 采用 VL53L0X 模块。\n\n## SPMOD - TOF 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD I2C 和 TOF 模块通讯\n- ToF模块：VL53L0X模块是一个I2C接口，长距离单点飞行时间测定（ToF）模块，它具有高性能和可靠性\n- 最远测量距离4000mm，最高50Hz的测量刷新率。典型前方测量角度27°\n- 可选配红色激光器瞄准头，通过XSHUT引脚控制激光器开关\n- 模块尺寸：25.0\\*10\\*3.15mm\n\n### VL53L0X 介绍\n\n| VL53L0X | 功能特性：|\n| --- | --- |\n| 测量距离 | 最大 4000mm(4m) |\n| 工作刷新率 | 50Hz |\n| 测量角度（正面）| 27°|\n| 通信接口 | I2C |\n| 工作电压 | 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) |\n| 工作状态电流 | 18mA (选用红色激光时： 20mA) |\n| 工作温度 | -40℃ - 80℃ |\n| 睡眠状态电流 | 5uA |\n\n\n\n###  SPMOD_TOF 模块引脚定义：\n\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| --- | --- | --- | --- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | IRQ | I  | 模块中断输入引脚，连接至 VL53L0X 的GPIO1 |\n| 3 | NC  | NC | 悬空引脚，无功能 |\n| 4 | SDA | I/O | 模块 I2C 串行数据引脚 |\n| 5 | 3V3 | V  | 模块电源输入正 |\n| 6 | NC  | NC | 悬空引脚，无功能 |\n| 7 | SHT | I  | 模块休眠&激光头控制引脚 #注释 |\n| 8 | SCL | I  | 模块 I2C 串行时钟引脚 |\n\n> SHT 低电平时，模块休眠 &激光头关闭\n\n<img src=\"../../assets/spmod/spmod_tof/back.png\" height=\"300\" />\n\n- 接线方式:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_tof/connection.png\" height=\"250\">\n\n\n## 使用例程\n\n* 流程\n  1. 初始化\n  2. 校准(可选)\n  3. 读取距离(多种模式可选)\n\n### C 示例：\n\n```c\n\n  //set io mux\n    fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT);\n\n    gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT);\n\n    //i2c init\n    maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000);\n\n    while (vl53l0x_init(&vl53l0x_dev)) {\n          printf(\"VL53L0X init error!!!\\r\\n\");\n          msleep(500);\n    }\n\n    printf(\"VL53L0X init success!\\r\\n\");\n\n    // adjusting\n    printf(\"VL53L0X adjusting\\r\\n\");\n    vl53l0x_calibration_test(&vl53l0x_dev);\n\n    // get distance\n    printf(\"VL53L0X start work\\r\\n\");\n    vl53l0x_general_test(&vl53l0x_dev);\n\n```\n\n### MaixPy 例程：\n\n```python\n\n    fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force=True)\n    XSHUT = GPIO(GPIO.GPIOHS0, GPIO.OUT)\n\n    i2c = I2C(VL53L0X_I2C_NUM, freq=VL53L0X_FREQ, scl=VL53L0X_SCL, sda=VL53L0X_SDA)\n\n    # create obj and read distance\n\t  tof = VL53L0X(i2c)\n\t  while True:\n      mm = tof.read()\n      utime.sleep_ms(100)\n      print(mm)\n\n```\n### 运行环境\n\n|  语言  | 开发板   | SDK/固件版本 |\n| :----: | :------- | :--- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1 |\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_tof/log_c.png\" height=\"200\" />\n\n* MaixPy\n\n  - [None]\n## 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n```c\n  // board_config.h\n  #define VL53L0X_I2C_DEVICE 0 // i2c device number\n  #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence\n  #define VL53L0X_SCL 6 // scl\n  #define VL53L0X_SDA 7 // sda\n  #define VL53L0X_SHT 8 // sht\n```\n\n* MaixPy\n\n```python\n  ################### config ###################\n  VL53L0X_I2C_NUM = const(I2C.I2C0)\n  VL53L0X_FREQ = const(100000)\n  VL53L0X_SCL = const(6)\n  VL53L0X_SDA = const(7)\n  VL53L0X_SHT = const(8)\n  ##############################################\n```\n\n\n## 参考设计\n\n- SPMOD_TOF 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_joystick.html": {"title": "SPMOD - JoyStick", "content": "# SPMOD - JoyStick\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_joystick/sp_joystick.png\"  width=\"\" height=\"300\" />\n\nSPMOD_JoyStick (JoyStick模块)。\n\n## SPMOD - JoyStick 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口连接\n- 可通过外部适配器单独连接7.2V~9V DC，为手柄的振动马达供电\n- 内置升压电路，轻松驱动手柄\n- PSX/PS2兼容\n- 模块尺寸：35.0\\*20.0\\*13.3mm\n\n\n###  SPMOD_JoyStick 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，手柄信号输出 |\n| 4 | NC | NC | 悬空引脚，无功能 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，手柄信号输入 |\n| 8 | ACK | O | 确认信号输出引脚 |\n\n<img src=\"\" width=\"500\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_JoyStick 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | 链接 |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/modules_spmod/spmod_extender.html": {"title": "SPMOD - Extender", "content": "# SPMOD - Extender\n\n\n## 概述\n\n![](../../assets/spmod/spmod_extender/sp_extender.png)\n\n\nSPMOD_Extender(8PIN扩展模块)\n\n## SPMOD - Extender 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-Extender将SP-MOD一分为四，包含三个相连的2线接口（连接至SP-MOD的D0和D1）和一个单独的四线接口（连接至SP-MOD的D2-D5）\n- 模块尺寸：35.0\\*20.0\\*1.6mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 两线SP-MOD接口*3 | 连接至SP-MOD的D0和D1，可用作UART (最多连接一个设备)或I2C（最多连接三个设备）或者两个独立的GPIO |\n| 四线SP-MOD接口 | 连接至SP-MOD的D2-D5，通常用作SPI接口，也可用作四个杜立的GPIO接口 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -40℃ ~ 85℃\n\n\n\n## 参考设计\n\n- SPMOD_Extender 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/en/lichee/ZeroPlus/ZeroPlus.html": {"title": "Lichee ZeroPlus", "content": "# Lichee ZeroPlus\n\n## 概述\nLichee Zero Plus是基于全志科技的S3 (ARM Cortex-A7内核)的高性能CPU芯片设计的高集成度核心板。\n使用双NGFF金手指设计，引出134pin引脚，方便开发者拓展使用。S3是V3s的升级版，1.2GHz主频，内置128MB ddr3内存，引脚相对V3s全很多。\n支持MIPI摄像头，普通并口摄像头，RGB屏幕，内置ePHY.\n\n<img src=\"./../assets/Zero-Plus/Plus_1.jpg\" width=400>\n\n## 参数\n### 芯片\nS3芯片架构\n![](./../assets/Zero-Plus/Plus_2.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | • ARM® Cortex™-A7 @1.2GHz |\n| GPU | • Supports 1080p@60fps or 2-channel 1080p@30fps H.264 video encoding, supports 8M JPEG encoding <br>• Supports H.264 1080p@60fps decoding, MJPEG 1080@30fps decoding |\n| ISP | • Integrated ISP up to 8M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction |\n| Video Input/Output | • Supports 8/10/12-bit parallel CSI and 4-lane MIPI CSI2<br>• Supports BT1120 input<br>• Supports up to 8M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution<br>• Supports Allwinner's next-gen SmartColor display technology for better visual effects for images & videos |\n| Memory | • SIP 16-bit DDR3, up to 1333Mbp |\n| Audio Codec | • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports 3 MIC-in, a stereo Line-in, a headphone output and a stereo line-out output |\n| Security Engine | • Supports AES/DES |\n| Connectivity | • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY |\n\n### 核心板\n| 项目 | 参数 |\n| --- | --- |\n| CPU | ARM Cortex-A7 处理器(1.2Ghz)， VFPv4 浮点处理器 |\n| 内存 | 芯片内置 128Mbyte DDR3 内存 (时钟频率最高 672MHz) |\n| 存储 |可选 SPI Nor Flash(8/16/32MB)，SD Nand(128/512MB)，eMMC(4/8GB)<br>Micro SD 卡 |\n| 电源 | 5V 电源输入， 3 路 DCDC 稳压输出 (1.2,1.5,3.3) |\n| 复位 | 板载复位芯片 |\n| 晶振 | 板载 24M 主晶振， 32.768KHz RTC 晶振 |\n| 接口 | NGFF M.2 B KEY x 2 共引出 67x2=134pin<br>板载 micro usb 接口和系统串口，可供下载固件及调试 |\n| 系统支持 | 支持最新 Linux 5.2 mainline kernel, Linux 3.4 bsp kernel<br>支持 debian 发行版 |\n\n## 使用教程\n\n[Lichee Zero](/soft/Lichee/zh/Zero-Doc/Start/intro_cn.html)\n\n## 产品技术支持\n\nLichee ZeroPlus 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/en/lichee/RV/86_panel.html": {"title": "Lichee 86 Panel", "content": "# Lichee 86 Panel\n\n## Introduction\n\nLichee RV-86 Panel is a development kit designed for smart home central control sence. it's equipped with LicheeRV Core board (ALlwinner D1 chip with 512MB ddr3), 4-inch touch IPS screen, Wifi+BT module, Ethernet, two digital silicon mic and GPIO expansion interface. For software it can use Linux OS (Openwrt or Debian) and Ali WATF(WAFT is a high-performance application research framework for aiot based on WebAssembly and their own rendering engine)\n\n![](./../assets/RV/86_panel_1.png)\n\n![](./../assets/RV/86_2.png)\n\n## Parameters\n| Item                                                  | value                                                                                                                                                                                                                                      |\n| ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Core board                                            | Sipeed LicheeRV Nezha compute bar                                                                                                                                                                                                          |\n| Display                                               | Default Bundle for 4-inch 480\\*480 standard definition IPS capacitive touch screen <br> Optional upgrade to 4-inch 720\\*720 high definition IPS capacitive touch screen<br>Reserver 8-inch 1280\\*800 IPS capacitive touch screen interface |\n| Audio                                                 | Onboard 1W mini speaker, Dual digital silicon microphone                                                                                                                                                                                   |\n| Network                                               | XR829 WIFI+BT wireless module <br>RTL8201F 100M Ethernet <br> Reserved RJ45 ethernet pad                                                                                                                                                   |\n| USB                                                   | USB-C OTG interface on core board <br> Reserved USB-C HOST and USB-uart interface                                                                                                                                                          |\n| Power                                                 | Support 5V,12V power supply (Onboard DC-DC )                                                                                                                                                                                               |\n| Extension pins                                        | Double 2x8Pin 2.54mm Pin headers，Reserved FPCIO                                                                                                                                                                                           |\n| Shell                                                 | Optional 86 panel 3D print shell ， drawings are open source                                                                                                                                                                               |\n| Size                                                  | 86x86mm                                                                                                                                                                                                                                    |\n| Usage situations                                      | Smart home center control unit，WAFT UI evaluation                                                                                                                                                                                         |\n| Development framework                                 | Support WAFT (WebAssembly Framework For Things）runtime                                                                                                                                                                                    |\n| Operating system                                      | Support OpenWRT and Debian                                                                                                                                                                                                                 |\n| [Development resource](./user.html#bsp-sdk-develpoment) | offer docker development image of the original SDK                                                                                                                                                                                         |\n\n![](./../assets/RV/86_pin.png)\n\n## Related links\n\n[Download center](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel)\n\n[Burn image](./flash.html)\n\n[Basic usage](./user.html)\n\n## Support\n\nEmail to support@sipeed.com for business cooperation or leave messge in this page for help."}, "/hardware/en/lichee/RV/Dock.html": {"title": "Lichee Dock", "content": "# Lichee Dock\n\n> Edit on 2022.04.22\n\n## Introduction\n\nLichee RV Dock is a RISC-V Linux development kits with high integration, small size and **affordable price** designed for opensource developer. It's equipped with **HDMI interface** and it supports many screen by its screen convert board. It's also equipped with many peripherals, including a UAB-A port, **2.4G Wifi-BT module**, an analog microphone and a speaker jack interface. These means user can use it to develop or test linux application just by display device and input device like mouse and keyboard, which shortens developer's research and development time. \n\n![Outlook](./../assets/RV/RV-Dock.jpg)\n\n## Parameters\n\n| Item | Value |\n| --- | --- |\n|Core board|Nezha compute bar |\n| Display port | Onboard HDMI output interface; <br>RGB and MIPI screen interface connect to 2x20 Pins Header and <br> (We provide this screen converter board t)|\n| Network | ONboard 2.4G WIFI+BT module, 2.4G Patch antenna and IPEX connector |\n| USB | Onboard USB type-A host |\n| Audio | On-board speaker driver circuit (supports 4Ω 3W speakers) and speaker; connector<br>On-board electret microphone circuit |\n| Memory | Reserved a SOP8 pad, and the connection protocol is the SPI; <br> Consult for the customer service staff for more information |\n| Extra connector | Onborad 30P FPC connector，supports our Mic Array R6 microphone array |\n| GPIO connector | Reserved 2x20P 2.54mm pads(Default welding pin headers) |\n| LED | An onboard WS2812 RGB LED<br> An onboard power LED |\n| KEY | An onboard reset key<br>An user's key |\n\n\n## Download center\n\n[Download center](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV-Dock)\n\n## Support\n\nEmail to support@sipeed.com for business cooperation or leave messge in this page for help."}, "/hardware/en/lichee/RV/flash.html": {"title": "Lichee RV system image", "content": "# Lichee RV system image\n\nThere are two system images for Lichee RV and they are tina and debian.\nTina is a small linux image while Debian is a desktop image.\n\n## Prepare\n\n1. Lichee RV Core board\n2. TF card (It's suggested to use tf card provided by sipeed beacuse other card might fail to burn or fail to boot system)\n3. Burn tool [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool)\n4. System image\n   - [Tina](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/image) \n   - Debian: Download from [mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n| Image name    | Meaning                                                                                                                    | Note |\n| ------------- | -------------------------------------------------------------------------------------------------------------------------- | ---- |\n| LicheeRV      | RISCV D1 Linux image only for sipeed                                                                                  | ---  |\n| Tina          | Tina openwrt system image                                                                                                 | ---  |\n| debian        | Riscv debian system image                                                                                                 | ---  |\n| 86panel       | [taobao 86panel](https://item.taobao.com/item.htm?spm=a230r.1.14.18.30b534187YMsRx&id=663345415205&ns=1&abbucket=7#detail) | ---  |\n| dock          | [taobao dock](https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-21410578028.20.35765d54K9XCOt&id=666274331852)        | ---  |\n| hdmi          | Display to HDMI screen                                                                                         |      |\n| 800480 / 480P | Display to LCD screen，it fits resolution 800*480 or 480P (640X480)                                                    |      |\n| 8723ds        | This image supports 8723ds WIFI / BLE driver                                                                                    |      |\n| xr829         | This image supports xr829 WIFI / BLE driver                                                                                     |      |\n| waft          | Whether waft is built in  image                                                                                                     |      |\n\n\n## Flash image\n\nOpen PhoenixCard, and choose the target firmware, insert tf card into card reader then connect with the computer.\n\n![](./../assets/RV/flash.png)\n\n> It's not sure each card can successed be burned, if you can't do this we suggest you buy image card we provide\n\nWaiting for finishing burning, It will be faster if flashing Tina OS and it will take about 10 minutes if flashing Debian \n\n## Run OS\nThe username and passward are as follows:\n\n> Tina   OS username：root   password：tina\n\n> Debian OS username：sipeed password：licheepi\n\nInsert tf card, and we can see the startup information in the serial port tool\n\n- Debian startup message\n    ```shell\n    [270]HELLO! BOOT0 is starting!\n    [273]BOOT0 commit : 27369ab\n\n    OpenSBI v0.6\n       ____                    _____ ____ _____\n      / __ \\                  / ____|  _ \\_   _|\n     | |  | |_ __   ___ _ __ | (___ | |_) || |\n     | |  | | '_ \\ / _ \\ '_ \\ \\___ \\|  _ < | |\n     | |__| | |_) |  __/ | | |____) | |_) || |_\n      \\____/| .__/ \\___|_| |_|_____/|____/_____|\n            | |\n            |_|\n    ```\n\n- Tina startup message\n```shell\nBusyBox v1.27.2 () built-in shell (ash)\n\n    __  ___     _        __   _   \n   /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n  / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n /_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\ \n ----------------------------------------------\n Maix Linux (Neptune, 5C1C9C53)\n ----------------------------------------------\n```\n\nIf you use debian OS, the username is `sipeed` and password is `licheepi`\n\n## Others\n\n### Burn wrong image \n \nIf you burn wrong image that is not corrsponding with your board, just use boot_package_XXX.fex (can be download here https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/board ) file to recover the previous file.\n\nThe recover command：\n> sudo dd if=boot_package_XXX.fex of=/dev/sdX bs=1K seek=16400\n\n### Not work\n\nIf your board doesn't work, make sure you choose boot card mode in burning mode, and please reburn."}, "/hardware/en/lichee/RV/debian_img_apt.html": {"title": "Problems", "content": "---\ntitle: Problems\nkeywords: debian, Rv, Problam, apt, img, sipeed\n---\n\n## Apt problem\n\n- When execute apt command in debian system it may show error as follows\n  \n> GPG error: http://ftp.ports.debian.org/debian-ports sid InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY E852514F5DF312F6\n\nThis means built-in key expires and need updating manually, here are two ways to download key.\n\n - Doanload from web page：https://packages.debian.org/sid/all/debian-ports-archive-keyring/download\n - wget : `wget http://ftp.cn.debian.org/debian/pool/main/d/debian-ports-archive-keyring/debian-ports-archive-keyring_2022.02.15_all.deb`\n  \nCopy doanloaded key (usr scp or lrzsz tool) into LicheeRV board, then run following command to update key:\n\n> sudo dpkg -i debian-ports-archive-keyring_2022.02.15_all.deb\n\nThen run `sudo apt-get update` to update apt."}, "/hardware/en/lichee/RV/user.html": {"title": "Start", "content": "# Start\n\n> Edit on 2022.04.21\n\nNote:\nIf you use debian, it will take about 2 minutes (this depends on the tf card) to start system.\nThen using command `Alt+F2` In graphical interface, then input `termit` to open the terminal.\nDo the following steps to stop kernel continue printing message when you use serial port or remote connection\n\n- Login in system,the user name is `sipeed` and the password is `licheepi`\n- Edit `/etc/rsyslog.conf` by root and change `*.emerg` into `#*.emerg` in this file\n- restart rsyslog service by this command `/etc/init.d/rsyslog restart`\n  \nThen you can use this system with pleasure.\n\n\n## Blink\n\nWe can start blink an led after running OS.\n- Note : This blink turtial is not fit for  `86-panel` because the corresponding pin in `86-panel` is connected to the peripheral, you can use the core board to do this experiment.  \n\nThere is an LED beside the screw fixing pad on the core board, This can be found in this file:\nhttps://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK/5_Dimensions\n\nAnd from the [schematic]{https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK/2_Schematic} we can know the led connects with PC1 pin, and we can figure out its siginal number is 2*32+1=65. We can also view IO multiplexing table\n\n```bash\ncat /sys/kernel/debug/pinctrl/2000000.pinctrl/pinmux-pins\n...\npin 64 (PC0): device 2008000.ledc function ledc group PC0\npin 65 (PC1): UNCLAIMED\npin 66 (PC2): UNCLAIMED\npin 67 (PC3): UNCLAIMED\npin 68 (PC4): UNCLAIMED\npin 69 (PC5): UNCLAIMED\npin 70 (PC6): UNCLAIMED\npin 71 (PC7): UNCLAIMED\n\n```\n\nFirst we should figure out this led GPIO：\n\n```\necho 65 > /sys/class/gpio/export\ncd /sys/class/gpio/gpio65\n```\n\nThen we change this IO into output mode，which means control its voltage level ：\n\n```\necho out>direction\necho 1 > value  #LED ON\necho 0 > value  #LED OFF\n```\n\nUp to now we have succeeded blinking on RISC-V 64 D1.\n\nYou can also perform fancy lighting on the serial RGB LED ws2812:\n\n```\ncd /sys/class/leds/\necho 255 > /sys/class/leds/sunxi_led0r/brightness;echo 0 > /sys/class/leds/sunxi_led0g/brightness;echo 0 > /sys/class/leds/sunxi_led0b/brightness;\necho 0 > /sys/class/leds/sunxi_led0r/brightness;echo 255 > /sys/class/leds/sunxi_led0g/brightness;echo 0 > /sys/class/leds/sunxi_led0b/brightness;\necho 0 > /sys/class/leds/sunxi_led0r/brightness;echo 0 > /sys/class/leds/sunxi_led0g/brightness;echo 255 > /sys/class/leds/sunxi_led0b/brightness;\n```\n\n## Peripheral verification\n\n> Note:In the current Debian system, bluetooth is unavailable！！\n\n### Audio\n\nCheck Audio device\n\n```\nroot@MaixLinux:~# arecord -l\n**** List of CAPTURE Hardware Devices ****\ncard 0: audiocodec [audiocodec], device 0: SUNXI-CODEC 2030000.codec-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 1: snddmic [snddmic], device 0: 2031000.dmic-dmic-hifi dmic-hifi-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 2: sndhdmi [sndhdmi], device 0: 2034000.daudio-audiohdmi-dai 20340a4.hdmiaudio-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\n\n```\n\nCheck play device\n\n```\nroot@MaixLinux:~# aplay -l\n**** List of PLAYBACK Hardware Devices ****\ncard 0: audiocodec [audiocodec], device 0: SUNXI-CODEC 2030000.codec-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 2: sndhdmi [sndhdmi], device 0: 2034000.daudio-audiohdmi-dai 20340a4.hdmiaudio-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\n\n```\n\nRecording and playback test:\n\n```\narecord -D hw:1,0 -f S16_LE -t wav -d 3 t.wav \naplay -D hw:0,0 t.wav\n```\n\nBesides, you can Adjust volume by alsamixer application\n\n### USB Function\n\nDefault kernel supports the driver of external USB flash disk. After inserting the USB flash disk, you can use `fdisk -l` command to see the new /dev/sda device\n\nIf the USB flash disk is not formatted, you can use mkfs.vfat command to format the USB disk, and then mount it.\n\nThe /dev/mmcblk0p8 partition in the default Tina firmware can be mounted after formatting USB disk in the above way to increase the available space\n\n### Wired network\n\nLicheeRV-86 Panel supports 100M network.\n\nAfter Inserting network cable we can use following commands to connect network\n\n```\nifconfig eth0 up\nudhcpc -ieth0\n```\n\n### Wireless network\n\n- **Tina OS**\n\nWe can connect the core board by TypeC port and use adb to control this OS, or use uart to connct this board is ok too.\n  \n  LicheeRV bottom board is equipped with XR829 or RTL8723BS wifi module, can connect network by following commands:\n\n  Config wifi information:\n\n  ```bash\n  vim /etc/wifi/wpa_supplicant.conf\n  network={  \n      ssid=\"WiFi_name\"  \n      psk=\"WiFi_password\"  \n  } \n  ```\n\n  Then restart board, use these two commands `ifconfig wlan0 up`; `udhcpc -iwlan0`  to connect corresponding wifi.\n  Then we can use ssh to remote login or use scp to transfer files by network.\n\n- **debian OS**\n\n\n\n  Click System menu -> Preferenes -> Connman Settings，Enable Network Settings ，check whether the interface in the network property is wlan0. Double click the network name and input WiFi password to connect wifi.\n\n  ![](./../assets/RV/wifi-1.jpg)\n\n  After succeeding connecting network, we can see the network IP\n\n  ![](./../assets/RV/wifi-2.jpg)\n\n### Display and touch\n\nLicheeRV supports following screen：\n\n- SPI screen\t\t  1.14 inch(TODO)\n- RGB screen\t\t  4.3 inch 480x272；5.0 inch 800x480；\n- RGB+SPI screen  4.0 inch 480x480(st7701s); 4.0 inch 720x720(nv3052c)\n- MIPI screen   \t8.0 inch 1280x720(ILI9881C)\n\n\nWe can use following command to test screen in **Tina OS** 下可以通过以下指令测试屏幕显示：\n\n```bash\n  fbviewer xxx.jpg\n```\n\nIf you need to debug screen driver, just use following command to see information of screen driver\n\n```\ncat /sys/class/disp/disp/attr/sys\n\nscreen 0:\nde_rate 300000000 hz, ref_fps:60\nmgr0: 480x480 fmt[rgb] cs[0x204] range[full] eotf[0x4] bits[8bits] err[0] force_sync[0] unblank direct_show[false] iommu[1]\ndmabuf: cache[0] cache max[0] umap skip[0] overflow[0]\n\tlcd output\tbacklight( 50)\tfps:59.5\tesd level(0)\tfreq(60)\tpos(0)\treset(0)\t 480x 480\n\terr:0\tskip:184\tirq:230715\tvsync:0\tvsync_skip:0\n   BUF    enable ch[1] lyr[0] z[16] prem[N] a[globl 255] fmt[  0] fb[ 480, 480; 480, 480; 480, 480] crop[   0,   0, 480, 480] frame[   0,   0, 480, 480] addr[ffe00000,       0,       0] flags[0x       0] trd[0,0]\n\n```\n\nScreen Color Bar test：echo 1 > /sys/class/disp/disp/attr/colorbar\n\nIf you buy 86 panel suit, you can use `ts_test` for touching test\n\n> There is a bug on touching driver, that is, After the test, the cursor do not move, but the terminal will still print information\n\n### Play video\n\nNow we can play BadApple On licheeRV [Click me to download video](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/MP4)\n\nFFmpeg has been built in Tina image, which is a powerful multimedia library, can be used for screen recording or play video\n\nRecording command：`ffmpeg -f fbdev -framerate 10 -i /dev/fb0 record.avi`\n\nPlay commamd (They are play audio from speaker and HDMI)\n\n```\nffmpeg -i /mnt/UDISK/badapple_640480_xvid.mp4 -pix_fmt bgra -f fbdev /dev/fb0 -f alsa hw:0,0  ## speaker\nffmpeg -i /mnt/UDISK/badapple_640480_xvid.mp4 -pix_fmt bgra -f fbdev /dev/fb0 -f alsa hw:2,0  ## hdmi \n```\n\nBecause of it's software decoding by cpu, so the test of screen resolution supports 750x540 Maximum, and it will run slower if play higher screen resolution.\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=209723771&bvid=BV1xa411r7PP&cid=457742249&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n### Microphone array\n\nIf you use Dock board, you can use microphone array to perform sound field imaging display:\n\nRun `sudo ./micarr_0609` in terminal.\n\nIf you need redevelop about microphone array, just contact support@sipeed.com\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=849734125&bvid=BV1HL4y1H7nv&cid=457750392&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## Debian image experience\n\nFor people who only have used desktop system, it's suggested to use debian.\nAnd it can be download form [Mega netdisk](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\nLicheeRV_Debian_86_480p is 480p 86 panel debian image.\n\nLicheeRV_Debian_hdmi is debian image for dock hdmi output\n\nOther board or screen, use corresponding fex file to reconfig.\n\nAfter burning system, insert card, wait about 2 minutes then the screen will display\n\n\n![attachmentId-2734](https://bbs.sipeed.com/storage/attachments/2021/12/09/z8QlbfdC11GLaT5dis9epd1DdfbRPpRsa6XEi2AU.png)\n\nUsername `sipeed` and password `licheepi`. Need extra mouse and keyboard.\n\n![attachmentId-2735](https://bbs.sipeed.com/storage/attachments/2021/12/09/2uBMvAjSuX8VLL3kVVKmBCUIxqOPJgVyYsl7MTge.png)\n\nUsing `Alt+F2` then input termit to open terminal.\n\nThen we can de some basic operations.\n\n![attachmentId-2736](https://bbs.sipeed.com/storage/attachments/2021/12/09/jtKDz9H3AvMrfmLCSwQW3QR8sRXQEDjAJFMG9KaI.png)\n\nLet's try to compile and run hello world\n\n![attachmentId-2737](https://bbs.sipeed.com/storage/attachments/2021/12/09/vuluuJDdW5sJm2dSy60HmqUvpYJ6YJMuIinX3Y0N.png)\n\nWe also provide 720P 720p high-definition screen, you can try this if you have enough money~\n\n![attachmentId-2738](https://bbs.sipeed.com/storage/attachments/2021/12/09/77KuMcmppgJn44doDQMYBBi8pPDRdKwkXm9HPit6.png)\n\n![attachmentId-2739](https://bbs.sipeed.com/storage/attachments/2021/12/09/E1qugpwslyoHbknndO5KDqv3tjclx3GUWM5QDzN4.png)\n\n## BSP SDK\n\nTo make it easy for users to develop custom function, Sipeed provide bsp docker image of LicheeRV.\n\nDownload link:[Mege netdisk](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\nAfter finishing downloading docker file, decompress into tar file.\n\n```bash\ngzip -d licheerv_d1_compile.tar.gz                                #Decompress into tar file\ndocker import licheerv_d1_compile.tar licheerv_d1_compile:latest  #import docker image\n```\n\nAfter succeed running it's suggessted to relogin and username `nihao` password `sipeed123`\n\n```bash\nsudo docker run -it licheerv_d1_compile:latest /bin/bash # Start D1 compile docker image in interactive mode\nlogin # change user\n```\n\nYou can use following commands to finish compiling.\n\n```bash\ncd ~/sdk/tina-d1-open_new/\nsource build/envsetup.sh\nlunch   # choose 1\nmake menuconfig  # untick alsa-plugin, otherwise it will fail to compile\nmake -j8  \npack  \n```\n\nThere are some new dts file in this SDK, you can use them if necessary\nTher are in device/config/chips/d1/configs/nezha/board_xxx.dts\n\nOther SDK developing manual can refer to relevant documents on the Allwinner development platform\nhttps://open.allwinnertech.com/\n\nIf you need other SDK please visit allwinner official website: https://d1.docs.aw-ol.com/en\n\n## WAFT developer's guide\n\nTODO"}, "/hardware/en/lichee/RV/RV.html": {"title": "Lichee RV - Nezha CM", "content": "# Lichee RV - Nezha CM\n\n> Edit on 2022.04.20\n\n## 概述\nLichee RV - Nezha CM is a compute module with modular design, it's equipped with Allwinner D1 chip (Based on T-Head XuanTie C906 core), 521MB ddr3 ram, and it can boot from TF card or SDNAND, it also uses two sets of M.2B - KEY 67 Pins connecting finger to pull out all IO to make it convient for users to widely use or replace.\n\n![](./../assets/RV/D1-4.jpg)\n\n![](./../assets/RV/D1-back.jpg)\n\n## Specifications\n\n| Item                 | Value                                                                                                                                                                                                                             |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| CPU                  | Allwinner D1 chip (Based on T-Head XuanTie C906 core) up to 1GHZ                                                                                                                                                                  |\n| RAM                  | 16bits 512MB DDR3，Up to 792MHz                                                                                                                                                                                                   |\n| Storge               | Onboard TF card slot，can use tf card for storing,1TB storage capacity have been tested ok <br>Reserve SD-NAND pads (Conflict with 8pins lcd interface. using for business custom made )                                                                                    |\n| Display              | **MIPI**：4-lane MIPI DSI <br>**RGB**：RGB888 interface(partially multiplexed with DSI) <br>**MCU** : I80 interface<br>**SPI**：Onboard 8pins SPI screen interface，can be used for 1.14 inch screen                              |\n| Audio                | Analog audio headphone output(HPOUT); <br>Analog audio line input(LINEIN); <br>Digital Audio (I2S/SPDIF); <br>Analog microphone interface(MIC3);<br>Digital microphone interface(DMIC);<br>All above pin out to connecting finger |\n| Ethernet             | Pin out RMII/RGMII to connecting finger (Multiplexed with some GPIOs)                                                                                                                                                             |\n| USB                  | Onboard TYPE-C USB-OTG interface(USB0) <br>USB-HOST pins out to connecting finger(USB1)                                                                                                                                           |\n| GPIO                 | Other GPIOs all pin out to  connecting finger                                                                                                                                                                                     |\n| Key                  | • FEL key (Enter to download mode)                                                                                                                                                                                                |\n| Led                  | • A power led <br>• A user led (active high)                                                                                                                                                                                      |\n| PCB                  | 4 layers                                                                                                                                                                                                                          |\n| Fixed<br> way        | Connect the core board and bottom board by two sets of M.2B connecting finger and fasten with a M2 screw                                                                                                                          |\n| Development lanuguge | C/C++, Python, Golang, etc...                                                                                                                                                                                                     |\n| System Mirrors       | Tina Linux( Based on OpenWRT 14.07)、 Debian、YoC (RTOS )                                                                                                                                                                         |\n\n![](./../assets/RV/D1-pin.png)\n\n## Comparison between the bottom board\n\n|       Item       | Lichee RV Dock                                                                                                                                                                                                                                                                | Lichee RV Panel                                                                                                                                                                             |\n| :--------------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|       SOC        | Allwinner D1（XuanTie C906 RISC-V）                                                                                                                                                                                                                                           | Allwinner D1（XuanTie C906 RISC-V）                                                                                                                                                         |\n|       Ram        | 1GByte                                                                                                                                                                                                                                                                        | 1GByte                                                                                                                                                                                      |\n| Wireless network | Choosable: <br>-2.4G WIFI+BT<br>- none (You can weld other WiFi modules but need debug by yourself)                                                                                                                                                                           | 2.4G WIFI+BT                                                                                                                                                                                |\n|  Wired network   | None                                                                                                                                                                                                                                                                          | Support 100M Ethernet                                                                                                                                                                       |\n|    Video out     | HDMI connector; <br>SPI screen interface; <br>Screen convert board can be used for：<br>- common RGB screen connector(include TP pins)(support 4.3inch/5.0inch screen we sell<br>-  MIPI screen interface connector(compatible with 8-inch screen of NeZha development board) | sRGB screen interface connector(include TP pins)(support standard 4 inch ips screen with TP )<br> MIPI screen interface connector(compatible with 8-inch screen of NeZha development board) |\n|     USB port     | One USB OTG(Type-C port on core board) <br> One USB Host(USB-A port on bottom board)                                                                                                                                                                                          | One USB OTG(Type-C port on core board) <br> One USB Host(USB-C port on bottom board)                                                                                                        |\n| Expand interface | Support microphone arrays <br>Most GPIOs are connected with 2x20P pin pads                                                                                                                                                                                                    | Part GPIOs are connected to 2x20P pin pads出                                                                                                                                                |\n|      Audio       | Onboard 3W Audio amplifier <br> Onboard electret microphone circuit                                                                                                                                                                                                           | Onboard 3W Audio amplifier  <br> Onboard 2 MEMS digital microphones                                                                                                                         |\n|       Key        | One FEL key(Enter to download mode)<br>One RST key(Reset)<br>One user key                                                                                                                                                                                                     | One FEL key(Enter to download mode)                                                                                                                                                         |\n|       LED        | One power led<br>One 2812 RGB LED                                                                                                                                                                                                                                             | One power led                                                                                                                                                                               |\n|      Shell       | None                                                                                                                                                                                                                                                                          | 3D print shell                                                                                                                                                                              |\n|       Size       | 65.0mm x 40.0mm                                                                                                                                                                                                                                                               | 86.0mm x 86.0mm                                                                                                                                                                             |\n\n\n\n## Connect 1.14 inch screen\n\n![](./../assets/RV/D1-1.png)\n\n![](./../assets/RV/D1-2.png)\n\n![](./../assets/RV/D1-3.png)\n\n> Up to now 1.14 inch screen is not able to display and need to wait for updating\n\n## Burn system\n\n[Flash turtial](./flash.html)\n\n## Notice\n\nThe USB TYPE-C connector of the core board uses the CC pin as an automatic OTG identification pin, so it conflicts with the identification when using the USB C to C data line, and it only works with the USB A to C data line. There are two ways to solve this problem and the steps are as following\n\n| Type-C work mode                         | OTG (Factory default product) | CC identification(Need to change hardware) |\n| ---------------------------------------- | :---------------------------: | :----------------------------------------: |\n| Resistance R30 and resistance R31        |             Blank             |        weld 5.1K 1% 0402 resistance        |\n| Diode D3 and D4                          |        weld 4148 diode        |                   Blank                    |\n| Compatible with C to C cables            |              no               |                    yes                     |\n| Compatible with A to C cables            |              yes              |                    yes                     |\n| Whether supports automatic OTG switching |              yes              |                     no                     |\n\nIf you want to use C to C data line, it's need to change the device around the typeC port to the corresponding CC identification mode,and manually switche to Host mode when you need to extend the external USB device.\n\nIf you want to use USB C to C data line， you need do two things：\n\n> ① add two 5.1K 1% 0402 Resistances at R30 and R31 ，② Remove Diode\n\n![](./../assets/RV/other.png)\n\n![](./../assets/RV/D1Core2.png)\n\n\n## Download\n\nPlease download the Debian system image from Mega netdisk: \n\n<https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA>\n\nIf you want to build your own custom image, you can visit the BSP SDK in the following link.\n\n[BSP SDK](./user.html#BSP-SDK-development)\n\n## Problems\n\n[Problems about debian system](./debian_img_apt.html)"}, "/hardware/en/lichee/Zero/Zero.html": {"title": "Lichee Zero", "content": "# Lichee Zero\n\n## Lichee Zero 概述\nLichee Zero是基于全志科技的V3s(ARM Cortex-A7内核)高性能CPL芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出,板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，适合初学者学习linux或者商用于产品开发。\n\n核心板：\n\n\n<img src=\"./../assets/Zero/Zero_1.png\" width=500>\n\n<img src=\"./../assets/Zero/Zero_6.png\" width=500>\n\n\n核心板+扩展板：\n\n<img src=\"./../assets/Zero/Zero_3.png\" width=500>\n<img src=\"./../assets/Zero/Zero_4.png\" width=500>\n\n\n## 参数\n\n### V3s参数\n\nV3s框架\n\n![](./../assets/Zero/V3s.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | ARM Cortex™-A7 最高1.2GHz|\n| Memory |  Integrated 64MB DRAM  |\n| Audio Codec | • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports one low-noise analog microphone bias outputs<br>• Supports one microphone input and one stereo microphone outpu |\n| Video | • Supports 1080p@40fps or 1080p@30fps+VGA@30fps H.264 video encoding,<br>• Supports H.264 1080p@30fps decoding, MJPEG 1080@30fps decoding |\n| Video Input/Output | • Supports 8/10/12-bit parallel CSI and 4-lane MIPI CSI2<br>• Supports up to 5M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution |\n| Connectivity | •  3 x SD card controllers<br>•  LRADC/SPI/TWI/UART/PWM<br>•  USB, EMAC+PHY |\n| ISP | • Integrated ISP up to 5M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction |\n\n### Lichee Zero核心板参数\n\n| 项目 | 参数 | \n| ---- | ---- |\n| CPU | V3s |\n| 内存 | 64MB DDR2 |\n| 存储 | 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 |\n| 显示 | 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED |\n| 通讯接口 | SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 |\n| 其他接口 | <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 |\n| 电气特性 | Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 |\n\n![](./../assets/Zero/Zero_8.png)\n![](./../assets/Zero/Zero_10.png)\n\n### Lichee Zero 拓展板\n\n| 项目 | 参数 |\n| ---- | ---- |\n| CPU | V3s |\n| 内存 | 64MB DDR2 |\n| 存储 | 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 |\n| 显示 | 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED |\n| 通讯接口 | SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 |\n| 其他接口 | <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 |\n| 板载外设 | 以太网接口<br>3.5mm耳机接口<br>驻极体麦克风<br>额外TF卡卡槽<br>4个按键<br>MIPI接口 |\n| 电气特性 | Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 |\n\n\n\n\n![](./../assets/Zero/Zero_9.png)\n\n## 使用教程\n\n[Lichee Zero](/soft/Lichee/zh/Zero-Doc/Start/intro_cn.html)\n\n## 产品技术支持\n\nLichee Zero 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/en/lichee/index.html": {"title": "Lichee Pi", "content": "# Lichee Pi\n\n## Lichee Zero \n<div align=\"center\">\n<a href=\"./Zero/Zero.html\" ><img src=\"./assets/Zero/Zero_1.png\" width=400></a>\n</div>\n\n## Lichee Nano \n\n<div align=\"center\">\n\n<a href=\"./Nano/Nano.html\" ><img src=\"./assets/Nano/Nano_2.png\" width=400></a>\n\n</div>\n\n## Lichee Zero Plus\n\n<div align=\"center\">\n\n<a href=\"./ZeroPlus/ZeroPlus.html\"><img src=\"./assets/Zero-Plus/Plus_1.jpg\" width=400></a>\n\n</div>\n\n## Lichee RV\n\n<div align=\"center\">\n\n<a href=\"./RV/RV.html\"><img src=\"./assets/RV/D1-4.png\" width=400></a>\n\n</div>"}, "/hardware/en/lichee/One/index.html": {"title": "", "content": "敬请期待"}, "/hardware/en/lichee/Nano/Nano.html": {"title": "Lichee Nano", "content": "# Lichee Nano\n## 概述\n\nLichee Nano是基于全志科技的F1C100s(ARM 926EJS内核)高性能soC芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，非常适合初学者学习linux或者商用于产品开发。\n\n<img src=\"./../assets/Nano/Nano_2.png\" width=400>\n<img src=\"./../assets/Nano/Nano_3.png\" width=400>\n\n## 参数\n\n### F1C100s参数\nLichee Nano开发板板载的F1C100s芯片功能很强大，芯片内置32MBDDR，拥有SDIO、SPI、UART、Speaker、Mic等接口，支持外挂 8~32MB SPI Nor Flash;在视频处理方面表现出现，支持720P视频输出，支持H.264、MJPEG等高清格式的解码。\n\n![](./../assets/Nano/F1C100s.png)\n\n| 项目 | 参数 |\n| --- | ---- |\n| CPU | •ARM9 CPU architecture<br>•16KByte D-Cache<br>•32KByte I-Cache |\n| Memory | •SIP 32MB DDR1<br>•SD2.0,eMMC 4.41 |\n| Video | •H.264 1280x720@30fps decoding<br>•MPEG1/2/4 1280x720@30fps decoding<br>•MJPEG 1280x720@30fps encoding<br>•JPEG encode size up to 8192x8192|\n| Camera | •8-bit CMOS-sensor interface<br>•CCIR656 protocol for NTSC and PAL |\n| Audio | •Integrated analog audio codec with two DAC channels and one ADC channel,maximum 192kHz DAC sample rate and 48kHz ADC sample rate<br>•One I2S/PCM interface |\n| Display | •LCD RGB interface up to 1280x720@60fps<br>•TV CVBS output, support NTSC/PAL, with auto plug detecting |\n| Connectivity | •USB OTG, SDIO,IR, 3 x TWI, 2 x SPI, 3 x UART |\n\n### 开发板参数\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 全志 F1C100s， ARM 926EJS , 主频 408MHz， 可超频至 600Mhz |\n| 内存及存储 |集成 32MB DDR<br>板载 16MB NOR FLASH， 可从 FLASH 启动<br>板载 TF 卡座，可从 TF 启动 |\n| 显示 | 通用 40P RGB LCD FPC 0.5mm 座子<br>可直接使用常见的 40P 4.3/5/7 寸屏幕（板载背光驱动）<br>支持常见的 272x480, 480x800, 1024x600 等分辨率<br>板载电阻式触摸屏芯片 |\n| 视频处理能力 | H.264 1280x720@30FPS 解码<br>MPEG1/2/4 1280x720@30FPS 解码<br>MJPEG 1280x720@30 FPS 解码<br>JPEG encode size up to 8192x8192 |\n| 通信接口 | SDIO，可搭配配套 SDIO WiFi+BT 模块<br>SPI x2<br>TWI x3<br>UART x3<br>OTG USB x1<br>TV out |\n| 其它接口 | PWM x2<br>LRADC x1<br>Speakerx2 + Mic x1 |\n\n![](./../assets/Nano/Nano_pin.png)\n\n### 软件参数\n| 开发环境 | 参数 |\n| --- | --- |\n| Linux | 支持3.10 BSP Linux<br>支持4.19 主线 Linux |\n| 裸机 | Xboot |\n| 裸机 | RT-Thread |\n\n## 使用教程\n[Lichee Nano](/soft/Lichee/zh/Nano-Doc-Backup/index.html)\n\n## 产品技术支持\n\nLichee Zero 开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/en/maixIII/index.html": {"title": "", "content": "Coming soon"}, "/hardware/en/maix/maixpy_develop_kit_board/Maix_dock.html": {"title": "Maix Dock(M1/M1W)", "content": "# Maix Dock(M1/M1W)\n\n## 教程&快速上手\n\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Dock开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n> 上电即可开机，不需要开机操作\n\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock.jpg\" alt=\"11\" width=\"300\">\n\n\n\n## 外观\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock_3.png\" alt=\"11\" >\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock_2.png\" alt=\"11\" >\n\n## 特性\n\nMaixDock 开发是以M1W AI模块作为核心单元，功能非常强大。模块内置64位双核处理器芯片，拥有8M的片上SRAM，在AI机器视觉、听觉性能方面表现突出，内置多种硬件加速单元（KPU、FPU、FFT等），总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法，也可以进行语言方向扫描和语言数据输出的前置处理工作。\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口(支持外接2x3W扬声器)<li>所有IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>52.3*37.3mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料\nSipeed-Maix-Dock 资料下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock)\n\nSipeed-Maix-Dock 规格书下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock/Specifications)\n\nSipeed-Maix-Dock 原理图下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Dock/Maix-Dock_11.27/Maix-Dock_11.27-schematic.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_Amigo.html": {"title": "MaixAmigo", "content": "# MaixAmigo\n\n## 使用教程\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 概述\n\n  SIPEED MaixAmigo 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品.\n  <br/>MaixAmigo 集成前后摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克风、扩展接口等, 用户可使用 MaixAmigo 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixAmigo 外观及功能介绍\n\n### 外观一览\n\n![MaixAmigo](./../assets/dk_board/maxi_amigo/image-20200730120223557.png)\n\n### 板载硬件功能介绍\n\n- 3.5 寸 **TFT** 屏幕: 分辨率 **320x480***\n- 3.5 寸电阻触摸屏： FT6X36\n- 芯片复位按键\n- 电源按键: 短按开机, 长按 *8S* 关机\n- 三个功能按键\n- Grove 接口: 板载 3 个**Grove** 数字接口, 传感器,控制器扩展无限可能~\n- SP-MOD 接口: 板载 3 个更加强大,更高扩展性的 **SP-MOD** 数字接口, I2C,SPI(标准,双线,四线模式)等接口均可以使用\n  - 后续支持乐高手柄功能\n- TF 卡槽: 多媒体资源扩展,支持大容量储存\n- 摄像头: 搭载 **OV7740** **30W** 像素 与 **GC0328 30W 像素** **Sensor**\n- Type-C 接口: USB-TypeC 电源、调试接口,正反盲插\n\n\n- 电源管理控制单元: AXP173\n  - 板载 600mAh 锂电池,支持用户充放电控制\n- 音频驱动 IC: ES8374\n  - 支持音频录制,播放\n- 三轴加速度传感器: MSA301\n\n### 板载扩展接口\n\nMaixAmigo 对用户开放了两个高度扩展的接口: SP-MOD 与 Grove 接口,\n用户可以很方便的进行 DIY\n\n#### SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module\n\n| 接口 | 接口描述 |\n|---|---|\n|SP-MODE 接口描述|![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png)|\n|硬件接口|![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png)|\n\n#### Grove 接口\n\nGrove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别\n![grove_interface](./../assets/interface_grove/grove_interface.jpg)\n\n| pin | 颜色 | 描述 |\n| --- | --- | --- |\n| pin 1 | 黄色 | (例如, I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如, I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 |   VCC (所有的Grove接口红色都是VCC) |\n| pin 4 | 黑色 |   GND (所有的Grove接口红色都是GND) |\n\nGrove模块主要有 4 种接口:\n\n- Grove Digital 数字接口:\n\n    Grove 数字接口由 Grove 插头的四条标准线组成.\n    两条信号线通常称为 D0 和 D1 .\n    大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推.\n\n|pin  |Function | Note |\n| ---|---|---|\n| pin1 | Dn | 第一个数字输入 | \n| pin2 | Dn+1 | 第二个数字输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove Analog 模拟接口\n    Grove模拟接口由Grove插头的四条标准线组成.\n    两条信号线通常称为A0和A1.\n    大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者.\n    通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推.\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | An | 第一个模拟输入 | \n| pin2 | An+1 | 第二个模拟输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n\n- Grove UART :\n    The Grove UART 是特殊的一种数字输入输出接口\n    它使用引脚 1 和引脚 2 进行串行输入和发送\n    引脚1是 RX 线(用于接收数据, 因此是输入)\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据)\n\n| pin  | Function | Note |\n| --- | --- | --- |\n| pin1 | RX | 串行接收 |\n| pin2 | TX | 串行发送 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove I2C:\n    有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号\n\n| pin  | Function | Note |\n| --- | --- | --- |\n| pin1 | SCL | I2C 时钟 |\n| pin2 | SDA | I2C 数据 |\n| pin3 | VCC | 供电引脚, 5V/3.3V |\n| pin4 | GND | 地 |\n\n### 板载 I2C 设备\n\nMaixAmigo 板载 I2C 传感器/IC\n\n| IC | 设备 id | I2C 地址(7位地址) |\n| --- | --- | --- |\n| ES8374 | 0x08 | 0x10 |\n| MSA301 | 0x13 | 0x26 |\n| AXP173 | 0x68 | 0x34 |\n\n## 参数\nMaix Amigo内置64位400Mhz双核高性能处理器,拥有8M的片上SRAM，16MiB FLASH大容量存储,轻松处理多媒体应用,在AI机器视觉、听觉性能方便表现突出，内置多种硬件加速单元（KPU、FPU，FFT等)，总算力最高可达1TOPS,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音扫描和语音数据输出的前置处理工作\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>摄像头帧率</td>\n        <td>OV7740/QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>离线语音识别，声场</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>硬件加速单元</td>\n        <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>3.5寸TFT屏幕<li>复位按键*1<li>功能按键*3<li>前后摄像头*2<li>LED*3<li>加速度传感器*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>音频接口(支持外接扬声器)<li>TF卡槽<li>Grove标准接口<li>SP-MOD接口(支持SP-MOD接口模块)</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>104.3*63.3*16.5mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>USB-type或内部锂电池（520mAh）</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>软件环境</td>\n    <td>MaixPy（microPython）</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，MicroPython</td>\n    </tr>\n</table>\n\n## 相关资料下载\n\nMaix-Amigo 资料下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo)\n\nMaix-Amigo 规格书下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo/ProductSpecification)\n\nMaix-Amigo IPS 版本 原理图下载：[Maix_Amigo_2970(Schematic).pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2970/Maix_Amigo_2970(Schematic).pdf)\n\nMaix-Amigo TFT 版本 原理图下载：[Maix_Amigo_2960(Schematic).pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2960/Maix_Amigo_2960(Schematic).pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_nano.html": {"title": "Maix nano", "content": "# Maix nano\n\n## 教程&快速上手\n\n相关的使用教程入口<a href=\"./../../../../soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Nano开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_nano/maix_nano.jpg\" alt=\"Maxi nano\" >\n\n## 特性\n\nMAIX Nano开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n![maix_nano](./../assets/dk_board/maix_nano/maix_nano.png)\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源和接口</td>\n        <td><li>DVP摄像头接口*1 <li>大部分IO通过金手指方式引出，方便二次开发<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>25.0*22.0mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、Standrad development ki等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nM1n 资料下载：[dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1n)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/develop_kit_board.html": {"title": "Maix 系列开发板", "content": "# Maix 系列开发板\n\n\n##  Maix 系列开发板\n\n目前 MaixPy 系列开发板有一下这几款型号:\n\n- Maix Go\n\n- Maix Dock\n\n- Maix Duino\n\n- Maix Bit\n\n- Maix Cube\n\n- Maix Amigo\n<style type=\"text/css\">\nth {\n    background-color: #fbfbfb;\n    border: 2px solid #f1f1f1;\n}\n</style>\n\n## 差异对比\n<table>\n  <tbody>\n    <tr>\n      <th width=\"226\" scope=\"col\" >&nbsp;</th>\n      <th width=\"226\" scope=\"col\" ><a href=\"maix_go.html\"><img src=\"../assets/dk_board/maix_go/Go.jpg\" width=\"200\"  alt=\"\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_bit.html\"><img src=\"../assets/dk_board/maix_bit/Bit.png\" width=\"200\"  alt=\"Bit\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_cube.html\"><img src=\"../assets/dk_board/maix_cube/maix_cube_1.png\" width=\"200\"  alt=\"maix_cube\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"Maix_dock.html\"><img src=\"../assets/dk_board/maix_dock/Dan_Dock.png\" width=\"200\"  alt=\"\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_duino.html\"><img src=\"../assets/dk_board/maix_duino/DSC_08141.png\" width=\"200\"  alt=\"\"/></a></th>    \n      <th width=\"226\" scope=\"col\"><a href=\"maix_Amigo.html\"><img src=\"../assets/dk_board/maxi_amigo/amigo.png\" width=\"200\"   alt=\"\"/></a> </th>  \n    </tr>\n    <tr>\n      <td>型号 </td>\n      <td>Maix Go</td>\n      <td>Maix Bit</td>\n      <td>Maix Cube</td>\n      <td><p>Maix Dock</p></td>\n      <td>Maix Duino</td>\n      <td>Maix Amigo</td>\n    </tr>\n    <tr>\n      <td>USB IC</td>\n      <td>STM32</td>\n      <td>CH552/CH340</td>\n      <td>GD32/CH552</td>\n      <td>CH340</td>\n      <td>CH552</td>\n      <td>GD32</td>\n    </tr>\n    <tr>\n      <td>核心模块</td>\n      <td>M1</td>\n      <td>M1</td>\n      <td>M1n</td>\n      <td>M1/M1W</td>\n      <td>M1</td>\n      <td>M1n</td>\n    </tr>\n    <tr>\n      <td height=\"48\">WIFI 功能</td>\n      <td>M1W 模块集成 ESP8285</td>\n      <td>---</td>\n      <td>---</td>\n      <td>Dock M1 (不支持 WIFI)<br/>\n        Dock M1W(支持,M1W 模块集成 ESP8285)</td>\n      <td>板载 ESP32 （支持 WIFI, 蓝牙功能暂时未支持）</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_cube.html": {"title": "MaixCube", "content": "# MaixCube\n\n## 使用教程\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 概述\n\n  SIPEED MaixCube 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品.\n  <br/>MaixCube 集成摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克、扩展接口等, 用户可使用 Maix Cube 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixCube 外观及功能介绍\n\n### 外观一览\n\n![maixcube_product_appearance](./../assets/dk_board/maix_cube/maixcube_product_appearance.png)\n\n### 板载功能介绍\n\n- 电源管理控制单元: AXP173\n  - 板载 200mAh 锂电池,支持用户充放电控制\n- 音频驱动 IC: ES8374\n  - 支持音频录制,播放\n- 三轴加速度传感器: MSA301\n- Camera OV7740:\n- 1.3 IPS LCD:\n- RGB: 板载两颗 RGB LED\n- USB Type-C:Type-C 接口,正反盲插\n\n\n### 板载扩展接口\n\nMaix Cube 对用户开放了两个高度扩展的接口: SP-MOD 与 Grove 接口,\n用户可以很方便的进行 DIY\n\n#### SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module\n\n| 接口 | 接口描述 |\n| --- |--- |\n|SP-MODE 接口描述|![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png)|\n|硬件接口|![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png)|\n\n#### Grove 接口\n\n- Grove 模块接口\n\nGrove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别\n\n![grove_interface](./../assets/interface_grove/grove_interface.jpg)\n\n| --- | 颜色 | 描述 |\n| --- | --- | --- |\n| pin 1 | 黄色 | (例如, I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如, I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 |   VCC (所有的Grove接口红色都是VCC) |\n| pin 4 | 黑色 |   GND (所有的Grove接口红色都是GND) |\n\nGrove模块主要有 4 种接口:\n\n- Grove Digital 数字接口:\n    Grove 数字接口由 Grove 插头的四条标准线组成.\n    两条信号线通常称为 D0 和 D1 .\n    大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推.\n\n| pin  |Function | Note |\n| ---|---|---|\n| pin1 | Dn | 第一个数字输入 | \n| pin2 | Dn+1 | 第二个数字输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove Analog 模拟接口\n    Grove模拟接口由Grove插头的四条标准线组成.\n    两条信号线通常称为A0和A1.\n    大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者.\n    通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推.\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | An | 第一个模拟输入 | \n| pin2 | An+1 | 第二个模拟输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n\n- Grove UART :\n    The Grove UART 是特殊的一种数字输入输出接口\n    它使用引脚 1 和引脚 2 进行串行输入和发送\n    引脚1是 RX 线(用于接收数据, 因此是输入)\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据)\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | RX | 串行接收 |\n| pin2 | TX | 串行发送 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove I2C:\n    有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | SCL | I2C 时钟 |\n| pin2 | SDA | I2C 数据 |\n| pin3 | VCC | 供电引脚, 5V/3.3V |\n| pin4 | GND | 地 |\n\n### 板载 I2C 设备\n\nMaixCube  板载 I2C 传感器/IC\n\n| IC | 设备 id | I2C 地址(7位地址) |\n| --- | --- | --- |\n|ES8374|0x08|0x10|\n|MSA301|0x13|0x26|\n|AXP173|0x68|0x34|\n\n## MaixCube参数\n![maixcube_resources](./../assets/dk_board/maix_cube/maixcube_resources.png)\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至500MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>摄像头帧率</td>\n        <td>OV7740/QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>离线语音识别，声场</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>硬件加速单元</td>\n        <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*3<li>摄像头*1<li>RGB LED*2 <li>1.3寸TFT屏幕<li>Electret Microphone*1<li>128Mbit Flash*1<li>加速度传感器*1<li>0.5W扬声器</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>TF卡槽<li>Grove标准接口<li>SP-MOD接口(支持SP-MOD接口模块)</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>40*40*18.6mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>USB-type或内部锂电池（200mAh）</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>软件环境</td>\n    <td>MaixPy（microPython）</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，MicroPython</td>\n    </tr>\n</table>\n\n## 相关资料下载\nSipeed-Maix-Cube 资料下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube)\n\nSipeed-Maix-Cube 规格书下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/ProductSpecification/Sipeed%20Maix%20Cube%20Datasheet%20V1.0.pdf)\n\nSipeed-Maix-Cube 原理图下载：[Sipeed-Maix-Cube.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/Maix-Cube-2757)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_bit.html": {"title": "Maix Bit", "content": "# Maix Bit\n\n## 教程&快速上手\n\n相关的使用教程入口<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_bit/Bit.png\" alt=\"Maxi bit\" >\n\n## 特性\n\nMaixBit开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>所有IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>53.3*25.4mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nSipeed-Maix-Bit 资料下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Bit)\n\nSipeed-Maix-Bit 规格书下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Specifications/Sipeed%20Maix-Bit%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V2.0.pdf)\n\nSipeed-Maix-Bit 原理图下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit%20V2.0(with%20MEMS%20microphone)/Maix-Bit%20V2.0(Schematic).pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_duino.html": {"title": "MaixDuino 开发板", "content": "# MaixDuino 开发板\n\n## 概述\n\n  SIPEED MaixDuino 是基于我们 M1 模块(主控:Kendryte K210)开发的一款外形兼容 Arduino 的开发板\n  <br/>MaixDuino 集成摄像头、TF卡槽、用户按键、TFT显示屏、MaixDuino 扩展接口等, 用户可使用 MaixDuino 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixDuino 外观及功能介绍\n\n### 外观一览\n\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_0.png)\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_1.png)\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_2.png)\n\n### 板载功能介绍\n\n- 电源输入 DC05: 6~12V 直流\n- 电源输入 + 程序下载调试接口: USB Type-C 接口\n- DVP 24PIN: 标准 Camera DVP 24PIN 接口\n- TF 扩展槽:\n- ESP32: ESP32 SPI 连接(ESP32 支持 WIFI 与 蓝牙)\n- I2C DAC\n- PA PAM8403A\n\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_3.jpg)\n\n## MaixDuino参数\nMaixduino开发板以M1Al模块作为核心单元，功能非常很强大，模块内置64位双核处理器芯片，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。此外，开发板还配置了ESP32模块(WiFi+蓝牙一体)，简单的操作即可轻松联网。\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n<table role=\"table\" class=\"center_table\">\n  <thead>\n    <tr>\n      <th colspan = \"2\">ESP32模块</th>\n    </tr>\n  </thead>\n  <tr>\n    <td>主控</td>\n    <td>ESP32-D0WDQ6(Xtensa 32-bit内核)</td>\n  </tr>\n  <tr>\n    <td>无线标准</td>\n    <td>802.11b/g/n</td>\n  </tr>\n  <tr>\n    <td>无线频率</td>\n    <td>2400MHz-2483.5MHz</td>\n  </tr>\n  <tr>\n    <td>无线协议</td>\n    <td>2.4G WiFi+双模蓝牙(BT&BLE4.2)</td>\n  </tr>\n  <tr>\n    <td>天线</td>\n    <td>PCB板载天线</td>\n  </tr> \n</table>\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>RGB灯*1<li>MEMS Microphone*1<li>USB转串口*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口（支持外接3扬声器）<li>部分IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>60*88mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n\n## 资料相关链接\n\n- [MaixDuino 原理图](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maixduino)\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy的使用教程入口 </a>\n<a href=\"/soft/maixduino/zh/\" target=\"_blank\"> arduino的使用教程入口 </a>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_go.html": {"title": "Maix Go", "content": "# Maix Go\n\n## 教程&快速上手\n\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Go开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_go/Go.jpg\" alt=\"Maxi go\" >\n\n## 特性\n\nMAIX Go开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>三向拨轮按键 <li>RGB灯*1<li>1W 小喇叭<li>USB to UART<li>16Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>麦克风阵列接口<li>部分IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>60*88mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA）</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nSipeed-Maix-Go 资料下载：[Sipeed-Maix-Go](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-GO)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/modules_spmod/spmod_psram.html": {"title": "SPMOD - PSRAM", "content": "# SPMOD - PSRAM\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_psram/sp_psram.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_PSRAM(PSRAM module) uses IPS6404L-SQ PSRAM.\n\n## SPMOD - PSRAM Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the board through the SP-MOD SPI/QPI interface\n- Pseudo−SRAM:IPS6404L-SQ is 64 Mbit of SPI/QPI (serial/quad parallel interface) Pseudo−SRAM device.\n- Working frequency:104MHz\n- CLK period:30.3ns\n- Size:15.0\\*10.0\\*13.3mm\n\n###  IPS6404L-SQ Introduction：\n\n| Features: | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.7V~3.6V |\n| Supply current of external power supply | 10mA |\n| Range of working temperature | -30℃~85℃ |\n| Sleep Status of Current | <250μA |\n| Working frequency | 104Mhz |\n| Response time of SPI read | 30.3ns |\n| Response time of other operations | 9.3ns |\n| interface | PI/QPI optional, default SPI |\n\n\n###  SPMOD_PSRAM pin description:\n\n| Pin  | Name | Type  | Decription    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND  | G | Ground |\n| 2 | CS | I  | Chip Select input pin |\n| 3 | D1 | I/0 | Master In Slave Out |\n| 4 | D3 | I/O | No function (IO3 in QSPI mode) |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | D0 | I/0 | Master Out Slave In (IO0 in QSPI mode) |\n| 8 | D2 | I/O | No function (IO2 in QSPI mode) |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## Usage\n\n- wait upgrade\n\n## Outlook\n\n- SPMOD_PSRAM Size drawing:\n\n<img src=\"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_rfid.html": {"title": "SPMOD - RFID", "content": "# SPMOD - RFID\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_rfid/sp_rfid.png\" style=\"padding-right:100px;\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_RFID (NFC module) uses  FM17510 IC.\n\n## SPMOD - RFID Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD SPI to communicate with RFID module\n- 64Byte TRANSCeiver buffer FIFO\n- The RIFC IC is FM17510.\n- Size:25.0\\*20.1\\*6.2mm\n\n### FM17510 Introduction\n\nThe FM17510 used in this module is a highly integrated non-contact reader chip working at 13.56MHz.\nSupports non-contact reader mode in accordance with ISO/IEC 14443 protocol,\n\n\n| Features： |\n| --- |\n| Supports non-contact reader mode in accordance with ISO/IEC 14443 protocol, |\n| Reader mode supports M1 encryption algorithm |\n| ISO14443 TYPEA supports communication rate: 106kbps， 212kbps， 424kbps |\n| Support SPI serial interface, up to 10Mbps |\n| Host interface independent power supply，voltage range: 2.2~3.6V |\n| Range of working temperature -40℃ ~ 85℃ |\n| 64Byte TRANSCeiver buffer FIFO. |\n| Interrupt output mode can be equipped with flexible |\n| Multiple low-power modes: Soft powerdown Mode, Hard powerdown Mode, Deep powerdown Mode(Typical value 1uA) |\n| Support low-power external card detection |\n| Programmable timer |\n| Built-in oscillator circuit and external 27.12MHz crystal oscillator |\n| Wide voltage working range 2.2V~3.6V |\n| Built-in CRC coprocessor |\n| programmed I/O |\n\n\n\n###  SPMOD_RFID pin description:\n\n\n| Pin | Name | Type | Description | |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G | Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | SO | I/O | Master In Slave Out  |\n| 4 | NPD | I | Reset/Sleep control pin|\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | IRQ | O | Interrupt output pin |\n\n<img src=\"../../assets/spmod/spmod_rfid/back.png\" height=\"300\" />\n\n- Mode of connection:\n\n|   MCU:FUN(IO)   | SP_RFID |\n| :-------------: | :-----: |\n| NC(IO_7)     |   NPD   |\n| SPI:MISO(IO_15) |   SO    |\n| SPI:SS0(IO_20)  |   CS    |\n| SPI:SCK(IO_21)  |   SCK   |\n| SPI:MOSI(IO_8)  |   SI    |\n| NC(IO_6)    |   IRQ   |\n| 2.2~3.6V    |  3.3V   |\n| GND       |   GND   |\n\n<img src=\"../../assets/spmod/spmod_rfid/connection.png\" height=\"250\">\n\n\n## Usage\n\n* Process\n  1. Initialization\n  2. Detected and bind card\n  3. Read or write data\n\n### C:\n\n  ```c\n\n  fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20;\n  fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21;\n  fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8;\n  fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15;\n\n  gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT);\n\n  // detected card\n  PcdRequest(0x52, type)\n\n  // auth and bind...\n\n  // read or write 16 bytes data from sector 0x11\n  PcdWrite(0x11, w_buf)\n  PcdRead(0x11, &r_buf)\n\n  ```\n\n### MaixPy:\n\n  ```python\n\n  # 20: CS_NUM;\n  fm.register(20, fm.fpioa.GPIOHS20, force=True)\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n\n  # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15;\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n          polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso=15)\n\n  # Create an object of the class MFRC522\n  MIFAREReader = MFRC522(spi1, cs)\n\n  # detected and auth, bind...\n\n  # read or write 16 bytes data from sector 0x11\n  MIFAREReader.MFRC522_Write(0x11, data)\n  MIFAREReader.MFRC522_Read(0x11)\n\n  ```\n### Runtime environments:\n\n|  语言  | 开发板   | SDK/固件版本                   |\n| :----: | :------- | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n### Result:\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_rfid/c_log.png\" height=\"200\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_rfid/maixpy_log.png\" height=\"200\" />\n\n### Transplant:\n\nThe following parameters need to be modified\n\n* C\n\n  ```c\n    // board_config.h\n    #define RFID_CS_PIN (20)\n    #define RFID_CK_PIN (21)\n    #define RFID_MO_PIN (8)\n    #define RFID_MI_PIN (15)\n\n    #define RFID_CS_HSNUM (20)\n    #define RFID_CK_HSNUM (21)\n    #define RFID_MO_HSNUM (8)\n    #define RFID_MI_HSNUM (15)\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    CS_NUM = const(20)\n    SPI_FREQ_KHZ = const(600)\n    SPI_SCK = const(21)\n    SPI_MOSI = const(8)\n    SPI_MISO = const(15)\n    #############################################\n  ```\n\n\n## Outlook\n\n\n- SPMOD_RFID Size drawing:\n\n<img src=\"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height=\"250\" />\n\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_grove.html": {"title": "SPMOD - Grove", "content": "# SPMOD - Grove\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_grove/sp_grove.png\" align=\"right\" width=\"\" height=\"400\" />\n\n\nSPMOD_Grove(GROVE module)\n\n## SPMOD - Grove Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Ass an Expansion board，it povides three standard Grove interfaces.\n- All data cables are provide external pull-ups.\n- The power supply can handle up to 1000mA\n- Size:35.0\\*10.0\\*2.1mm\n\n## Introduction\n\n| Features: | --- |\n| --- | -- |\n| Grove connector (HY 2.0mm 4P connector)*3 | Used to connect Grove  |\n| 4*2 pin，2.54mm pitch: *1 | Used to connect with SP-MOD interface |\n| Supply voltage of external power supply | Depends on connected modules |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1000mA |\n| Range of working temperature | -30℃ ~ 85℃\n\n## Outlook\n\n- SPMOD_Grove Size drawing:\n\n<img src=\"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_lora.html": {"title": "SPMOD - LoRa", "content": "# SPMOD - LoRa\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_lora/sp_lora.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_LoRa(LoRa Module) uses M-XL8 module.\n\n## SPMOD - LoRa Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD SPI to communicate with LoRa module\n- LoRa module:The SP_LoRa module uses M-XL8 module with LoRaTM modem and LoRa module with adjustable power amplifier. It has high performance and reliability and is connected by SP_MOD.\n- 370MHz-1200MHz, Maximum 20dBm (100mW) continuous transmit power\n- Size:25.0\\*10.0\\*4.3mm\n\n### M-XL8 SX1276 LoRa module Introduction\n\n| Features： | --- |\n| --- | -- |\n| Working frequency | 370MHz-1200Mhz |\n| Transmission power | 20dBm(Maximum) |\n| Communication interface | SPI |\n| Supply voltage of external power supply | 1.8V~6.3V |\n| Range of working temperature | -40℃ - 80℃ |\n| antenna | external，IPEX |\n| Reception Sensitivity | -148dbm |\n| RSSI value | 127dB |\n| Maximum link budget | 168dB |\n| Send and receive status of current | 9.9mA |\n| Sleep status of current | 50nA |\n| Modulation method | FSK, GFSK, MSK, GMSK, LoRaTM及OOK |\n> Built-in LoRaTM modem, built-in CRC, inherited +12dBm adjustable PA+LNA\n\n\n###  SPMOD_lora pin description:\n\n| Pin  | Name | Type  | Description    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | Ground |\n| 2 | CS | I/O | Chip Select input pin |\n| 3 | SO | I/O | Master In Slave Out |\n| 4 | RST | I | Reset (active low) |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin|\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | IRQ | I | Connected to DIO0 of the module,，Programmable decision function |\n\n<img src=\"../../assets/spmod/spmod_lora/back.png\" width=\"300\" />\n\n- Mode of communication\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| SPI:MISO(IO_15) |   SO   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|   GPIOH(IO_6)  |  IRQ   |\n|  1.8-6.3V    |  3.3V  |\n|   GND      |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lora//connection.png\" height=\"250\">\n\n## Usage\n\n* Process\n\n  1. Create the LoRa object and initialize it\n  2. Send or receive data\n\n### C :\n\n  ```c\n\n  fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0);   // CS: 20\n  fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21\n  fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0);  // MOSI: 8\n  fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1);  // MISO: 15\n\n  fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6\n  fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7\n\n  spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8,\n                 SX1278_LoRa_BW_20_8KHZ, 10);\n\n  if (master == 1)\n  {\n      printf(\"====MASTER====\\r\\n\");\n      ret = sx1278_LoRaEntryTx(&SX1278, 16, 2000);\n  }\n  else\n  {\n      printf(\"====SALAVE====\\r\\n\");\n      ret = sx1278_LoRaEntryRx(&SX1278, 16, 2000);\n  }\n\n  ```\n\n### MaixPy :\n\n  ```python\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # RST\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # CS\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.IN)\n  # The other pins are configured at SPI initialization time\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=100 * 1000,\n               polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso = 15)\n\n  lora = SX127x(spi=spi1, pin_ss=cs)\n  lora.init()\n\n  #######receiver###########\n  receive(lora)\n\n  ########sender###########\n  # send(lora)\n\n\n  ```\n\n### Runtime environments:\n\n|  Language  |  Board  | SDK/Firmware version |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*The MaixPy firmware is recommended to compile from the latest source*\n\n### Result\n\n* C\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height=\"250\"/>\n  </center>\n\n* MaixPy\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log.png\" height=\"250\"/>\n  </center>\n\n### Transplant\n\nThe following parameters need to be modified\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX           1\n    #define SPI_SCLK_RATE       600*1000\n    #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0\n\n    #define SPI_LoRa_SX127X_CS_PIN_NUM      20\n    #define SPI_LoRa_SX127X_SCK_PIN_NUM     21\n    #define SPI_LoRa_SX127X_MOSI_PIN_NUM    8\n    #define SPI_LoRa_SX127X_MISO_PIN_NUM    15\n\n    #define SPI_LoRa_SX127X_IRQ_PIN_NUM     6\n    #define SPI_LoRa_SX127X_RST_PIN_NUM     7\n\n    #define SPI_LoRa_SX127X_IQR_GPIO_NUM    6\n    #define SPI_LoRa_SX127X_RST_GPIO_NUM    7\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    LoRa_RST = const(20)\n    LoRa_CS = const(7)\n    LoRa_SPI_SCK = const(21)\n    LoRa_SPI_MOSI = const(8)\n    LoRa_SPI_MISO = const(15)\n    LoRa_SPI_NUM = SPI.SPI1\n    LoRa_SPI_FREQ_KHZ = const(100)\n    ##############################################\n  ```\n\n## Outlook\n\n- SPMOD_LoRa Size drawing:\n\n<img src=\"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_fpc.html": {"title": "SPMOD - FPC", "content": "# SPMOD - FPC\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_fpc/sp_fpc.png\" align=\"right\" width=\"\" height=\"300\" />\n\n\nSPMOD_FPC( SPMOD extension module )\n\n## SPMOD - FPC Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- As an extension module, easily extend the SP-MOD interface with FPC.\n- Provide a pair of SP-MOD to FPC adapters(Male and female), one FPC cable(10P).\n- Size:15.0\\*10.0\\*3.3mm\n\n## Introduction\n\n| Features: | --- |\n| --- | -- |\n| SP-MOD-to-FPC10-Adapters(Male and female)\t| Bi-directional transformation of SP-MOD to FPC |\n| FPC\tcable(10P) | Connect two adapters |\n| Supply voltage of external power supply | Depends on connected modules |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1000mA |\n| Range of working temperature | -30℃ ~ 85℃ |\n\n\n## Outlook\n\n- SPMOD_FPC Size drawing:\n\n<img src=\"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_micarray.html": {"title": "SPMOD - MicArray", "content": "# SPMOD - MicArray\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_micarray/sp_micarray.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_MicArray(Microphone array module) uses RY3708(DC-DC)Boost Module\n\n## SPMOD - MicArray Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Transfer the SP-MOD interface to the FPC, and use the FPC to connect to the microphone array board\n- 3.3V to 5V boost regulator(DC-DC)(RY3708)，easily drive microphone arrays.\n- Use the Grove interface to control the LED on the microphone array module.\n- It needs to be used with the SIPEED MICARRAY module.\n- Size:35.0\\*10.0\\*11.2mm\n\n\n###  BOOST DC-DC RY3708 module Introduction\n\n| Features： | --- |\n| --- | -- |\n| Output voltage range | 5.1V ±0.2V |\n| Supply voltage of external power supply |\t3.3V ±0.2V |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 500mA |\n| Range of working temperature | -40℃ ~ 85℃ |\n> 1.2MHz Fixed Switching Frequency,Internal 4A Switch Current Limit,\nThermal Shutdown,Integrated 80mΩ Power MOSFET\n\n\n###  SPMOD_MicArray pin description:\n\n| Pin  | Name | Type  | Description    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |Ground |\n| 2 | D2 | I | Mic_D0 |\n| 3 | D3 | I | Mic_D2 |\n| 4 | D0 | I | Mic_WS |\n| 5 | 3V3 | V |Power supply(3.3V) |\n| 6 | D4 | I | Mic_D1 |\n| 7 | D5 | I | Mic_D3 |\n| 8 | D1 | I | Mic_BCK |\n| 9 | CK | I | Serial clock pin to control LED |\n| 10 | DA | I | Data clock pin to control LED |\n<img src=\"\" width=\"300\" />\n\n\n## Usage\n\n- 待补充\n\n## Outlook\n\n- SPMOD_MicArray Size drawing:\n\n<img src=\"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_ethernet.html": {"title": "SPMOD - Ethernet", "content": "# SPMOD - Ethernet\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_ethernet/sp_ethernet.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_Ethernet(Ethernet module) uses W5500 chip.\n\n## SPMOD - Ethernet Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the board through the SP-MOD SPI interface\n- Master chip:The W5500 chip is a Hardwired TCP/IP embedded Ethernet controller\n- The theoretical SPI design speed is 80MHz\n-\t10BaseT/100BaseTX Ethernet PHY embedded, Supports Auto Negotiation (Full and half duplex, 10 and 100-based )\n- Size:35.76\\*19.74\\*8.7mm\n\n###  W5500 chip Introduction\n\n| Features: | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.97V~3.63V |\n| Supply current of external power supply | <132mA |\n| Range of working temperature | -40℃~85℃ |\n| Sleep Status of Current | <15mA |\n| SPI Clock | The theoretical design speed is 80MHz |\n| TCP/IP protocol | Support TCP,UDP,ICMP,IPv4,ARP,IGMP,PPPoE protocols |\n\n> - Supports 8 independent sockets simultaneously\n,Internal 32Kbytes Memory for TX/RX Buffers\n,Supports Wake on LAN over UDP\n,10BaseT/100BaseTX Ethernet PHY embedded\n,Support Auto Negotiation (Full and half duplex, 10 and 100-based )\n,Not support auto-MDIX feature\n\n\n###  SPMOD_Ethernet pin description:\n\n| Pin  | Name | Type  | Description  |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |  Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | SO | I/0 | Master In Slave Out  |\n| 4 | NC | NC | Not connected |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | SI | I/0 | Master Out Slave In |\n| 8 | NC | NC | Not connected |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## Usage\n\n- 待更新\n\n## Outlook\n\n- SPMOD_Ethernet Size drawing:\n\n<img src=\"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed)  |"}, "/hardware/en/maix/modules_spmod/spmod_servo.html": {"title": "SPMOD - SERVO", "content": "# SPMOD - SERVO\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_SERVO (SERVO module).\n\n## SPMOD - SERVO Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD to control up to 6 independent 9g servos\n- Servo interface uses 3P 2.54 pitch pin header\n- Independent external 5V power supply, will not take power from SP-MOD\n- Built-in LED，making module status easier to see.\n- Size:35.0\\*20\\*1.6mm\n\n| Features: | --- |\n| --- | -- |\n| PWM 9g servo interface *6 | In the case of an external 4.8-6V power supply, 6 servos can be connected and controlled separately |\n| Supply voltage of external power supply | 4.8V-6.0V |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1500mA |\n| Range of working temperature | -40℃ ~ 85℃ |\n\n\n###  SPMOD_SERVO pin description:\n\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width=\"500\" />\n\n\n## Usage\n\n- 待更新\n\n## Outlook\n\n- SPMOD_SERVO Size drawing:\n\n<img src=\"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_weather.html": {"title": "SPMOD - Weather", "content": "# SPMOD - Weather\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_weather/demo.gif\" align=\"right\" width=\"500\" />\n\nSPMOD - Weather (Weather station module), Integrated Magnetic sensor (QMC7983) and Humidity sensor (BME280)\n\n\n## SPMOD - Weather Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN ),unified MaixPy board interface\n- Connect to the board through the SP-MOD I2C interface\n- Magnetic sensor: QMC7983 is a 3-axis single chip magnetic sensor integrated with AMR and ASIC,\nI2C interface with standard mode and rapid mode,Stable sensitivity in a large operating temperature range,\nlow power consumption (75uA).\n- Sensitivity: ±30 Gauss\n- Humidity sensor: BME280 is a humidity sensor that can measure relative humidity, barometric pressure and ambient temperature\n- Size:25.0\\*10\\*2.9mm\n\n\n## Sensor Introduction:\n\n| Magnetic sensor | QMC7983 |\n| --- | --- |\n| Supply voltage of external power supply | 2.6V~3.6V |\n| Supply current of external power supply | 70uA |\n| Sleep Status of Current | <1uA |\n| Sensitivity | ±30 Gauss |\n| humidity sensor | LSB/mG|\n| RMS Noise | 2 mG |\n| Interface | I2C,default address 0x2C (Select resistance adjustment) |\n\n-----\n\n| Humidity sensor | BME280 |\n| --- | --- |\n| Supply voltage of external power supply | 1.71V~3.6V |\n| Supply current of external power supply | <633uA |\n| Sleep Status of Current | <5uA |\n| Humidity sensor： | --- |\n| Response time（𝜏63％）| 1s |\n| Accuracy tolerance | ±3％  relative humidity |\n| Hysteresis | < 2％  relative humidity |\n| Pressure sensor： | --- |\n| RMS Noise | 0.2 Pa(equiv. to 1.7cm) |\n| Temperature coefficient offset | ±1.5 Pa/K(equiv. to ±12.6cm at 1 °C temperature change) |\n| Interface | I2C,default address 0x76 Select resistance adjustment) |\n\n###  SPMOD_Weather pin description :\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1  | GND | G | Ground |\n| 2  | NC | NC | Not connected |\n| 3  | NC | NC | Not connected |\n| 4  | SDA | I/O | Receive data signal |\n| 5  | 3V3 | V | Power supply(3.3V) |\n| 6  | NC | NC | Not connected |\n| 7  | NC | NC | Not connected |\n| 8  | SCL | I | Transmit clock signal |\n\n<img src=\"../../assets/spmod/spmod_weather/back.png\" width=\"300\" />\n\n## Mode of connection:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_weather/connection.png\" height=\"250\">\n\n## Usage\n\n* Process\n  1. Send AT instruction\n  2. Receive the reply\n  3. Determines whether the setup was successful\n\n### C:\n\n  ```c\n\n    fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6;\n    fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7;\n\n    maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0;\n\n    rslt = qmc_init(); // Magnetic sensor QMC7983 init\n    rslt = bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init\n    stream_sensor_data_normal_mode(&dev); // read and print sensor data\n\n  ```\n\n### MaixPy:\n\n  ```python\n\n    i2c_bus = I2C(I2C.I2C0, freq=100*1000, scl=6, sda=7) # scl: io_6, sda: io_7\n\n    weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n\n  ```\n\n## Runtime environments:\n\n|  Language  |  Board  | SDK/Firmware version |\n| :----: | :------: | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## Result\n\n* C\n\n    <img src=\"../../assets/spmod/spmod_weather/log_c.png\" height=\"200\">\n\n* MaixPy\n\n    <img src=\"../../assets/spmod/spmod_weather/log_py.png\" height=\"200\">\n\n## Outlook\n\n- SPMOD_Weather Size drawing:\n\n<img src=\"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_eink.html": {"title": "SPMOD - Eink", "content": "# SPMOD - Eink\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD_Eink(E-paper display module) uses GDEW0154M09 E-paper display.\n\n## SPMOD - Eink Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the screen through the SP-MOD SPI interface\n- E-paper display module：GDEW0154M09 is a 1.54\" E-paper display，with SPI interface，and has 24P FPC(0.5mm pitch).\n- Support 1 bit Black/Write full display capabilities\n- Display Resolution：200x200\n- Size：35*30*3.8mm\n\n### GDEW0154M09 E-paper display Introduction\n\n| Features： | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.3V~3.6V |\n| Supply current of external power supply | 1~3mA |\n| Range of working temperature | -40℃~85℃ |\n| Sleep Status of Current | <5uA |\n| Screen Size | 1.54 inch |\n| Active Area | 27.6mm*27.6mm |\n| Display Resolution | 200*200 |\n| Color | 1 bit Black/Write full display capabilities|\n| interface | 24P FPC (0.5mm pitch) |\n> An integrated circuit contains gate buffer, source buffer, interface, timing control logic, oscillator,\nDC-DC, SRAM, LUT, VCOM, and border are supplied with each panel.\n\n\n###  SPMOD_Eink pin description ：\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | D/C | I | Data/Command control pin |\n| 4 | RES | I | Reset (active low) |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I |  SPI clock pin |\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | BSY | O | Busy status output pin |\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink_back.png\" height=\"300\" />\n\n- Mode of connection:：\n\n|  MCU:FUN(IO)   | SP_Eink |\n| :------------: | :-----: |\n|  GPIOHS(IO_7)  |   RES   |\n| SPIOHS(IO_15)  |   D/C   |\n| SPIOHS(IO_20)  |   CS   |\n| SPI:SCK(IO_21) |   SCK   |\n| SPI:MOSI(IO_8) |   SI    |\n|  GPIOHS(IO_6) |   BSY   |\n|  2.3-3.6V   |  3.3V   |\n|   GND    |   GND   |\n\n<img src=\"../../assets/spmod/spmod_eink/connection.png\" height=\"250\">\n\n### AT instruction list\n\n| Instruction |       description        |\n| :---------: | :----------------------: |\n|    0x10     | start transport b/w data |\n|    0x13     | start transport r/w data |\n|    0x12     |  refresh data to screen  |\n\n\n*See [GDEW0154M09.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_eink) for more information*\n\n## Usage\n\n* Process\n\n  1.initializatin\n  2.create an image and fill it\n  3.send image and refresh\n\n\n### C：\n\n  ```c\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_Eink_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_Eink_MOSI_PIN_NUM: 8;\n\n  fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM);   // SPI_Eink_DC_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7;\n  fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM);   // SPI_Eink_BL_PIN_NUM: 6;\n\n  gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH);\n  gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH);\n\n  gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP);\n  gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH);\n\n    EPD_DisplayInit(); //EPD init\n\n  //Paint initialization\n  Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation\n  Paint_SelectImage(BlackImage);                                 //Set the virtual canvas data storage location\n\n  Paint_Clear(WHITE); //clear paint\n  Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK);   //5*8\n  Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12\n  Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16\n  Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20\n  Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24\n  EPD_FullDisplay(BlackImage, BlackImage, 0);                  //display image\n\n  ```\n\n### MaixPy：\n\n  ```python\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8)\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # SPI_Eink_SS_PIN_NUM: 20;\n  fm.register(15, fm.fpioa.GPIOHS15, force=True) # SPI_Eink_DC_PIN_NUM: 15;\n  fm.register(6, fm.fpioa.GPIOHS6, force=True) # SPI_Eink_BUSY_PIN_NUM: 6;\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # SPI_Eink_RST_PIN_NUM: 7;\n\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  epd = SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION)\n  epd.init()\n\n  img = image.Image()\n  img = img.resize(200, 200)\n  img.draw_line(0, 0, 100, 100)\n\n  epd.display(img)\n\n  ```\n\n### Runtime environments:\n\n|  Language  |  Board  | SDK/Firmware version |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*The MaixPy firmware is recommended to compile from the latest source*\n\n### Result\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_py.png\" height=\"250\" />\n\n### Transplant\n\nThe following parameters need to be modified\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX 1\n    #define SPI_SCLK_RATE 600 * 1000\n    #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0\n\n    #define SPI_Eink_CS_PIN_NUM 20\n    #define SPI_Eink_SCK_PIN_NUM 21\n    #define SPI_Eink_MOSI_PIN_NUM 8\n\n    #define SPI_Eink_DC_PIN_NUM 15\n    #define SPI_Eink_BL_PIN_NUM 6\n    #define SPI_Eink_RST_PIN_NUM 7\n\n    #define SPI_Eink_DC_GPIO_NUM 15\n    #define SPI_Eink_BL_GPIO_NUM 6\n    #define SPI_Eink_RST_GPIO_NUM 7\n  ```\n\n* MaixPy\n\n  ```python\n  ################### config ###################\n    SPI_Eink_NUM = SPI.SPI1\n    SPI_Eink_DC_PIN_NUM = const(15)\n    SPI_Eink_BUSY_PIN_NUM = const(6)\n    SPI_Eink_RST_PIN_NUM = const(7)\n    SPI_Eink_CS_PIN_NUM = const(20)\n    SPI_Eink_SCK_PIN_NUM = const(21)\n    SPI_Eink_MOSI_PIN_NUM = const(8)\n    SPI_Eink_FREQ_KHZ = const(600)\n  ##############################################\n\n\n## Outlook\n\n- SPMOD_Eink Size drawing:\n\n<img src=\"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height=\"250\" />\n\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed)  |"}, "/hardware/en/maix/modules_spmod/spmod_bt.html": {"title": "SPMOD - BT", "content": "# SPMOD - BT\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_bt/sp_bt.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD-BT(Bluetooth module) uses YDJ-23.\n\n## SPMOD - BLE Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD UART to communicate with Bluetooth module\n- JDY-23 Bluetooth module:Support BLE 5.0(Compatible with BLE4.0、BLE4.2).Communication interface adopts UART interface. The module supports AT command control. It has ultra-low power design and high reliability design.\n- Two built-in LED，making module status easier to see.\n- Size:25.6\\*20.2\\*3.2mm\n\n### JDY-23 Introduction:\n\n| Features: | --- |\n| --- | -- |\n| Working Frequency:| 2.4GHz|\n| Transmission Power:| 4db(maixmun) |\n| Communication Interface:| UART |\n| Supply voltage of external power supply :| 1.8V~3.6V |\n| Range of working temperature :| -40℃ - 80℃ |\n| Antenna:| Built-in PCB antenna\n| Reception Sensitivity:| -97dbm |\n| Support master-slave: | Slave |\n| Bluetooth Version:| BLE 5.0(Compatible with BLE4.0、BLE4.2) |\n| Awakening Current State:| 800uA(Transmission) |\n| Sleep Status of Current:| <50uA (Transmission) |\n| Deep Sleep of Current:| 9uA (Not transmission) |\n| Default baud rate:| 9600 |\n\n### SPMOD_BT pin description :\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | Ground |\n| 2 | AWK | I/O | Sleep wake-up pin (active low) |\n| 3 | STA | I/O |  The status of the pin connection |\n| 4 | RX | I | Serial input pin (TTL level) |\n| 5 | 3V3 | V |  Power supply(3.3V) |\n| 6 | --- | NC | Not connected |\n| 7 | RST | I/O | Reset (active low) |\n| 8 | TX  | O | Serial output pin (TTL level) |\n\n<img src=\"../../assets/spmod/spmod_bt/back.jpg\" height=\"250\" />\n\n- Mode of connection:\n\n| MCU:FUN(IO) | SP_BT |\n| :---------: | :---: |\n| UART:TX(IO_7) | RX |\n| USRT:RX(IO_6) | TX |\n| 1.8-3.3V | 3.3V |\n| GND | GND |\n\n<img src=\"../../assets/spmod/spmod_bt/connection.png\" height=\"250\">\n\n### AT instruction list:\n\n| Order | Description |\n| --- | --- |\n|AT+POWR | Get transmit power |\n|AT+RST\t| Soft reset |\n|AT+MAC\t| Display MAC address |\n|AT+NAME | Display Transmission name |\n|AT+HOSTEN | Slave mode or IBEACON work mode |\n|AT+IBUUID | UUID of IBEACON |\n|AT+DISC | Disconnect |\n|AT+SLEEP | Configures the Sleep mode |\n|AT+MTU | Set the serial port for the APP to send a long number of packets |\n\n*See [JDY-23-V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt) for more information*\n\n## Usage\n\n* Process\n  1. Send AT instruction\n  2. Receive the reply\n  3. Determines whether the setup was successful\n\n### C :\n\n  ```c\n  // set uart rx/tx func to io_6/7\n  fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2);\n  fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2);\n  uart_init(UART_DEVICE_1);\n  uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE);\n\n  //change the name of sp_bt module to MAIXCUBE\n  uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"OK\"))\n  {\n     printk(LOG_COLOR_W \"set name success!\\r\\n\");\n  }\n\n  // get the name of sp_bt module\n  uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"NAME\"))\n  {\n     printk(LOG_COLOR_W \"get name success!\\r\\n\");\n  }\n  ```\n\n### MaixPy :\n\n  ```python\n    # set uart rx/tx func to io_6/7\n  fm.register(6,fm.fpioa.UART1_RX)\n  fm.register(7,fm.fpioa.UART1_TX)\n  uart = UART(UART.UART1,9600,8,1,0,timeout=1000, read_buf_len=4096)\n\n  #change the name of sp_bt module to MAIXCUBE\n  uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"OK\")\n      if count != 0:\n          uart.write(\"set name success\\r\\n\")\n\n  # get the name of sp_bt module\n  uart.write(\"AT+NAME\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"NAME\")\n      if count != 0:\n          uart.write(\"get name success\\r\\n\")\n  ```\n\n*Note that you must add \\r\\n after sending AT instruction*\n\n### Result:\n\n  Using [BLE Utility](../../tools/bledebugger.apk) to connect the device to do the send and receive test results are as follows:\n\n\n  <center class=\"third\">\n      <img src=\"../../assets/spmod/spmod_bt/res.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_bt/res1.png\" height=\"250\"/>\n  </center>\n\n### Runtime environments:\n\n  |  Language  |  Board  | SDK/Firmware version |\n  | :----: | :------: | :----------------------------- |\n  |   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n  | MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## Outlook\n\n- SPMOD_BLE Size drawing:\n\n<img src=\"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height=\"250\" />\n\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_lcd1.14.html": {"title": "SPMOD - LCD 1.14", "content": "# SPMOD - LCD 1.14\n\n\n## Outline\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_LCD1.14(1.14 inch LCD) uses ST7735S TFT LCD.\n\n## SPMOD - LCD1.14 Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using commom LCD driver IC ST7735S(4-wire SPI communicate)\n- Display Resolution:240\\*135\n- Size:35.0\\*20.0mm\n\n### ST7735S TFT LCD Introduction\n\n| Features： | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.5V~4.8V |\n| Supply current of external power supply | <20mA |\n| Range of working temperature | -30℃ ~ 85℃ |\n| Sleep Status of Current | <0.1mA |\n| Screen Size | 1.14 inch |\n| Active Area | 1.7mm * 10.8mm |\n| Display Resolution | 160*80 |\n| Color | 132 RGB channels |\n| Interface | 8P FPC (0.5mm pitch) |\n> DC/DC Converter,\nAdjustable VCOM Generation,\nNon-volatile (NV) Memory to Store Initial Register Setting,\nOscillator for Display Clock Generation,\nFactory default value (module ID, module version, etc) are stored in NV memory,\nTiming Controller,\n\n\n###  SPMOD_LCD1.14 pin description :\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G  | Ground |\n| 2 | CS | I  | Chip Select input pin |\n| 3 | D/C | I  | Data/Command control pin |\n| 4 | RST | I  | Reset (active low) |\n| 5 | 3V3 | V  | Power supply(3.3V) |\n| 6 | SCK | I  | SPI clock pin |\n| 7 | SI | I/O  | Master Out Slave In |\n| 8 | BL | I  | BackLight control pin (active high) |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/back.png\" width=\"300\" />\n\n- Mode of connection:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| GPIOHS15(IO_15) |  D/C   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|  GPIOHS6(IO_6)  |   BL   |\n|  2.5~4.8V   |  3.3V  |\n|  GND   |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//connection.png\" height=\"250\">\n\n## Usage\n\n* Process\n  1. Send AT instruction\n  2. Receive the reply\n  3. Determines whether the setup was successful\n\n### C :\n\n  ```c\n\n  fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_IPS_LCD_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_IPS_LCD_MOSI_PIN_NUM: 8;\n  fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM);   // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15;\n  fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7;\n  fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM);   // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6;\n\n  // set gpiohs work mode to output mode\n  gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  ips_lcd_init(); // init\n  LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display\n\n  ```\n\n### MaixPy :\n\n  ```python\n\n  # 20: SPI_LCD_CS_PIN_NUM;\n  fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force=True)\n  # 15: SPI_LCD_DC_PIN_NUM;\n  fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force=True)\n  # 6: SPI_LCD_BUSY_PIN_NUM;\n  fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force=True)\n  # 7: SPI_LCD_RST_PIN_NUM;\n  fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force=True)\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM;\n  spi1 = SPI(SPI_LCD_NUM, mode=SPI.MODE_MASTER, baudrate=SPI_LCD_FREQ_KHZ * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=SPI_LCD_SCK_PIN_NUM, mosi=SPI_LCD_MOSI_PIN_NUM)\n\n  ips = SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE)\n\n  # create an 'image' and fill it\n  img = image.Image()\n  img.draw_rectangle(80, 80, 30, 30)\n\n  # display\n  ips.display(img)\n\n\n  ```\n\n## Runtime environments\n\n| Language |  Board   |      SDK/Firmware version      |\n| :------: | :------: | :----------------------------  |\n|    C     | MaixCube | kendryte-standalone-sdk v0.5.6 |\n|  MaixPy  | MaixCube |         maixpy v0.5.1          |\n\n*The MaixPy firmware is recommended to compile from the latest source*\n\n### Result\n\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt=\"sp_lcd1.14_py\" height=\"250\" />\n\n### Transplant\n\nThe following parameters need to be modified.\n\n* C\n\n```c\n  // board_config.h\n  #define SPI_INDEX           1\n  #define SPI_SCLK_RATE       600*1000\n  #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0\n\n  #define SPI_IPS_LCD_CS_PIN_NUM      20\n  #define SPI_IPS_LCD_SCK_PIN_NUM     21\n  #define SPI_IPS_LCD_MOSI_PIN_NUM    8\n\n  #define SPI_IPS_LCD_DC_PIN_NUM     15\n  #define SPI_IPS_LCD_BL_PIN_NUM      6\n  #define SPI_IPS_LCD_RST_PIN_NUM     7\n\n  #define SPI_IPS_LCD_DC_GPIO_NUM     15\n  #define SPI_IPS_LCD_BL_GPIO_NUM     6\n  #define SPI_IPS_LCD_RST_GPIO_NUM    7\n\n  #define USE_HORIZONTAL 3    // 0/1 is horizontal, and 2/3 is vertical.\n```\n\n* Maixpy\n\n```python\n  ################### config ###################\n  SPI_LCD_NUM = SPI.SPI1\n  SPI_LCD_DC_PIN_NUM = const(15)\n  SPI_LCD_BUSY_PIN_NUM = const(6)\n  SPI_LCD_RST_PIN_NUM = const(7)\n  SPI_LCD_CS_PIN_NUM = const(20)\n  SPI_LCD_SCK_PIN_NUM = const(21)\n  SPI_LCD_MOSI_PIN_NUM = const(8)\n  SPI_LCD_FREQ_KHZ = const(600)\n  ##############################################\n```\n\n\n## Outlook\n\n- SPMOD_LCD1.14 Size drawing:\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height=\"250\" />\n\n\n-----\n\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_tof.html": {"title": "SPMOD - TOF", "content": "# SPMOD - TOF\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_tof/sp_tof.png\" style=\"padding-right:100px;\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_TOF(TOF module) uses VL53L0X .\n\n## SPMOD - TOF Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD I2C to communicate with TOF module\n- ToF module:The VL53L0X sensor used in this module is an I2C interface and a long distance single point flight time measurement (ToF) sensor. It has high performance and high reliability,\n- With the longest distance of 4m and the highest refresh rate of 50Hz\n- With the red laser pointer, the laser is activated through XSHUT and connected by SP_MOD.\n- Size:25.0\\*10\\*3.15mm\n\n### VL53L0X Introduction:\n\n| Features: | --- |\n| --- | -- |\n| Max ranging distance | 4000mm |\n| Refresh rate | 50Hz |\n| Measuring angle | 27°|\n| Communication Interface | I2C |\n| Range of working temperature | -40℃ - 80℃ |\n| Sleep Status of Current | 5uA |\n| Supply voltage of external power supply | 2.8~3.5V |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 20mA |\n\n###  SPMOD_TOF pin description:\n\n| Pin | Name | Type | Description | |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G  | Ground |\n| 2 | IRQ | I  | Interrupt input pin, connected to GPIO1 of VL53L0X |\n| 3 | NC  | NC | Not connected |\n| 4 | SDA | I/O | Receive data signal |\n| 5 | 3V3 | V  | Power supply(3.3V) |\n| 6 | NC  | NC | Not connected |\n| 7 | SHT | I  | Xshutdown pin(active low)|\n| 8 | SCL | I  | Transmit clock signal |\n\n\n<img src=\"../../assets/spmod/spmod_tof/back.png\" height=\"300\" />\n\n- Mode of connection:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_tof/connection.png\" height=\"250\">\n\n\n## Usage\n\n* Process\n\n  1. Initializatin\n  2. Adjust(option)\n  3. Get distance\n\n### C:\n\n  ```c\n\n  //set io mux\n    fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT);\n\n    gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT);\n\n    //i2c init\n    maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000);\n\n    while (vl53l0x_init(&vl53l0x_dev)) {\n          printf(\"VL53L0X init error!!!\\r\\n\");\n          msleep(500);\n    }\n\n    printf(\"VL53L0X init success!\\r\\n\");\n\n    // adjusting\n    printf(\"VL53L0X adjusting\\r\\n\");\n    vl53l0x_calibration_test(&vl53l0x_dev);\n\n    // get distance\n    printf(\"VL53L0X start work\\r\\n\");\n    vl53l0x_general_test(&vl53l0x_dev);\n\n  ```\n\n### MaixPy:\n\n  ```python| 工作电压 | 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) |\n\n    fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force=True)\n    XSHUT = GPIO(GPIO.GPIOHS0, GPIO.OUT)\n\n    i2c = I2C(VL53L0X_I2C_NUM, freq=VL53L0X_FREQ, scl=VL53L0X_SCL, sda=VL53L0X_SDA)\n\n    # create obj and read distance\n\t  tof = VL53L0X(i2c)\n\t  while True:\n      mm = tof.read()\n      utime.sleep_ms(100)\n      print(mm)\n\n  ```\n## Runtime enviroments\n\n| Language |  Boards  |      SDK/firmware version      |\n| :------: | :------: | :----------------------------: |\n|    C     | MaixCube | kendryte-standalone-sdk v0.5.6 |\n|  MaixPy  | MaixCube |         maixpy v0.5.1          |\n\n### Result\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_tof/log_c.png\" height=\"200\" />\n\n* MaixPy\n\n  - [None]\n\n## Transplant\n\nModify the following parameters to fit other K210 boards.\n\n* C\n\n```c\n  // board_config.h\n  #define VL53L0X_I2C_DEVICE 0 // i2c device number\n  #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence\n  #define VL53L0X_SCL 6 // scl\n  #define VL53L0X_SDA 7 // sda\n  #define VL53L0X_SHT 8 // sht\n```\n\n* MaixPy\n\n```python\n  ################### config ###################\n  VL53L0X_I2C_NUM = const(I2C.I2C0)\n  VL53L0X_FREQ = const(100000)\n  VL53L0X_SCL = const(6)\n  VL53L0X_SDA = const(7)\n  VL53L0X_SHT = const(8)\n  ##############################################\n```\n\n\n## Outlook\n\n- SPMOD_TOF Size drawing:\n\n<img src=\"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/README_en.html": {"title": "Sipeed HardWare WIKI", "content": "# Sipeed HardWare WIKI\n\n[English|[中文](./index.html)]\n\n## K210 Mocules\n\n* [K210 Mocules](./en/core_modules/k210_core_modules.html)\n    - [M1/M1w](./en/core_modules/k210_core_modules.html)\n    - [M1n](./en/core_modules/k210_core_modules.html)\n\n\n## MF face recognition module\n\n* [MF face recognition module]\n  - [MF0 && MF0 Dock](./en/mf_ml_module/mf0_ml_module.html)\n  - [MF1 && MF2](./en/mf_ml_module/mf1_ml_module.html)\n  - [MF4 && MF5](./en/mf_ml_module/mf5_product.html)\n\n\n- [MF face recognition module Precautions](./mf_ml_module/mf_precautions.html)\n- [MF module update firmwave](./en/mf_ml_module/mf_update_firmwave.html)\n\n-----\n\n## MaixPy Develop Kit Board\n\n* [MaixPy Develop Kit Board](./en/maixpy_develop_kit_board/develop_kit_board.html)\n  - [Maix Go](./en/maixpy_develop_kit_board/maix_go.html)\n  - [Maix Dock](./en/maixpy_develop_kit_board/maix_dock.html)\n  - [Maix Bit](./en/maixpy_develop_kit_board/maix_bit.html)\n  - [Maix Duino](./en/maixpy_develop_kit_board/maix_duino.html)\n  - [Maix Cube](./en/maixpy_develop_kit_board/maix_cube.html)\n  - [Maix Amigo](./en/maixpy_develop_kit_board/maix_Amigo.html)\n\n\n## LicheePi (Linux)\n\nLicheePi Zero\n\n- [LicheePi Zero]()\n- [LicheePi Zero Plus]()\n\n- [LicheePi Nano]()\n\n## Lichee Tang(FPGA)\n\n- [Lichee Tang Primer]()\n- [Lichee Tang Nano]()\n\n## Longan (MCU)\n\n- [longan Nano]()\n\n-----\n\n## Peripheral Module\n\n* [Grove Module]()\n    - [Grove-RGB LED]()\n* [SP-MOD Module]()\n    - Adapter\n      - [SP-Extender](./en/modules_spmod/spmod_extender.html)\n      - [SP-Grove](./en/modules_spmod/spmod_grove.html)\n      - [SP-FPC](./en/modules_spmod/spmod_fpc.html)\n      - [SP-MicArray](./en/modules_spmod/spmod_micarray.html)\n      - [SP-JoyStick](./en/modules_spmod/spmod_joystick.html)\n      - [SP-Servo](./en/modules_spmod/spmod_servo.html)\n      - [SP-Type-C]()\n    - Sensor\n      - [SP-Weather](./en/modules_spmod/spmod_weather.html)\n      - [SP-TOF-1P](./en/modules_spmod/spmod_tof.html)\n    - Communication\n      - [SP-BLE](./en/modules_spmod/spmod_bt.html)\n      - [SP-LoRa](./en/modules_spmod/spmod_lora.html)\n      - [SP-PSRAM](./en/modules_spmod/spmod_psram.html)\n      - [SP-RFID](./en/modules_spmod/spmod_rfid.html)\n      - [SP-Ethernet](./en/modules_spmod/spmod_ethernet.html)\n    - Display\n      - [SP-LCD 1.14](./en/modules_spmod/spmod_lcd1.14.html)\n      - [SP-Eink](./en/modules_spmod/spmod_eink.html)\n\n\n## Module && Debugger\n\n### Debugger\n\n- [Sipeed RV Debugger]()\n- [Dual serial port USB module]()\n\n### Module\n\n- Camera(Sensor)\n    - [OV2640]()\n    - [OV2640-M12]()\n    - [(GC0328)]()\n    - [Dual camera module(GC0328)]()\n    - [OV7740]()\n\n- [Microphone module]()\n  - [Single microphone module]()\n  - [Microphone array]()\n\n- [LCD 1.3'/2.4'/2.8'/4.3'/5']()"}, "/hardware/en/maix/modules_spmod/spmod_joystick.html": {"title": "SPMOD - JoyStick", "content": "# SPMOD - JoyStick\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_joystick/sp_joystick.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_JoyStick (JoyStick module).\n\n## SPMOD - JoyStick Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the board through the SP-MOD SPI interface\n- 7.2V~9V DC can be connected via external adapter，power the vibration motor of the handle\n- Built-in step-up circuit，easy to drive the handle\n- Compatible with PSX/PS2\n- Size:35.0\\*20.0\\*13.3mm\n\n\n###  SPMOD_JoyStick pin description:\n\n| Pin  | Name | Type  | Description  |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G | Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | SO | I/O | Master In Slave Out |\n| 4 | NC | NC | Not connected |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | ACK | O | data ready output pin |\n\n<img src=\"\" width=\"500\" />\n\n\n## Introduction\n\n- 待更新\n\n## Outlook\n\n- SPMOD_JoyStick Size drawing:\n\n<img src=\"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_extender.html": {"title": "SPMOD - Extender", "content": "# SPMOD - Extender\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_extender/sp_extender.png\" align=\"right\" width=\"\" height=\"300\" />\n\n\nSPMOD_Extender(8PIN SP-MOD Expander)\n\n## SPMOD - Extender Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-Extender to divide SP-MOD into four interface，including three Two-wire SP-MOD interface and a Four-wire SP-MOD interface\n- Size:35.0\\*20.0\\*1.6mm\n\n## Introduction\n\n| Features: | --- |\n| --- | -- |\n| Two-wire SP-MOD interface*3 | Connect to the D0 and D1 on the SP-MOD，Used as UART interface (Connect at most one device)\nor I2C interface(Connect at most three device) , can also be used as two independent GPIO |\n| Four-wire SP-MOD interface |  Connect to the D2-D5 on the SP-MOD，Uusually used as SPI interface，\ncan also be used as four independent GPIO |\n| Supply voltage of external power supply | Depends on connected modules |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1000mA |\n| Range of working temperature | -40℃ ~ 85℃ |\n\n\n## Outlook\n\n- SPMOD_Extender Size drawing:\n\n<img src=\"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/M1n.html": {"title": "Sipeed M1n", "content": "---\ntitle: Sipeed M1n\nkeywords: maixpy, k210, AIOT, 边缘计算, M1n\ndesc: maixpy doc: Sipeed M1/M1W \n---\n\n## M1n\n\nSiPEEDM1n是基于基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-v架构64位双核)设计的一款AIOT开发板。板载DVP双摄像头接口、Flash、并把大部分IO通过金手指方式引出，模块设计小巧精致、布局走线合理规范，用户可直接应用于商用产品，也可以通过转接板对此模块进行开发。\n![M1n](./assets/m1n/M1n_1.png)\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n\n## M1n 参数\nM1n模块以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPs ,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n<p><img loading=\"M1/M1W\" src=\"./assets/m1n/M1n.png\" width = 500 ></p>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块软件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>操作系统</td><td>FreeRtos and Standrad development ki</td>\n    </tr>\n    <tr>\n        <td>编程语言</td><td>MicroPython</td>\n    </tr>\n    <tr>\n        <td>机器视觉</td><td>支持卷积神经网络</td>\n    </tr>\n    <tr>\n        <td>机器听觉</td><td>高性能音频处理器(APU)</td>\n    </tr>\n    <tr>\n        <td>开发环境</td><td>串口终端、MaixPy IDE</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块硬件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>尺寸</td><td>22.0*25.0mm</td>\n    </tr>\n    <tr>\n        <td>引脚</td><td>部分引脚金手指引出</td>\n    </tr>\n    <tr>\n        <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td><td>-30°C ~85°C</td>\n    </tr>\n</table>\n\n\n\n\n## 资料下载\n\n芯片 K210 Datasheet: [Kendryte 官网](https://canaan-creative.com/)\nM1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1&M1W)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载\ndesc: 矽速科技的硬件资料站\n---\n\n# Maix—I\n\n[English](./../../en/maix/index.html)\n\n## K210 核心模组\n- [M1/M1w](./core_module.html)\n- [M1n](./core_modules/k210_core_modules.html)\n\n## Maix 系列开发板\n\n\n<table role=\"table\" class=\"center_table\">\n  <tbody>\n    <tr>\n      <th scope=\"col\">型号</th>\n      <th scope=\"col\">图片</th>\n    </tr>\n    <tr>\n      <td> Maix Go</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_go.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_go/Go.jpg\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Dock</td>\n      <td><a href=\"./maixpy_develop_kit_board/Maix_dock.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_dock/Dan_Dock.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Duino</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_duino.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_duino/maixduino_0.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Bit</td>\n      <td> <a href=\"./maixpy_develop_kit_board/maix_bit.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_bit/Bit.png\" width=\"260\"></a> </td>\n    </tr>\n    <tr>\n      <td>Maix Cube</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_cube.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_cube/maix_cube.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Amigo</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_Amigo.html\" target=\"_blank\"><img src=\"./assets/dk_board/maxi_amigo/maix_amigo_0.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n    <td>Maix nano</td>\n    <td><a href=\"./maixpy_develop_kit_board/maix_nano.html\"><img src=\"./assets/dk_board/maix_nano/maix_nano.jpg\" width=\"260\" alt=\"Maxi nano\"></a></td>\n    </tr>\n  </tbody>\n</table>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maix/core_module.html": {"title": "Sipeed M1/M1W", "content": "---\ntitle: Sipeed M1/M1W\nkeywords: maixpy, k210, AIOT, 边缘计算, M1/M1W\ndesc: maixpy doc: Sipeed M1/M1W \n---\n\n## M1/M1W\n\nM1/M1W模块是基于嘉楠堪智科技的边缘智能计算芯片 K210 (RISC-V架构) 设计的一款AIOT模块。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元(FPU) ,具备卷积人工神经网络硬件加速器(KPU)和快速傅里叶变换加速器(FFT)、搭载现场可编程IO阵列(FPIOA)，支持多种主流Al编程框架。M1W模块内置标准802.11 b/g/n协议的ESP8285 WiFi芯片，可让模块轻松联网。\n\n![M1/M1W](./assets/m1_m1w/M1_Dan.png)\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n\n## M1/M1W 参数\nM1/M1W Al模块系统主要由电源(3 Channel DC-DC)、Flash芯片(16M)电路、K210芯片和WiFi芯片四部分组成。K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM。模块在Al机器视觉、听觉性能方便表现突出，芯片总算力可达1TOPS，芯片内置多种硬件加速单元(KPU、FPU，FFT等)，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。M1W模块嵌入无线WiFi功能，可轻松实现联网控制。\n\n\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1_vs_M1W.png\" width = 500 ></p>\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1_pin.png\" width = 500 ></p>\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1W_2.png\" width=500 ></p>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>神经网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块软件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>操作系统</td><td>FreeRtos and Standrad development ki</td>\n    </tr>\n    <tr>\n        <td>编程语言</td><td>MicroPython</td>\n    </tr>\n    <tr>\n        <td>机器视觉</td><td>支持卷积神经网络</td>\n    </tr>\n    <tr>\n        <td>机器听觉</td><td>高性能音频处理器(APU)</td>\n    </tr>\n    <tr>\n        <td>开发环境</td><td>串口终端、MaixPy IDE</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块硬件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>尺寸</td><td>25.4*25.4*3.3mm</td>\n    </tr>\n    <tr>\n        <td>引脚</td><td>72 PIN全引脚引出</td>\n    </tr>\n    <tr>\n        <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td><td>-30°C ~85°C</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">Wi-Fi功能参数</th>\n        </tr>\n    </thead>\n    <tr>\n        <td>主控</td>\n        <td>ESP8285</td>\n    </tr>\n    <tr>\n    <td>无线标准</td><td>802.11 b/g/n</td>\n    </tr>\n    <tr>\n    <td>频率范围</td><td>2400Mhz - 2483.5Mhz</td>\n    </tr>\n    <tr>\n    <td>天线</td><td>标准IPEX接口天线</td>\n    </tr>\n    <tr>\n    <td>Wi-Fi模式</td><td>支持Station / SoftAP /SoftAP+Station</td>\n    </tr>\n</table>\n\n> 为了让Al模块能应用于更多场合，Sipeed团队还推出了无WiFi功能版本的M1模块，如果用户无需使用无线联网的功能，可以选择我们的M1模块。M1模块和M1W模块的AI功能一致，使用方法基本相同，主要区别就是M1W模块比M1模块多了WiFi功能。\n\n## 资料下载\n\n芯片 K210 Datasheet: [Kendryte 官网](https://canaan-creative.com/)\nM1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1&M1W)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/en/maixIV/index.html": {"title": "", "content": "Coming soon"}, "/hardware/en/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, Sipeed, Hardware specifications, Documentation, Downloaden, Deeplearning, Artificial Intelligence, K210\ndesc: Sipeed hardware documentation website\n---\n\n# Sipeed HardWare WIKI\n\n[English](./README_en.html)[中文]\n\n## K210 核心模组\n\n* [K210 核心模块](./core_modules/k210_core_modules.html)\n    - [M1/M1w](./core_modules/k210_core_modules.html)\n    - [M1n](./core_modules/k210_core_modules.html)\n\n## MaixPy 系列开发板\n\n* [MaixPy boards](./maixpy_develop_kit_board/develop_kit_board.html)\n  - [Maix Go](./maixpy_develop_kit_board/maix_go.html)\n  - [Maix Dock(M1/M1W)](./maixpy_develop_kit_board/maix_dock.html)\n  - [Maix Bit](./maixpy_develop_kit_board/maix_bit.html)\n  - [Maix Duino](./maixpy_develop_kit_board/maix_duino.html)\n  - [Maix Nano](./maixpy_develop_kit_board/maix_nano.html)\n  - [Maix Cube](./zh/maixpy_develop_kit_board/maix_cube.html)\n  - [Maix Amigo](./maixpy_develop_kit_board/maix_Amigo.html)\n\n\n\n### MaixPy 外设模块\n\n* [扩展接口 Grove](./)\n    - [Grove-RGB LED](./)\n* [扩展接口 SP-MOD](./)\n    - [转接板类](./)\n    - [SP-Extender](./modules_spmod/spmod_extender.html)\n    - [SP-Grove](./modules_spmod/spmod_grove.html)\n    - [SP-FPC](./modules_spmod/spmod_fpc.html)\n    - [SP-MicArray](./modules_spmod/spmod_micarray.html)\n    - [SP-JoyStick](./modules_spmod/spmod_joystick.html)\n    - [SP-JoyStick2](./zh/modules_spmod/spmod_joystick.html)\n    - [SP-Servo](./modules_spmod/spmod_servo.html)\n    - [SP-Type-C](./)\n    - 传感器类\n    - [SP-Weather](./modules_spmod/spmod_weather.html)\n    - [SP-TOF-1P](./modules_spmod/spmod_tof.html)\n    - 通信类\n    - [SP-BLE](./modules_spmod/spmod_bt.html)\n    - [SP-LoRa](./modules_spmod/spmod_lora.html)\n    - [SP-PSRAM](./modules_spmod/spmod_psram.html)\n    - [SP-RFID](./modules_spmod/spmod_rfid.html)\n    - [SP-Ethernet](./modules_spmod/spmod_ethernet.html)\n    - 显示类\n    - [SP-LCD 1.14](./modules_spmod/spmod_lcd1.14.html)\n    - [SP-Eink](./modules_spmod/spmod_eink.html)\n\n## 模块&&调试器\n\n### 调试器\n\n- [Sipeed RV Debugger](./)\n- [双串口 USB 模块](./)\n\n### 模块\n\n- Camera(Sensor)\n\n    - [OV2640](./)\n    - [OV2640-M12](./)\n    - [双摄像头模块(OV2640)](./)\n    - [GC0328](./)\n    - [双摄像头模块(GC0328)](./)\n    - [OV7740](./)\n\n- [麦克风模块](./)\n  - [单麦克风模块](./)\n  - [麦克风阵列](./)\n\n- [LCD 1.3/2.4/2.8/4.3/5 寸](./)"}, "/hardware/en/modules/Gamepad.html": {"title": "Sipeed Gamepad", "content": "# Sipeed Gamepad\n\n## 概述\n\n![](./../../assets/spmod/spmod_amigo_hendle/Gamepad141.jpg)\n\n采用主控芯片： GD32F150G\n\n通信接口：IIC（8P座子或者Grove-4P-2.0mm座子）\n\n板载10个按键（每个按键都连接到独立的GPIO）\n\n板载指示灯\n\n## 硬件参数\n\n| 项目 | 参数 |\n| --- | --- |\n| MCU | GD32F150G（Arm Cortex-M3）|\n| 主频 | 72Mhz |\n| 存储 | 64KB Flash, 8KB SRAM |\n| 按键 | 10个按键（每个按键都连接到独立的GPIO） |\n| 下载接口 | SWD下载 |\n| 晶振 | 24MHz无源晶振 |\n| LED | 板载1个电源指示灯和2个LED |\n| USB接口 | 板载1个USB TYPE-C 母座（连接到MCU的USB） |\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_5.png)\n\n## 手柄接口\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_3.jpg)\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_4.jpg)\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明      |\n| -------- | -------- | ---- | ------------- |\n| 1  | GND | G  | 模块电源地 |\n| 2  | NC | NC  | 悬空引脚，无功能 |\n| 3  | NC | NC  | 悬空引脚，无功能 |\n| 4  | SDA | I/O  | 模块I2C串行数据引脚 |\n| 5  | 3V3 | V  | 模块电源输入正 |\n| 6  | NC | NC  | 悬空引脚，无功能 |\n| 7  | NC | NC  | 悬空引脚，无功能 |\n| 8  | SCL | I  | 模块I2C串行时钟引脚 |\n\n链接方式\n\n单手柄：\n![](./../../assets/spmod/spmod_amigo_hendle/Gamepad.143.jpg)\n\n双手柄：\n\n![等待完善](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_6.png)\n## 软件描述\n| 项目| 参数 |\n| --- | --- |\n| 开发环境 | Maixpy IDE、 PlatformIO IDE |\n| 开发语言 | C语言、 python |\n| 通讯协议 | IIC |\n\n> GD32F150G源码和例程 [https://github.com/sipeed/GD32F150-I2C-Handle](https://github.com/sipeed/GD32F150-I2C-Handle)\n\n### 手柄测试\n\n单手手柄输入测试\n```python \nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n```\n\n双手柄输入测试\n```python\nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n    try:\n        #i2c.writeto(0x42, b'0')\n        tmp = (i2c2.readfrom(0x42, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n```\n\n测试代码输出\n\n```python\n    0-252       #没有输出\n    1-252       #按下 B 键\n    2-252       #按下 A 键\n    4-252       #按下 SEL 键  \n    8-252       #按下 START 键   \n    16-252      #按下 UP 键 \n    32-252      #按下 DOWN 键  \n    64-252      #按下 LEFT 键\n    128-252     #按下 RIGHT 键\n    0-254       #按下 X 键\n    0-253       #按下 Y 键\n```\n\n### 游戏测试\n\n[MaixPy-NES](/soft/maixpy/zh/api_reference/media/nes.html)\n\n\n## 资料下载\n\n[Gamepad](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Gamepad)"}, "/hardware/en/modules/micarray.html": {"title": "MicArray 麦克风阵列", "content": "# MicArray 麦克风阵列\n\n## 概述\n\n![micarray](./../../assets/spmod/spmod_micarray/spmod_micarray.png)\n\n7个MEMS麦克风 : MSM261S4030H0\n12个SK9822 LED\n支持 2*5P 2.54mm 端子和 10P 0.5mm FPC 连接器\n\n## 麦克风阵列介绍\n\n- MEMS 麦克风 :6 个 MSM261S4030H0 组成阵列\n- 灵敏度 : -26(dB,dBFS @1kHz 1Pa)\n- 信噪比 : 57dB(20kHz bandwidth, A-weighted)\n- 尺寸 :78.1*88.8mm\n- 灯光 :12 个 LED 组成一个环形 LED 阵列 多个 LED 通过双信号线级联\n- 8 Bit(256 级) 可调颜色,5Bit (32 级)亮度调节 连接器 :支持 2*5P 2.54mm 端子和 10P 0.5mm FPC 连接器\n\n## 参数\n| 功能特点 | 参数 |\n| --- | --- |\n| 声压级 | 140 dB SPL |\n| 灵敏度 | -26(dB,dBFS @1kHz 1Pa) |\n| 信噪比 | 57 dB (20kHz bandwidth,A-weighted) <br>THD<1% (100dB SPL @1kHz S=Nom,Rload>2k ) |\n| 时钟频率 | 1.0-4.0Mhz(正常模式) <br>150-800khz(低功耗模式) |\n\n## 模块引脚定义\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 | \n| --- | --- | --- | --- |\n| 1 | VIN | VCC | 模块电源输入正 |\n| 2 | GND | G | 模块电源地 |\n| 3 | MIC_D0 | I/O | 0号麦克风和1号麦克风的I²S 接口的串行数据输出 |\n| 4 | MIC_D1 | I/O | 2号麦克风和3号麦克风的I²S 接口的串行数据输出 |\n| 5 | MIC_D2 | I/O | 4号麦克风和5号麦克风的I²S 接口的串行数据输出 |\n| 6 | MIC_D3 | I/O | 中心麦克风的I²S 接口的串行数据输出 |\n| 7 | MIC_WS | I/O | I²S 接口的串行数据字选择 |\n| 8 | MIC_CK | I/O | I²S 接口的串行数据时钟 |\n| 9 | LED_CK | I/O | LED 的 I²C 接口的串行数据时钟 |\n| 10 | LED_DA | I/O | LED 的 I²C 接口的串行数据输出 |\n\n![MicArray](./../../assets/spmod/spmod_micarray/MicArray.png)\n\n## 例程代码\n\n### 接线\n\n杜邦线接法\n\n| 麦克风阵列 | 开发板上的对应管脚 | 代码中所对应的参数 |\n| ---- | ---- | ---- |\n| VIN | 3.3v/5v | —— |\n| GND | GND | —— |\n| LED_CK | I/O 口 | sk9822_clk |\n| LED_DA | I/O 口 | sk9822_dat |\n| MIC_D0 | I/O 口 | i2s_d0 |\n| MIC_D1 | I/O 口 | i2s_d1 |\n| MIC_D2 | I/O 口 | i2s_d2 |\n| MIC_D3 | I/O 口 | i2s_d3 |\n| MIC_WS | I/O 口 | i2s_ws |\n| MIC_CK | I/O 口 | i2s_sclk |\n\n> 根据以上的表格来接线，然后将参数中的数字修改成所接的 I/O 引脚号，如果不知道什么是 I/O 管脚号就自己去百度，不要问！\n\n### python代码\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()\n#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)\n\nwhile True:\n    imga = mic.get_map()\n    b = mic.get_dir(imga)\n    a = mic.set_led(b,(0,0,255))\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1)\n    a = lcd.display(imgc)\nmic.deinit()\n\n```\n> 需要自行根据自己的接的管脚号，进行mic.init()的参数配置\n\n## 资料\n[麦克风阵列硬件资料](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-R6+1_MicArray)\n\n## 更多使用方法\n\n请移步到[论坛](https://bbs.sipeed.com)上查看\n\n## 常见问题\n\n### 出现报错信息\n\n![报错信息](./../../assets/spmod/spmod_micarray/spmod_micarray_err.png)\n\n更换其他IO管脚即可"}, "/hardware/en/longan/Zero/index.html": {"title": "", "content": "敬请期待"}, "/hardware/en/longan/index.html": {"title": "", "content": "敬请期待"}, "/hardware/en/longan/One/index.html": {"title": "", "content": "敬请期待"}, "/hardware/en/longan/Nano/blink.html": {"title": "Blink 闪灯程序", "content": "Blink 闪灯程序\n=====\n\n## 创建 Blink 工程\n\n* 打开 PIO 主页 选择 `Project Examples`\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png)\n\n* 选择 `arduino blink` 点击 `Import` 导入示例程序 （初次导入需要下载架构文件及工具，需要等待较长时间）\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png)\n\n* 导入成功后即可见到示例工程\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png)\n\n## 工程配置文件\n\n\n* 我们首先需要编辑工程配置文件 `platformio.ini` 根据自己的开发板型号，删掉其他开发板环境。\n\n![](./../../assets/pio_ini_cfg.png)\n\n配置示例\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v          ;平台，选择gd32v\nframework = arduino       ;可选 gd32vf103-sdk 或 arduino\nboard = sipeed-longan-nano ; 开发板\nmonitor_speed = 115200     ; 串口监视器波特率\nupload_protocol = serial   ; 下载工具 默认串口， 可选 dfu、jlink、gd-link 等\ndebug_tool = jlink         ; 调试工具 默认jlink ，可选 sipeed-rv-debugger 等\n```\nPIO 可以在配置文件中实现设置宏定义， 控制编译流程等自定义功能，高级用法请参阅 [PIO 官方文档](https://docs.platformio.org/en/latest/projectconf.html).\n\n## 一键编译\n\n点击左下角的 `Build` 即可构建项目\n![](../../assets/pio_complie.png)\n\n## 连接开发板\n### 串口 ISP 下载\n* 准备 USB 转 串口下载器\n* 连接开发板与下载器\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = serial\n```\n* 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入下载模式。\n\n### JTAG 下载\n* 准备J-link 或 Sipeed RV 调试器\n* 连接开发板\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = jlink\n```\n或者\n```ini\nupload_protocol = sipeed-rv-debugger\n```\n\n### USB DFU 下载\n* **首次** 使用需要安装 libusb 驱动程序， 请参考此步骤 [使用 Zaidig 安装驱动](#使用zadig安装驱动).\n* 准备 USB Type-c 数据线\n* 使用数据线连接电脑与开发板\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = dfu\n```\n* 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入 DFU 模式。\n\n\n## 一键下载\n\n按照上面步骤选择好下载方式后，即可使用 PIO 内置工具一键下载。\n\n点击左下角的 `Upload` 即可向开发板上传程序。\n\n![](../../assets/pio_upload.png)\n\n## 使用Zadig安装驱动\nPIO 内置 dfu-util 下载工具，使用此工具需要为开发板安装 libusb 驱动。（注意： 与 GD 官方驱动不同）\n\n建议通过 Zadig 安装 winusb 驱动。[下载地址](https://github.com/pbatard/libwdi/releases/download/b721/zadig-2.4.exe)\n\n下载成功后打开 Zadig\n\n在下拉栏中选择 GD32V， 替换驱动选择 WinUSB, 点击替换按钮，即可替换成功。\n![](../../assets/dfu_zadig.png)\n## DFU 图形界面下载\n\n下载DFU工具：http://dl.sipeed.com/LONGAN/Nano/Tools/GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar\n\n解压出两个文件夹：\n\nGD32 MCU Dfu Drivers_v1.0.1.2316  和 GD32 MCU Dfu Tool_v3.8.1.5784\n\n先进入driver文件夹，安装对应的驱动文件，注意使用管理员权限运行\n\n![](../../assets/examples/how_to_install_dfu.png)\n\n运行 GD32 MCU Dfu Tool.exe\n将 Longan Nano 插到电脑，按住 Boot0 键，短按 Reset 键，再松开 Boot0 键，\n可以看到 DFU 工具中识别到了 GD32VF 芯片\n\n选择对应的固件文件，并勾选烧录后校验，点击OK，即可进行烧录\n\n烧录完成之后不会自动复位，需要自己手工按下复位按键，查看运行效果\n\n![](../../assets/examples/how_to_use_dfu.png)"}, "/hardware/en/longan/Nano/Longan_nano.html": {"title": "Longan nano ", "content": "# Longan nano \n\n## 介绍\n\nLongan Nano是基于兆易创新(GigaDevice)的GD32VF103CBT6(RISC-V架构)芯片设计的极简开发板。开发板将芯片所有IO引出，设计小巧精致，板载Type-C、LCD、SD卡、JTAG等接口，方便广大学生、工程师、极客爱好者们接触学习最新一代的 RISC-V处理器。\n\n![Longan_nano_pin](./../../../assets/Longan/nano/Longan_nano.124.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 基于 RISC-V 32 位内核的 GD32VF103CBT6 |\n| 内核功耗 | 仅传统 Cortex-M3 的 1/3 |\n| 存储 | 128KB Flash, 32KB SRAM |\n|外设 | 4 x general purpose 16-bit timer, 2 x basic 16-bit timer, 1 x advanced 16-bit timer,<br>Watchdog, RTC, Systick<br>3 x USART, 2 x I2C, 3 x SPI, 2 x I2S, 2 x CAN, 1 x USBFS (OTG), 2 x ADC (10 channel), 2 x DAC |\n| 按键 | 1 个复位按键和 1 个 BOOT 按键（连接到 GPIO） |\n| 屏幕接口 | SPI 接口（标配 0.96 寸 160x80 RGB IPS LCD） |\n| 存储接口 | 板载 TF 卡座子 |\n| 调试接口 | 2x4 排针引出 JTAG 调试接口和串口 |\n| 晶振 | 8MHz 无源晶振 + 32.768KHz RTC 无源晶振 |\n| LED | 板载 1 个 RGB LED |\n| GPIO 数量 | 2 引出 28 个 GPIO 到排针 |\n### 新版照片\n![](./../../../assets/Longan/nano/Longan-nano_PINOUT.svg)\n \n![](./../../../assets/Longan/nano/longan-nano-1.png)\n### 旧版照片\n![](./../../../assets/Longan/nano/longan_nano_pinout_old.png)\n\n![](./../../../assets/Longan/nano/longan-nano-old.png)\n\n## 使用\n\n[Longan使用](/soft/longan/zh/index.html)\n\n## 产品技术支持\nLongan Nano 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/en/longan/Nano/pio.html": {"title": "PIO 配置", "content": "PIO 配置\n=====\n\n## 安装 VS-CODE\nVS CODE 是一款比较常用的开发工具。前往[VScode官网](https://code.visualstudio.com/ \"VScode官网\")，下载安装对应操作系统版本的安装包即可。\n\n## 安装 PIO 插件\n打开 VSCode -> 点击左侧扩展 -> 搜索 PlatformIO -> 点击安装插件 -> 等待安装完成 -> 重启 VSCODE\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png)\n\n## 安装 GD32V 平台定义\n\nPIO 目前提供**命令行**与**图形界面**两种方式来安装。下面将分别介绍：\n（PS : 推荐命令行，因为能看到下载进度条。）\n\n### 命令行\n\n点击左侧PIO标志 -> 点击左下方的新建终端 -> 在终端窗口中执行下面的安装指令\n\n* 发布版 （稳定版本）\n```\nplatformio platform install gd32v\n```\n\n* 开发版（与Github同步）\n```\nplatformio platform install https://github.com/sipeed/platform-gd32v\n```\n![](../../assets/pio_install_gd32v.png)\n\n注：受国内网络环境影响，安装过程需要较长时间，请耐心等待。\n\n\n### 图形界面\n\n打开VS CODE -> 点击左侧 PIO 图标 -> 点击左下方的 Open 选项 -> 点击 Platforms 页面 -> 点击 Advanced Installation 打开添加窗口\n![](../../assets/pio_install_add_gd32v_step1.png)\n\n在打开的窗口中输入下面的网址\n```\nhttps://github.com/sipeed/platform-gd32v.git\n```\n\n点击 Install 即可添加完成。\n\n![](../../assets/pio_install_add_gd32v_step2.png)\n\n耐心等待即可安装成功。 （安装失败多为网络原因， 请更换网络环境后再次尝试）\n![](../../assets/pio_install_add_gd32v_step3.png)"}, "/hardware/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}